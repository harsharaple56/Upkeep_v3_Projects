//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Upkeep_v3.Upkeep_V3_Services {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Upkeep_V3_ServicesSoap", Namespace="http://tempuri.org/")]
    public partial class Upkeep_V3_Services : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback MenuMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserTypeMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_ZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_LocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Sub_LocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_DepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_User_TypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback PriorityMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FrequencyMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZoneMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LocationMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubLocationMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGroupMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchUserGrpOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CategorySubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorkflowMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_User_UserGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubCategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindLocationDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_LocationTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Ticket_WorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Ticket_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Employee_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback Retailer_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback EventDetails_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback bindEventDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_CustomerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_EventQuestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_QuestionIUOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MIS_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MIS_Report_ExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportRetailerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddChecklistMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChecklistPoint_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChecklistRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_ChecklistPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Close_Ticket_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Location_PopulateRootLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback Location_PopulateSubLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback Add_Update_Location_NodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchMenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Assigned_RoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Role_MenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback FETCH_Saved_Role_MENU_RightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_RoleMenuRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Assigned_RoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_RoleListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_VMSConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_AnswerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Upkeep_V3_Services() {
            this.Url = global::Upkeep_v3.Properties.Settings.Default.Upkeep_v3_Upkeep_V3_Services_Upkeep_V3_Services;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event MenuMaster_CRUDCompletedEventHandler MenuMaster_CRUDCompleted;
        
        /// <remarks/>
        public event UserTypeMaster_CRUDCompletedEventHandler UserTypeMaster_CRUDCompleted;
        
        /// <remarks/>
        public event DepartmentMaster_CRUDCompletedEventHandler DepartmentMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_ZoneCompletedEventHandler Fetch_ZoneCompleted;
        
        /// <remarks/>
        public event Fetch_LocationCompletedEventHandler Fetch_LocationCompleted;
        
        /// <remarks/>
        public event Fetch_Sub_LocationCompletedEventHandler Fetch_Sub_LocationCompleted;
        
        /// <remarks/>
        public event Fetch_DepartmentCompletedEventHandler Fetch_DepartmentCompleted;
        
        /// <remarks/>
        public event Fetch_User_TypeCompletedEventHandler Fetch_User_TypeCompleted;
        
        /// <remarks/>
        public event UserMaster_CRUDCompletedEventHandler UserMaster_CRUDCompleted;
        
        /// <remarks/>
        public event LoginUserCompletedEventHandler LoginUserCompleted;
        
        /// <remarks/>
        public event PriorityMaster_CRUDCompletedEventHandler PriorityMaster_CRUDCompleted;
        
        /// <remarks/>
        public event FrequencyMaster_CRUDCompletedEventHandler FrequencyMaster_CRUDCompleted;
        
        /// <remarks/>
        public event ZoneMaster_CRUDCompletedEventHandler ZoneMaster_CRUDCompleted;
        
        /// <remarks/>
        public event LocationMaster_CRUDCompletedEventHandler LocationMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SubLocationMaster_CRUDCompletedEventHandler SubLocationMaster_CRUDCompleted;
        
        /// <remarks/>
        public event UserGroupMaster_CRUDCompletedEventHandler UserGroupMaster_CRUDCompleted;
        
        /// <remarks/>
        public event FetchUserGrpCompletedEventHandler FetchUserGrpCompleted;
        
        /// <remarks/>
        public event Fetch_CategorySubCategoryCompletedEventHandler Fetch_CategorySubCategoryCompleted;
        
        /// <remarks/>
        public event WorkflowMaster_CRUDCompletedEventHandler WorkflowMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_User_UserGroupListCompletedEventHandler Fetch_User_UserGroupListCompleted;
        
        /// <remarks/>
        public event CategoryMaster_CRUDCompletedEventHandler CategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SubCategoryMaster_CRUDCompletedEventHandler SubCategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event BindLocationDetailsCompletedEventHandler BindLocationDetailsCompleted;
        
        /// <remarks/>
        public event Fetch_LocationTreeCompletedEventHandler Fetch_LocationTreeCompleted;
        
        /// <remarks/>
        public event Fetch_Ticket_WorkflowCompletedEventHandler Fetch_Ticket_WorkflowCompleted;
        
        /// <remarks/>
        public event Insert_Ticket_DetailsCompletedEventHandler Insert_Ticket_DetailsCompleted;
        
        /// <remarks/>
        public event Employee_CRUDCompletedEventHandler Employee_CRUDCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event fetchStoreCompletedEventHandler fetchStoreCompleted;
        
        /// <remarks/>
        public event Retailer_CRUDCompletedEventHandler Retailer_CRUDCompleted;
        
        /// <remarks/>
        public event Event_InsertCompletedEventHandler Event_InsertCompleted;
        
        /// <remarks/>
        public event EventDetails_CRUDCompletedEventHandler EventDetails_CRUDCompleted;
        
        /// <remarks/>
        public event bindEventDetailsCompletedEventHandler bindEventDetailsCompleted;
        
        /// <remarks/>
        public event Get_CustomerDetailsCompletedEventHandler Get_CustomerDetailsCompleted;
        
        /// <remarks/>
        public event Get_EventQuestionsCompletedEventHandler Get_EventQuestionsCompleted;
        
        /// <remarks/>
        public event Event_QuestionIUCompletedEventHandler Event_QuestionIUCompleted;
        
        /// <remarks/>
        public event Fetch_MIS_ReportCompletedEventHandler Fetch_MIS_ReportCompleted;
        
        /// <remarks/>
        public event Event_UpdateCompletedEventHandler Event_UpdateCompleted;
        
        /// <remarks/>
        public event GetEventListCompletedEventHandler GetEventListCompleted;
        
        /// <remarks/>
        public event Fetch_MIS_Report_ExcelCompletedEventHandler Fetch_MIS_Report_ExcelCompleted;
        
        /// <remarks/>
        public event ImportRetailerCompletedEventHandler ImportRetailerCompleted;
        
        /// <remarks/>
        public event AddChecklistMaster_CRUDCompletedEventHandler AddChecklistMaster_CRUDCompleted;
        
        /// <remarks/>
        public event ChecklistPoint_CRUDCompletedEventHandler ChecklistPoint_CRUDCompleted;
        
        /// <remarks/>
        public event ChecklistRequestCompletedEventHandler ChecklistRequestCompleted;
        
        /// <remarks/>
        public event Update_ChecklistPointsCompletedEventHandler Update_ChecklistPointsCompleted;
        
        /// <remarks/>
        public event Close_Ticket_DetailsCompletedEventHandler Close_Ticket_DetailsCompleted;
        
        /// <remarks/>
        public event Location_PopulateRootLevelCompletedEventHandler Location_PopulateRootLevelCompleted;
        
        /// <remarks/>
        public event Location_PopulateSubLevelCompletedEventHandler Location_PopulateSubLevelCompleted;
        
        /// <remarks/>
        public event Add_Update_Location_NodeCompletedEventHandler Add_Update_Location_NodeCompleted;
        
        /// <remarks/>
        public event FetchMenuCompletedEventHandler FetchMenuCompleted;
        
        /// <remarks/>
        public event RoleMaster_CRUDCompletedEventHandler RoleMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_Assigned_RoleCompletedEventHandler Fetch_Assigned_RoleCompleted;
        
        /// <remarks/>
        public event Fetch_Role_MenuCompletedEventHandler Fetch_Role_MenuCompleted;
        
        /// <remarks/>
        public event FETCH_Saved_Role_MENU_RightsCompletedEventHandler FETCH_Saved_Role_MENU_RightsCompleted;
        
        /// <remarks/>
        public event Insert_RoleMenuRightsCompletedEventHandler Insert_RoleMenuRightsCompleted;
        
        /// <remarks/>
        public event Insert_Assigned_RoleCompletedEventHandler Insert_Assigned_RoleCompleted;
        
        /// <remarks/>
        public event Fetch_RoleListingCompletedEventHandler Fetch_RoleListingCompleted;
        
        /// <remarks/>
        public event Insert_VMSConfigurationCompletedEventHandler Insert_VMSConfigurationCompleted;
        
        /// <remarks/>
        public event Fetch_AnswerCompletedEventHandler Fetch_AnswerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MenuMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MenuMaster_CRUD(int Menu_ID, string Menu_Desc, string Parent_Menu_Id, string Toot_Tip, string Menu_Url, string Module_Menu_Id, string Is_Deleted, string Action) {
            object[] results = this.Invoke("MenuMaster_CRUD", new object[] {
                        Menu_ID,
                        Menu_Desc,
                        Parent_Menu_Id,
                        Toot_Tip,
                        Menu_Url,
                        Module_Menu_Id,
                        Is_Deleted,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MenuMaster_CRUDAsync(int Menu_ID, string Menu_Desc, string Parent_Menu_Id, string Toot_Tip, string Menu_Url, string Module_Menu_Id, string Is_Deleted, string Action) {
            this.MenuMaster_CRUDAsync(Menu_ID, Menu_Desc, Parent_Menu_Id, Toot_Tip, Menu_Url, Module_Menu_Id, Is_Deleted, Action, null);
        }
        
        /// <remarks/>
        public void MenuMaster_CRUDAsync(int Menu_ID, string Menu_Desc, string Parent_Menu_Id, string Toot_Tip, string Menu_Url, string Module_Menu_Id, string Is_Deleted, string Action, object userState) {
            if ((this.MenuMaster_CRUDOperationCompleted == null)) {
                this.MenuMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMenuMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("MenuMaster_CRUD", new object[] {
                        Menu_ID,
                        Menu_Desc,
                        Parent_Menu_Id,
                        Toot_Tip,
                        Menu_Url,
                        Module_Menu_Id,
                        Is_Deleted,
                        Action}, this.MenuMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnMenuMaster_CRUDOperationCompleted(object arg) {
            if ((this.MenuMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MenuMaster_CRUDCompleted(this, new MenuMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserTypeMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UserTypeMaster_CRUD(int User_Type_ID, string User_Type_Desc, int CompanyID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("UserTypeMaster_CRUD", new object[] {
                        User_Type_ID,
                        User_Type_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UserTypeMaster_CRUDAsync(int User_Type_ID, string User_Type_Desc, int CompanyID, string LoggedInUserID, string Action) {
            this.UserTypeMaster_CRUDAsync(User_Type_ID, User_Type_Desc, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void UserTypeMaster_CRUDAsync(int User_Type_ID, string User_Type_Desc, int CompanyID, string LoggedInUserID, string Action, object userState) {
            if ((this.UserTypeMaster_CRUDOperationCompleted == null)) {
                this.UserTypeMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserTypeMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("UserTypeMaster_CRUD", new object[] {
                        User_Type_ID,
                        User_Type_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.UserTypeMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnUserTypeMaster_CRUDOperationCompleted(object arg) {
            if ((this.UserTypeMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserTypeMaster_CRUDCompleted(this, new UserTypeMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DepartmentMaster_CRUD(int Department_ID, string Dept_Desc, int CompanyID, string LoggedInUserID, string Is_Deleted, string Action) {
            object[] results = this.Invoke("DepartmentMaster_CRUD", new object[] {
                        Department_ID,
                        Dept_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Is_Deleted,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentMaster_CRUDAsync(int Department_ID, string Dept_Desc, int CompanyID, string LoggedInUserID, string Is_Deleted, string Action) {
            this.DepartmentMaster_CRUDAsync(Department_ID, Dept_Desc, CompanyID, LoggedInUserID, Is_Deleted, Action, null);
        }
        
        /// <remarks/>
        public void DepartmentMaster_CRUDAsync(int Department_ID, string Dept_Desc, int CompanyID, string LoggedInUserID, string Is_Deleted, string Action, object userState) {
            if ((this.DepartmentMaster_CRUDOperationCompleted == null)) {
                this.DepartmentMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("DepartmentMaster_CRUD", new object[] {
                        Department_ID,
                        Dept_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Is_Deleted,
                        Action}, this.DepartmentMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnDepartmentMaster_CRUDOperationCompleted(object arg) {
            if ((this.DepartmentMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentMaster_CRUDCompleted(this, new DepartmentMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Zone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Zone() {
            object[] results = this.Invoke("Fetch_Zone", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_ZoneAsync() {
            this.Fetch_ZoneAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_ZoneAsync(object userState) {
            if ((this.Fetch_ZoneOperationCompleted == null)) {
                this.Fetch_ZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_ZoneOperationCompleted);
            }
            this.InvokeAsync("Fetch_Zone", new object[0], this.Fetch_ZoneOperationCompleted, userState);
        }
        
        private void OnFetch_ZoneOperationCompleted(object arg) {
            if ((this.Fetch_ZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_ZoneCompleted(this, new Fetch_ZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Location", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Location(int ZoneID) {
            object[] results = this.Invoke("Fetch_Location", new object[] {
                        ZoneID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_LocationAsync(int ZoneID) {
            this.Fetch_LocationAsync(ZoneID, null);
        }
        
        /// <remarks/>
        public void Fetch_LocationAsync(int ZoneID, object userState) {
            if ((this.Fetch_LocationOperationCompleted == null)) {
                this.Fetch_LocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_LocationOperationCompleted);
            }
            this.InvokeAsync("Fetch_Location", new object[] {
                        ZoneID}, this.Fetch_LocationOperationCompleted, userState);
        }
        
        private void OnFetch_LocationOperationCompleted(object arg) {
            if ((this.Fetch_LocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_LocationCompleted(this, new Fetch_LocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Sub_Location", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Sub_Location(int Loc_ID) {
            object[] results = this.Invoke("Fetch_Sub_Location", new object[] {
                        Loc_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Sub_LocationAsync(int Loc_ID) {
            this.Fetch_Sub_LocationAsync(Loc_ID, null);
        }
        
        /// <remarks/>
        public void Fetch_Sub_LocationAsync(int Loc_ID, object userState) {
            if ((this.Fetch_Sub_LocationOperationCompleted == null)) {
                this.Fetch_Sub_LocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Sub_LocationOperationCompleted);
            }
            this.InvokeAsync("Fetch_Sub_Location", new object[] {
                        Loc_ID}, this.Fetch_Sub_LocationOperationCompleted, userState);
        }
        
        private void OnFetch_Sub_LocationOperationCompleted(object arg) {
            if ((this.Fetch_Sub_LocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Sub_LocationCompleted(this, new Fetch_Sub_LocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Department", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Department(int CompanyID) {
            object[] results = this.Invoke("Fetch_Department", new object[] {
                        CompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_DepartmentAsync(int CompanyID) {
            this.Fetch_DepartmentAsync(CompanyID, null);
        }
        
        /// <remarks/>
        public void Fetch_DepartmentAsync(int CompanyID, object userState) {
            if ((this.Fetch_DepartmentOperationCompleted == null)) {
                this.Fetch_DepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_DepartmentOperationCompleted);
            }
            this.InvokeAsync("Fetch_Department", new object[] {
                        CompanyID}, this.Fetch_DepartmentOperationCompleted, userState);
        }
        
        private void OnFetch_DepartmentOperationCompleted(object arg) {
            if ((this.Fetch_DepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_DepartmentCompleted(this, new Fetch_DepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_User_Type", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_User_Type(int CompanyId) {
            object[] results = this.Invoke("Fetch_User_Type", new object[] {
                        CompanyId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_User_TypeAsync(int CompanyId) {
            this.Fetch_User_TypeAsync(CompanyId, null);
        }
        
        /// <remarks/>
        public void Fetch_User_TypeAsync(int CompanyId, object userState) {
            if ((this.Fetch_User_TypeOperationCompleted == null)) {
                this.Fetch_User_TypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_User_TypeOperationCompleted);
            }
            this.InvokeAsync("Fetch_User_Type", new object[] {
                        CompanyId}, this.Fetch_User_TypeOperationCompleted, userState);
        }
        
        private void OnFetch_User_TypeOperationCompleted(object arg) {
            if ((this.Fetch_User_TypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_User_TypeCompleted(this, new Fetch_User_TypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UserMaster_CRUD(
                    int User_ID, 
                    string User_Code, 
                    string F_name, 
                    string L_Name, 
                    string User_Mobile, 
                    string User_Email, 
                    string User_MobileAlter, 
                    string User_Landline, 
                    string User_Designation, 
                    int User_Type_ID, 
                    int Zone_ID, 
                    int Loc_ID, 
                    int SubLoc_Id, 
                    int Department_Id, 
                    string Login_Id, 
                    string Password, 
                    int Is_Approver, 
                    int Is_GobalApprover, 
                    string Approver_ID, 
                    string Profilephoto, 
                    int CompanyID, 
                    string LoggedInUserID, 
                    string Action) {
            object[] results = this.Invoke("UserMaster_CRUD", new object[] {
                        User_ID,
                        User_Code,
                        F_name,
                        L_Name,
                        User_Mobile,
                        User_Email,
                        User_MobileAlter,
                        User_Landline,
                        User_Designation,
                        User_Type_ID,
                        Zone_ID,
                        Loc_ID,
                        SubLoc_Id,
                        Department_Id,
                        Login_Id,
                        Password,
                        Is_Approver,
                        Is_GobalApprover,
                        Approver_ID,
                        Profilephoto,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UserMaster_CRUDAsync(
                    int User_ID, 
                    string User_Code, 
                    string F_name, 
                    string L_Name, 
                    string User_Mobile, 
                    string User_Email, 
                    string User_MobileAlter, 
                    string User_Landline, 
                    string User_Designation, 
                    int User_Type_ID, 
                    int Zone_ID, 
                    int Loc_ID, 
                    int SubLoc_Id, 
                    int Department_Id, 
                    string Login_Id, 
                    string Password, 
                    int Is_Approver, 
                    int Is_GobalApprover, 
                    string Approver_ID, 
                    string Profilephoto, 
                    int CompanyID, 
                    string LoggedInUserID, 
                    string Action) {
            this.UserMaster_CRUDAsync(User_ID, User_Code, F_name, L_Name, User_Mobile, User_Email, User_MobileAlter, User_Landline, User_Designation, User_Type_ID, Zone_ID, Loc_ID, SubLoc_Id, Department_Id, Login_Id, Password, Is_Approver, Is_GobalApprover, Approver_ID, Profilephoto, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void UserMaster_CRUDAsync(
                    int User_ID, 
                    string User_Code, 
                    string F_name, 
                    string L_Name, 
                    string User_Mobile, 
                    string User_Email, 
                    string User_MobileAlter, 
                    string User_Landline, 
                    string User_Designation, 
                    int User_Type_ID, 
                    int Zone_ID, 
                    int Loc_ID, 
                    int SubLoc_Id, 
                    int Department_Id, 
                    string Login_Id, 
                    string Password, 
                    int Is_Approver, 
                    int Is_GobalApprover, 
                    string Approver_ID, 
                    string Profilephoto, 
                    int CompanyID, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.UserMaster_CRUDOperationCompleted == null)) {
                this.UserMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("UserMaster_CRUD", new object[] {
                        User_ID,
                        User_Code,
                        F_name,
                        L_Name,
                        User_Mobile,
                        User_Email,
                        User_MobileAlter,
                        User_Landline,
                        User_Designation,
                        User_Type_ID,
                        Zone_ID,
                        Loc_ID,
                        SubLoc_Id,
                        Department_Id,
                        Login_Id,
                        Password,
                        Is_Approver,
                        Is_GobalApprover,
                        Approver_ID,
                        Profilephoto,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.UserMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnUserMaster_CRUDOperationCompleted(object arg) {
            if ((this.UserMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserMaster_CRUDCompleted(this, new UserMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoginUser(string UserId, string strPassword) {
            object[] results = this.Invoke("LoginUser", new object[] {
                        UserId,
                        strPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoginUserAsync(string UserId, string strPassword) {
            this.LoginUserAsync(UserId, strPassword, null);
        }
        
        /// <remarks/>
        public void LoginUserAsync(string UserId, string strPassword, object userState) {
            if ((this.LoginUserOperationCompleted == null)) {
                this.LoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserOperationCompleted);
            }
            this.InvokeAsync("LoginUser", new object[] {
                        UserId,
                        strPassword}, this.LoginUserOperationCompleted, userState);
        }
        
        private void OnLoginUserOperationCompleted(object arg) {
            if ((this.LoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PriorityMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PriorityMaster_CRUD(int Priority_ID, string Priority_Desc, int CompanyID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("PriorityMaster_CRUD", new object[] {
                        Priority_ID,
                        Priority_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PriorityMaster_CRUDAsync(int Priority_ID, string Priority_Desc, int CompanyID, string LoggedInUserID, string Action) {
            this.PriorityMaster_CRUDAsync(Priority_ID, Priority_Desc, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void PriorityMaster_CRUDAsync(int Priority_ID, string Priority_Desc, int CompanyID, string LoggedInUserID, string Action, object userState) {
            if ((this.PriorityMaster_CRUDOperationCompleted == null)) {
                this.PriorityMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPriorityMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("PriorityMaster_CRUD", new object[] {
                        Priority_ID,
                        Priority_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.PriorityMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnPriorityMaster_CRUDOperationCompleted(object arg) {
            if ((this.PriorityMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PriorityMaster_CRUDCompleted(this, new PriorityMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FrequencyMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FrequencyMaster_CRUD(int Frquency_Id, string Frquency_Desc, int CompanyID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("FrequencyMaster_CRUD", new object[] {
                        Frquency_Id,
                        Frquency_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FrequencyMaster_CRUDAsync(int Frquency_Id, string Frquency_Desc, int CompanyID, string LoggedInUserID, string Action) {
            this.FrequencyMaster_CRUDAsync(Frquency_Id, Frquency_Desc, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void FrequencyMaster_CRUDAsync(int Frquency_Id, string Frquency_Desc, int CompanyID, string LoggedInUserID, string Action, object userState) {
            if ((this.FrequencyMaster_CRUDOperationCompleted == null)) {
                this.FrequencyMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFrequencyMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("FrequencyMaster_CRUD", new object[] {
                        Frquency_Id,
                        Frquency_Desc,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.FrequencyMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnFrequencyMaster_CRUDOperationCompleted(object arg) {
            if ((this.FrequencyMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FrequencyMaster_CRUDCompleted(this, new FrequencyMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ZoneMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZoneMaster_CRUD(int ZoneID, int CompanyID, string ZoneCode, string ZoneDesc, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("ZoneMaster_CRUD", new object[] {
                        ZoneID,
                        CompanyID,
                        ZoneCode,
                        ZoneDesc,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZoneMaster_CRUDAsync(int ZoneID, int CompanyID, string ZoneCode, string ZoneDesc, string LoggedInUserID, string Action) {
            this.ZoneMaster_CRUDAsync(ZoneID, CompanyID, ZoneCode, ZoneDesc, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void ZoneMaster_CRUDAsync(int ZoneID, int CompanyID, string ZoneCode, string ZoneDesc, string LoggedInUserID, string Action, object userState) {
            if ((this.ZoneMaster_CRUDOperationCompleted == null)) {
                this.ZoneMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZoneMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("ZoneMaster_CRUD", new object[] {
                        ZoneID,
                        CompanyID,
                        ZoneCode,
                        ZoneDesc,
                        LoggedInUserID,
                        Action}, this.ZoneMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnZoneMaster_CRUDOperationCompleted(object arg) {
            if ((this.ZoneMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZoneMaster_CRUDCompleted(this, new ZoneMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LocationMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LocationMaster_CRUD(int LocID, string Zone, string LocCode, string LocDesc, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("LocationMaster_CRUD", new object[] {
                        LocID,
                        Zone,
                        LocCode,
                        LocDesc,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LocationMaster_CRUDAsync(int LocID, string Zone, string LocCode, string LocDesc, string LoggedInUserID, string Action) {
            this.LocationMaster_CRUDAsync(LocID, Zone, LocCode, LocDesc, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void LocationMaster_CRUDAsync(int LocID, string Zone, string LocCode, string LocDesc, string LoggedInUserID, string Action, object userState) {
            if ((this.LocationMaster_CRUDOperationCompleted == null)) {
                this.LocationMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocationMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("LocationMaster_CRUD", new object[] {
                        LocID,
                        Zone,
                        LocCode,
                        LocDesc,
                        LoggedInUserID,
                        Action}, this.LocationMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnLocationMaster_CRUDOperationCompleted(object arg) {
            if ((this.LocationMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LocationMaster_CRUDCompleted(this, new LocationMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubLocationMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SubLocationMaster_CRUD(int SubLocID, string LocName, string Zone, string SubLocCode, string SubLocDesc, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("SubLocationMaster_CRUD", new object[] {
                        SubLocID,
                        LocName,
                        Zone,
                        SubLocCode,
                        SubLocDesc,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SubLocationMaster_CRUDAsync(int SubLocID, string LocName, string Zone, string SubLocCode, string SubLocDesc, string LoggedInUserID, string Action) {
            this.SubLocationMaster_CRUDAsync(SubLocID, LocName, Zone, SubLocCode, SubLocDesc, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void SubLocationMaster_CRUDAsync(int SubLocID, string LocName, string Zone, string SubLocCode, string SubLocDesc, string LoggedInUserID, string Action, object userState) {
            if ((this.SubLocationMaster_CRUDOperationCompleted == null)) {
                this.SubLocationMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubLocationMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SubLocationMaster_CRUD", new object[] {
                        SubLocID,
                        LocName,
                        Zone,
                        SubLocCode,
                        SubLocDesc,
                        LoggedInUserID,
                        Action}, this.SubLocationMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSubLocationMaster_CRUDOperationCompleted(object arg) {
            if ((this.SubLocationMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubLocationMaster_CRUDCompleted(this, new SubLocationMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserGroupMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UserGroupMaster_CRUD(int Grp_Id, string Grp_Desc, string User_ID, int CompanyID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("UserGroupMaster_CRUD", new object[] {
                        Grp_Id,
                        Grp_Desc,
                        User_ID,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UserGroupMaster_CRUDAsync(int Grp_Id, string Grp_Desc, string User_ID, int CompanyID, string LoggedInUserID, string Action) {
            this.UserGroupMaster_CRUDAsync(Grp_Id, Grp_Desc, User_ID, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void UserGroupMaster_CRUDAsync(int Grp_Id, string Grp_Desc, string User_ID, int CompanyID, string LoggedInUserID, string Action, object userState) {
            if ((this.UserGroupMaster_CRUDOperationCompleted == null)) {
                this.UserGroupMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGroupMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("UserGroupMaster_CRUD", new object[] {
                        Grp_Id,
                        Grp_Desc,
                        User_ID,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.UserGroupMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnUserGroupMaster_CRUDOperationCompleted(object arg) {
            if ((this.UserGroupMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGroupMaster_CRUDCompleted(this, new UserGroupMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchUserGrp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchUserGrp(int GroupID, int CompanyID) {
            object[] results = this.Invoke("FetchUserGrp", new object[] {
                        GroupID,
                        CompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchUserGrpAsync(int GroupID, int CompanyID) {
            this.FetchUserGrpAsync(GroupID, CompanyID, null);
        }
        
        /// <remarks/>
        public void FetchUserGrpAsync(int GroupID, int CompanyID, object userState) {
            if ((this.FetchUserGrpOperationCompleted == null)) {
                this.FetchUserGrpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchUserGrpOperationCompleted);
            }
            this.InvokeAsync("FetchUserGrp", new object[] {
                        GroupID,
                        CompanyID}, this.FetchUserGrpOperationCompleted, userState);
        }
        
        private void OnFetchUserGrpOperationCompleted(object arg) {
            if ((this.FetchUserGrpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchUserGrpCompleted(this, new FetchUserGrpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CategorySubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CategorySubCategory(int CategoryID) {
            object[] results = this.Invoke("Fetch_CategorySubCategory", new object[] {
                        CategoryID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CategorySubCategoryAsync(int CategoryID) {
            this.Fetch_CategorySubCategoryAsync(CategoryID, null);
        }
        
        /// <remarks/>
        public void Fetch_CategorySubCategoryAsync(int CategoryID, object userState) {
            if ((this.Fetch_CategorySubCategoryOperationCompleted == null)) {
                this.Fetch_CategorySubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CategorySubCategoryOperationCompleted);
            }
            this.InvokeAsync("Fetch_CategorySubCategory", new object[] {
                        CategoryID}, this.Fetch_CategorySubCategoryOperationCompleted, userState);
        }
        
        private void OnFetch_CategorySubCategoryOperationCompleted(object arg) {
            if ((this.Fetch_CategorySubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CategorySubCategoryCompleted(this, new Fetch_CategorySubCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WorkflowMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet WorkflowMaster_CRUD(int WorkflowID, string WorkflowDesc, int ZoneID, int CategoryID, int SubCategoryID, string xmlWorkflow, int CompanyID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("WorkflowMaster_CRUD", new object[] {
                        WorkflowID,
                        WorkflowDesc,
                        ZoneID,
                        CategoryID,
                        SubCategoryID,
                        xmlWorkflow,
                        CompanyID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void WorkflowMaster_CRUDAsync(int WorkflowID, string WorkflowDesc, int ZoneID, int CategoryID, int SubCategoryID, string xmlWorkflow, int CompanyID, string LoggedInUserID, string Action) {
            this.WorkflowMaster_CRUDAsync(WorkflowID, WorkflowDesc, ZoneID, CategoryID, SubCategoryID, xmlWorkflow, CompanyID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void WorkflowMaster_CRUDAsync(int WorkflowID, string WorkflowDesc, int ZoneID, int CategoryID, int SubCategoryID, string xmlWorkflow, int CompanyID, string LoggedInUserID, string Action, object userState) {
            if ((this.WorkflowMaster_CRUDOperationCompleted == null)) {
                this.WorkflowMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("WorkflowMaster_CRUD", new object[] {
                        WorkflowID,
                        WorkflowDesc,
                        ZoneID,
                        CategoryID,
                        SubCategoryID,
                        xmlWorkflow,
                        CompanyID,
                        LoggedInUserID,
                        Action}, this.WorkflowMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnWorkflowMaster_CRUDOperationCompleted(object arg) {
            if ((this.WorkflowMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorkflowMaster_CRUDCompleted(this, new WorkflowMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_User_UserGroupList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_User_UserGroupList() {
            object[] results = this.Invoke("Fetch_User_UserGroupList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_User_UserGroupListAsync() {
            this.Fetch_User_UserGroupListAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_User_UserGroupListAsync(object userState) {
            if ((this.Fetch_User_UserGroupListOperationCompleted == null)) {
                this.Fetch_User_UserGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_User_UserGroupListOperationCompleted);
            }
            this.InvokeAsync("Fetch_User_UserGroupList", new object[0], this.Fetch_User_UserGroupListOperationCompleted, userState);
        }
        
        private void OnFetch_User_UserGroupListOperationCompleted(object arg) {
            if ((this.Fetch_User_UserGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_User_UserGroupListCompleted(this, new Fetch_User_UserGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CategoryMaster_CRUD(int CompanyID, int Category_ID, string Category_Desc, int DepartmentID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("CategoryMaster_CRUD", new object[] {
                        CompanyID,
                        Category_ID,
                        Category_Desc,
                        DepartmentID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int CompanyID, int Category_ID, string Category_Desc, int DepartmentID, string LoggedInUserID, string Action) {
            this.CategoryMaster_CRUDAsync(CompanyID, Category_ID, Category_Desc, DepartmentID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int CompanyID, int Category_ID, string Category_Desc, int DepartmentID, string LoggedInUserID, string Action, object userState) {
            if ((this.CategoryMaster_CRUDOperationCompleted == null)) {
                this.CategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CategoryMaster_CRUD", new object[] {
                        CompanyID,
                        Category_ID,
                        Category_Desc,
                        DepartmentID,
                        LoggedInUserID,
                        Action}, this.CategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.CategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CategoryMaster_CRUDCompleted(this, new CategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubCategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SubCategoryMaster_CRUD(int CompanyID, int SubcategoryID, string SubCategoryDesc, int CategoryID, int Approval_Required, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("SubCategoryMaster_CRUD", new object[] {
                        CompanyID,
                        SubcategoryID,
                        SubCategoryDesc,
                        CategoryID,
                        Approval_Required,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int CompanyID, int SubcategoryID, string SubCategoryDesc, int CategoryID, int Approval_Required, string LoggedInUserID, string Action) {
            this.SubCategoryMaster_CRUDAsync(CompanyID, SubcategoryID, SubCategoryDesc, CategoryID, Approval_Required, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int CompanyID, int SubcategoryID, string SubCategoryDesc, int CategoryID, int Approval_Required, string LoggedInUserID, string Action, object userState) {
            if ((this.SubCategoryMaster_CRUDOperationCompleted == null)) {
                this.SubCategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SubCategoryMaster_CRUD", new object[] {
                        CompanyID,
                        SubcategoryID,
                        SubCategoryDesc,
                        CategoryID,
                        Approval_Required,
                        LoggedInUserID,
                        Action}, this.SubCategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSubCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.SubCategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubCategoryMaster_CRUDCompleted(this, new SubCategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BindLocationDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BindLocationDetails(int ZoneID, int LocationID) {
            object[] results = this.Invoke("BindLocationDetails", new object[] {
                        ZoneID,
                        LocationID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BindLocationDetailsAsync(int ZoneID, int LocationID) {
            this.BindLocationDetailsAsync(ZoneID, LocationID, null);
        }
        
        /// <remarks/>
        public void BindLocationDetailsAsync(int ZoneID, int LocationID, object userState) {
            if ((this.BindLocationDetailsOperationCompleted == null)) {
                this.BindLocationDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindLocationDetailsOperationCompleted);
            }
            this.InvokeAsync("BindLocationDetails", new object[] {
                        ZoneID,
                        LocationID}, this.BindLocationDetailsOperationCompleted, userState);
        }
        
        private void OnBindLocationDetailsOperationCompleted(object arg) {
            if ((this.BindLocationDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindLocationDetailsCompleted(this, new BindLocationDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_LocationTree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_LocationTree(int CompanyID) {
            object[] results = this.Invoke("Fetch_LocationTree", new object[] {
                        CompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_LocationTreeAsync(int CompanyID) {
            this.Fetch_LocationTreeAsync(CompanyID, null);
        }
        
        /// <remarks/>
        public void Fetch_LocationTreeAsync(int CompanyID, object userState) {
            if ((this.Fetch_LocationTreeOperationCompleted == null)) {
                this.Fetch_LocationTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_LocationTreeOperationCompleted);
            }
            this.InvokeAsync("Fetch_LocationTree", new object[] {
                        CompanyID}, this.Fetch_LocationTreeOperationCompleted, userState);
        }
        
        private void OnFetch_LocationTreeOperationCompleted(object arg) {
            if ((this.Fetch_LocationTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_LocationTreeCompleted(this, new Fetch_LocationTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Ticket_Workflow", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Ticket_Workflow(int CompanyID, int CategoryID, int SubCategoryID, string TicketPrefix, string LoggedInUserID) {
            object[] results = this.Invoke("Fetch_Ticket_Workflow", new object[] {
                        CompanyID,
                        CategoryID,
                        SubCategoryID,
                        TicketPrefix,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Ticket_WorkflowAsync(int CompanyID, int CategoryID, int SubCategoryID, string TicketPrefix, string LoggedInUserID) {
            this.Fetch_Ticket_WorkflowAsync(CompanyID, CategoryID, SubCategoryID, TicketPrefix, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Fetch_Ticket_WorkflowAsync(int CompanyID, int CategoryID, int SubCategoryID, string TicketPrefix, string LoggedInUserID, object userState) {
            if ((this.Fetch_Ticket_WorkflowOperationCompleted == null)) {
                this.Fetch_Ticket_WorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Ticket_WorkflowOperationCompleted);
            }
            this.InvokeAsync("Fetch_Ticket_Workflow", new object[] {
                        CompanyID,
                        CategoryID,
                        SubCategoryID,
                        TicketPrefix,
                        LoggedInUserID}, this.Fetch_Ticket_WorkflowOperationCompleted, userState);
        }
        
        private void OnFetch_Ticket_WorkflowOperationCompleted(object arg) {
            if ((this.Fetch_Ticket_WorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Ticket_WorkflowCompleted(this, new Fetch_Ticket_WorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Ticket_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_Ticket_Details(string TicketCode, int CompanyID, int LocationID, int CategoryID, int SubCategoryID, string TicketMessage, string list_Images, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("Insert_Ticket_Details", new object[] {
                        TicketCode,
                        CompanyID,
                        LocationID,
                        CategoryID,
                        SubCategoryID,
                        TicketMessage,
                        list_Images,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Ticket_DetailsAsync(string TicketCode, int CompanyID, int LocationID, int CategoryID, int SubCategoryID, string TicketMessage, string list_Images, string LoggedInUserID, string strAction) {
            this.Insert_Ticket_DetailsAsync(TicketCode, CompanyID, LocationID, CategoryID, SubCategoryID, TicketMessage, list_Images, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void Insert_Ticket_DetailsAsync(string TicketCode, int CompanyID, int LocationID, int CategoryID, int SubCategoryID, string TicketMessage, string list_Images, string LoggedInUserID, string strAction, object userState) {
            if ((this.Insert_Ticket_DetailsOperationCompleted == null)) {
                this.Insert_Ticket_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Ticket_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Ticket_Details", new object[] {
                        TicketCode,
                        CompanyID,
                        LocationID,
                        CategoryID,
                        SubCategoryID,
                        TicketMessage,
                        list_Images,
                        LoggedInUserID,
                        strAction}, this.Insert_Ticket_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Ticket_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Ticket_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Ticket_DetailsCompleted(this, new Insert_Ticket_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Employee_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Employee_CRUD(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType) {
            object[] results = this.Invoke("Employee_CRUD", new object[] {
                        firstName,
                        lastName,
                        email,
                        phone,
                        EmpID,
                        LoggedInUserID,
                        role,
                        Username,
                        Password,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Employee_CRUDAsync(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType) {
            this.Employee_CRUDAsync(firstName, lastName, email, phone, EmpID, LoggedInUserID, role, Username, Password, actionType, null);
        }
        
        /// <remarks/>
        public void Employee_CRUDAsync(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType, object userState) {
            if ((this.Employee_CRUDOperationCompleted == null)) {
                this.Employee_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployee_CRUDOperationCompleted);
            }
            this.InvokeAsync("Employee_CRUD", new object[] {
                        firstName,
                        lastName,
                        email,
                        phone,
                        EmpID,
                        LoggedInUserID,
                        role,
                        Username,
                        Password,
                        actionType}, this.Employee_CRUDOperationCompleted, userState);
        }
        
        private void OnEmployee_CRUDOperationCompleted(object arg) {
            if ((this.Employee_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Employee_CRUDCompleted(this, new Employee_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChangePassword(string UserName, string strPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        UserName,
                        strPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserName, string strPassword) {
            this.ChangePasswordAsync(UserName, strPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserName, string strPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        UserName,
                        strPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fetchStore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fetchStore() {
            object[] results = this.Invoke("fetchStore", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fetchStoreAsync() {
            this.fetchStoreAsync(null);
        }
        
        /// <remarks/>
        public void fetchStoreAsync(object userState) {
            if ((this.fetchStoreOperationCompleted == null)) {
                this.fetchStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchStoreOperationCompleted);
            }
            this.InvokeAsync("fetchStore", new object[0], this.fetchStoreOperationCompleted, userState);
        }
        
        private void OnfetchStoreOperationCompleted(object arg) {
            if ((this.fetchStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchStoreCompleted(this, new fetchStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Retailer_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Retailer_CRUD(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, int CompanyID, string LoggedInUserID, string actionType) {
            object[] results = this.Invoke("Retailer_CRUD", new object[] {
                        storeName,
                        firstName,
                        lastName,
                        email,
                        phone,
                        RetailerID,
                        CompanyID,
                        LoggedInUserID,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Retailer_CRUDAsync(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, int CompanyID, string LoggedInUserID, string actionType) {
            this.Retailer_CRUDAsync(storeName, firstName, lastName, email, phone, RetailerID, CompanyID, LoggedInUserID, actionType, null);
        }
        
        /// <remarks/>
        public void Retailer_CRUDAsync(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, int CompanyID, string LoggedInUserID, string actionType, object userState) {
            if ((this.Retailer_CRUDOperationCompleted == null)) {
                this.Retailer_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetailer_CRUDOperationCompleted);
            }
            this.InvokeAsync("Retailer_CRUD", new object[] {
                        storeName,
                        firstName,
                        lastName,
                        email,
                        phone,
                        RetailerID,
                        CompanyID,
                        LoggedInUserID,
                        actionType}, this.Retailer_CRUDOperationCompleted, userState);
        }
        
        private void OnRetailer_CRUDOperationCompleted(object arg) {
            if ((this.Retailer_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Retailer_CRUDCompleted(this, new Retailer_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_Insert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_Insert(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4) {
            object[] results = this.Invoke("Event_Insert", new object[] {
                        eventName,
                        locationName,
                        startDateTime,
                        endDateTime,
                        CustomerQuestion,
                        CustQuesType,
                        QuesFor,
                        EventID,
                        EventMode,
                        LoggedInUserID,
                        option1,
                        option2,
                        option3,
                        option4});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_InsertAsync(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4) {
            this.Event_InsertAsync(eventName, locationName, startDateTime, endDateTime, CustomerQuestion, CustQuesType, QuesFor, EventID, EventMode, LoggedInUserID, option1, option2, option3, option4, null);
        }
        
        /// <remarks/>
        public void Event_InsertAsync(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4, object userState) {
            if ((this.Event_InsertOperationCompleted == null)) {
                this.Event_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_InsertOperationCompleted);
            }
            this.InvokeAsync("Event_Insert", new object[] {
                        eventName,
                        locationName,
                        startDateTime,
                        endDateTime,
                        CustomerQuestion,
                        CustQuesType,
                        QuesFor,
                        EventID,
                        EventMode,
                        LoggedInUserID,
                        option1,
                        option2,
                        option3,
                        option4}, this.Event_InsertOperationCompleted, userState);
        }
        
        private void OnEvent_InsertOperationCompleted(object arg) {
            if ((this.Event_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_InsertCompleted(this, new Event_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EventDetails_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EventDetails_CRUD(int EventID, string actionType) {
            object[] results = this.Invoke("EventDetails_CRUD", new object[] {
                        EventID,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EventDetails_CRUDAsync(int EventID, string actionType) {
            this.EventDetails_CRUDAsync(EventID, actionType, null);
        }
        
        /// <remarks/>
        public void EventDetails_CRUDAsync(int EventID, string actionType, object userState) {
            if ((this.EventDetails_CRUDOperationCompleted == null)) {
                this.EventDetails_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEventDetails_CRUDOperationCompleted);
            }
            this.InvokeAsync("EventDetails_CRUD", new object[] {
                        EventID,
                        actionType}, this.EventDetails_CRUDOperationCompleted, userState);
        }
        
        private void OnEventDetails_CRUDOperationCompleted(object arg) {
            if ((this.EventDetails_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EventDetails_CRUDCompleted(this, new EventDetails_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/bindEventDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet bindEventDetails(int EventID) {
            object[] results = this.Invoke("bindEventDetails", new object[] {
                        EventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void bindEventDetailsAsync(int EventID) {
            this.bindEventDetailsAsync(EventID, null);
        }
        
        /// <remarks/>
        public void bindEventDetailsAsync(int EventID, object userState) {
            if ((this.bindEventDetailsOperationCompleted == null)) {
                this.bindEventDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbindEventDetailsOperationCompleted);
            }
            this.InvokeAsync("bindEventDetails", new object[] {
                        EventID}, this.bindEventDetailsOperationCompleted, userState);
        }
        
        private void OnbindEventDetailsOperationCompleted(object arg) {
            if ((this.bindEventDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bindEventDetailsCompleted(this, new bindEventDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_CustomerDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_CustomerDetails() {
            object[] results = this.Invoke("Get_CustomerDetails", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_CustomerDetailsAsync() {
            this.Get_CustomerDetailsAsync(null);
        }
        
        /// <remarks/>
        public void Get_CustomerDetailsAsync(object userState) {
            if ((this.Get_CustomerDetailsOperationCompleted == null)) {
                this.Get_CustomerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_CustomerDetailsOperationCompleted);
            }
            this.InvokeAsync("Get_CustomerDetails", new object[0], this.Get_CustomerDetailsOperationCompleted, userState);
        }
        
        private void OnGet_CustomerDetailsOperationCompleted(object arg) {
            if ((this.Get_CustomerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_CustomerDetailsCompleted(this, new Get_CustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_EventQuestions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_EventQuestions(int EventID) {
            object[] results = this.Invoke("Get_EventQuestions", new object[] {
                        EventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_EventQuestionsAsync(int EventID) {
            this.Get_EventQuestionsAsync(EventID, null);
        }
        
        /// <remarks/>
        public void Get_EventQuestionsAsync(int EventID, object userState) {
            if ((this.Get_EventQuestionsOperationCompleted == null)) {
                this.Get_EventQuestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_EventQuestionsOperationCompleted);
            }
            this.InvokeAsync("Get_EventQuestions", new object[] {
                        EventID}, this.Get_EventQuestionsOperationCompleted, userState);
        }
        
        private void OnGet_EventQuestionsOperationCompleted(object arg) {
            if ((this.Get_EventQuestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_EventQuestionsCompleted(this, new Get_EventQuestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_QuestionIU", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_QuestionIU(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType) {
            object[] results = this.Invoke("Event_QuestionIU", new object[] {
                        EventID,
                        CustomerQuestion,
                        AnswerType,
                        opt1,
                        opt2,
                        opt3,
                        opt4,
                        LoggedInUserID,
                        QuestionID,
                        ActionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_QuestionIUAsync(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType) {
            this.Event_QuestionIUAsync(EventID, CustomerQuestion, AnswerType, opt1, opt2, opt3, opt4, LoggedInUserID, QuestionID, ActionType, null);
        }
        
        /// <remarks/>
        public void Event_QuestionIUAsync(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType, object userState) {
            if ((this.Event_QuestionIUOperationCompleted == null)) {
                this.Event_QuestionIUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_QuestionIUOperationCompleted);
            }
            this.InvokeAsync("Event_QuestionIU", new object[] {
                        EventID,
                        CustomerQuestion,
                        AnswerType,
                        opt1,
                        opt2,
                        opt3,
                        opt4,
                        LoggedInUserID,
                        QuestionID,
                        ActionType}, this.Event_QuestionIUOperationCompleted, userState);
        }
        
        private void OnEvent_QuestionIUOperationCompleted(object arg) {
            if ((this.Event_QuestionIUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_QuestionIUCompleted(this, new Event_QuestionIUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MIS_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MIS_Report(string EventID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MIS_Report", new object[] {
                        EventID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MIS_ReportAsync(string EventID, string From_Date, string To_Date) {
            this.Fetch_MIS_ReportAsync(EventID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MIS_ReportAsync(string EventID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MIS_ReportOperationCompleted == null)) {
                this.Fetch_MIS_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MIS_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_MIS_Report", new object[] {
                        EventID,
                        From_Date,
                        To_Date}, this.Fetch_MIS_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_MIS_ReportOperationCompleted(object arg) {
            if ((this.Fetch_MIS_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MIS_ReportCompleted(this, new Fetch_MIS_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_Update(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType) {
            object[] results = this.Invoke("Event_Update", new object[] {
                        EventID,
                        Location,
                        QuesFor,
                        EventMode,
                        startDate,
                        endDate,
                        LoggedInUserID,
                        ActionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_UpdateAsync(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType) {
            this.Event_UpdateAsync(EventID, Location, QuesFor, EventMode, startDate, endDate, LoggedInUserID, ActionType, null);
        }
        
        /// <remarks/>
        public void Event_UpdateAsync(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType, object userState) {
            if ((this.Event_UpdateOperationCompleted == null)) {
                this.Event_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_UpdateOperationCompleted);
            }
            this.InvokeAsync("Event_Update", new object[] {
                        EventID,
                        Location,
                        QuesFor,
                        EventMode,
                        startDate,
                        endDate,
                        LoggedInUserID,
                        ActionType}, this.Event_UpdateOperationCompleted, userState);
        }
        
        private void OnEvent_UpdateOperationCompleted(object arg) {
            if ((this.Event_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_UpdateCompleted(this, new Event_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEventList() {
            object[] results = this.Invoke("GetEventList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventListAsync() {
            this.GetEventListAsync(null);
        }
        
        /// <remarks/>
        public void GetEventListAsync(object userState) {
            if ((this.GetEventListOperationCompleted == null)) {
                this.GetEventListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventListOperationCompleted);
            }
            this.InvokeAsync("GetEventList", new object[0], this.GetEventListOperationCompleted, userState);
        }
        
        private void OnGetEventListOperationCompleted(object arg) {
            if ((this.GetEventListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventListCompleted(this, new GetEventListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MIS_Report_Excel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MIS_Report_Excel(string EventID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MIS_Report_Excel", new object[] {
                        EventID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MIS_Report_ExcelAsync(string EventID, string From_Date, string To_Date) {
            this.Fetch_MIS_Report_ExcelAsync(EventID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MIS_Report_ExcelAsync(string EventID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MIS_Report_ExcelOperationCompleted == null)) {
                this.Fetch_MIS_Report_ExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MIS_Report_ExcelOperationCompleted);
            }
            this.InvokeAsync("Fetch_MIS_Report_Excel", new object[] {
                        EventID,
                        From_Date,
                        To_Date}, this.Fetch_MIS_Report_ExcelOperationCompleted, userState);
        }
        
        private void OnFetch_MIS_Report_ExcelOperationCompleted(object arg) {
            if ((this.Fetch_MIS_Report_ExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MIS_Report_ExcelCompleted(this, new Fetch_MIS_Report_ExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportRetailer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ImportRetailer(int CompanyID) {
            object[] results = this.Invoke("ImportRetailer", new object[] {
                        CompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ImportRetailerAsync(int CompanyID) {
            this.ImportRetailerAsync(CompanyID, null);
        }
        
        /// <remarks/>
        public void ImportRetailerAsync(int CompanyID, object userState) {
            if ((this.ImportRetailerOperationCompleted == null)) {
                this.ImportRetailerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportRetailerOperationCompleted);
            }
            this.InvokeAsync("ImportRetailer", new object[] {
                        CompanyID}, this.ImportRetailerOperationCompleted, userState);
        }
        
        private void OnImportRetailerOperationCompleted(object arg) {
            if ((this.ImportRetailerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportRetailerCompleted(this, new ImportRetailerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddChecklistMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AddChecklistMaster_CRUD(
                    int ChecklistID, 
                    string ChecklistName, 
                    int DeptID, 
                    bool Chkapproval, 
                    bool ChkExpry, 
                    bool ChkSchedule, 
                    int ExpirytimeID, 
                    System.DateTime dtSchedule_Date, 
                    string StartTime, 
                    string EndTime, 
                    int CustFrequency, 
                    int Frquency_Id, 
                    int ZoneID, 
                    int LocationID, 
                    int SubLocationID, 
                    string strXmlChecklistPoint, 
                    string LoggedInUserID, 
                    string Action) {
            object[] results = this.Invoke("AddChecklistMaster_CRUD", new object[] {
                        ChecklistID,
                        ChecklistName,
                        DeptID,
                        Chkapproval,
                        ChkExpry,
                        ChkSchedule,
                        ExpirytimeID,
                        dtSchedule_Date,
                        StartTime,
                        EndTime,
                        CustFrequency,
                        Frquency_Id,
                        ZoneID,
                        LocationID,
                        SubLocationID,
                        strXmlChecklistPoint,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddChecklistMaster_CRUDAsync(
                    int ChecklistID, 
                    string ChecklistName, 
                    int DeptID, 
                    bool Chkapproval, 
                    bool ChkExpry, 
                    bool ChkSchedule, 
                    int ExpirytimeID, 
                    System.DateTime dtSchedule_Date, 
                    string StartTime, 
                    string EndTime, 
                    int CustFrequency, 
                    int Frquency_Id, 
                    int ZoneID, 
                    int LocationID, 
                    int SubLocationID, 
                    string strXmlChecklistPoint, 
                    string LoggedInUserID, 
                    string Action) {
            this.AddChecklistMaster_CRUDAsync(ChecklistID, ChecklistName, DeptID, Chkapproval, ChkExpry, ChkSchedule, ExpirytimeID, dtSchedule_Date, StartTime, EndTime, CustFrequency, Frquency_Id, ZoneID, LocationID, SubLocationID, strXmlChecklistPoint, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void AddChecklistMaster_CRUDAsync(
                    int ChecklistID, 
                    string ChecklistName, 
                    int DeptID, 
                    bool Chkapproval, 
                    bool ChkExpry, 
                    bool ChkSchedule, 
                    int ExpirytimeID, 
                    System.DateTime dtSchedule_Date, 
                    string StartTime, 
                    string EndTime, 
                    int CustFrequency, 
                    int Frquency_Id, 
                    int ZoneID, 
                    int LocationID, 
                    int SubLocationID, 
                    string strXmlChecklistPoint, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.AddChecklistMaster_CRUDOperationCompleted == null)) {
                this.AddChecklistMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddChecklistMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("AddChecklistMaster_CRUD", new object[] {
                        ChecklistID,
                        ChecklistName,
                        DeptID,
                        Chkapproval,
                        ChkExpry,
                        ChkSchedule,
                        ExpirytimeID,
                        dtSchedule_Date,
                        StartTime,
                        EndTime,
                        CustFrequency,
                        Frquency_Id,
                        ZoneID,
                        LocationID,
                        SubLocationID,
                        strXmlChecklistPoint,
                        LoggedInUserID,
                        Action}, this.AddChecklistMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnAddChecklistMaster_CRUDOperationCompleted(object arg) {
            if ((this.AddChecklistMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddChecklistMaster_CRUDCompleted(this, new AddChecklistMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChecklistPoint_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChecklistPoint_CRUD(int ChecklistID, int ChecklistPointID, string strChecklistPointDesc, string strChecklstAnstype, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("ChecklistPoint_CRUD", new object[] {
                        ChecklistID,
                        ChecklistPointID,
                        strChecklistPointDesc,
                        strChecklstAnstype,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChecklistPoint_CRUDAsync(int ChecklistID, int ChecklistPointID, string strChecklistPointDesc, string strChecklstAnstype, string LoggedInUserID, string Action) {
            this.ChecklistPoint_CRUDAsync(ChecklistID, ChecklistPointID, strChecklistPointDesc, strChecklstAnstype, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void ChecklistPoint_CRUDAsync(int ChecklistID, int ChecklistPointID, string strChecklistPointDesc, string strChecklstAnstype, string LoggedInUserID, string Action, object userState) {
            if ((this.ChecklistPoint_CRUDOperationCompleted == null)) {
                this.ChecklistPoint_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChecklistPoint_CRUDOperationCompleted);
            }
            this.InvokeAsync("ChecklistPoint_CRUD", new object[] {
                        ChecklistID,
                        ChecklistPointID,
                        strChecklistPointDesc,
                        strChecklstAnstype,
                        LoggedInUserID,
                        Action}, this.ChecklistPoint_CRUDOperationCompleted, userState);
        }
        
        private void OnChecklistPoint_CRUDOperationCompleted(object arg) {
            if ((this.ChecklistPoint_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChecklistPoint_CRUDCompleted(this, new ChecklistPoint_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChecklistRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChecklistRequest(string ScheduleDate, int ZoneID, int LocationID, int SubLocationID, int DepartmentID, int ChecklistID, string StartTime, string TicketNumber, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("ChecklistRequest", new object[] {
                        ScheduleDate,
                        ZoneID,
                        LocationID,
                        SubLocationID,
                        DepartmentID,
                        ChecklistID,
                        StartTime,
                        TicketNumber,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChecklistRequestAsync(string ScheduleDate, int ZoneID, int LocationID, int SubLocationID, int DepartmentID, int ChecklistID, string StartTime, string TicketNumber, string LoggedInUserID, string strAction) {
            this.ChecklistRequestAsync(ScheduleDate, ZoneID, LocationID, SubLocationID, DepartmentID, ChecklistID, StartTime, TicketNumber, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void ChecklistRequestAsync(string ScheduleDate, int ZoneID, int LocationID, int SubLocationID, int DepartmentID, int ChecklistID, string StartTime, string TicketNumber, string LoggedInUserID, string strAction, object userState) {
            if ((this.ChecklistRequestOperationCompleted == null)) {
                this.ChecklistRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChecklistRequestOperationCompleted);
            }
            this.InvokeAsync("ChecklistRequest", new object[] {
                        ScheduleDate,
                        ZoneID,
                        LocationID,
                        SubLocationID,
                        DepartmentID,
                        ChecklistID,
                        StartTime,
                        TicketNumber,
                        LoggedInUserID,
                        strAction}, this.ChecklistRequestOperationCompleted, userState);
        }
        
        private void OnChecklistRequestOperationCompleted(object arg) {
            if ((this.ChecklistRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChecklistRequestCompleted(this, new ChecklistRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_ChecklistPoints", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_ChecklistPoints(string TicketNumber, string strXmlChecklist, string list_Images, string LoggedInUserID) {
            object[] results = this.Invoke("Update_ChecklistPoints", new object[] {
                        TicketNumber,
                        strXmlChecklist,
                        list_Images,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_ChecklistPointsAsync(string TicketNumber, string strXmlChecklist, string list_Images, string LoggedInUserID) {
            this.Update_ChecklistPointsAsync(TicketNumber, strXmlChecklist, list_Images, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Update_ChecklistPointsAsync(string TicketNumber, string strXmlChecklist, string list_Images, string LoggedInUserID, object userState) {
            if ((this.Update_ChecklistPointsOperationCompleted == null)) {
                this.Update_ChecklistPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_ChecklistPointsOperationCompleted);
            }
            this.InvokeAsync("Update_ChecklistPoints", new object[] {
                        TicketNumber,
                        strXmlChecklist,
                        list_Images,
                        LoggedInUserID}, this.Update_ChecklistPointsOperationCompleted, userState);
        }
        
        private void OnUpdate_ChecklistPointsOperationCompleted(object arg) {
            if ((this.Update_ChecklistPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_ChecklistPointsCompleted(this, new Update_ChecklistPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Close_Ticket_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Close_Ticket_Details(string TicketID, string CloseTicketDesc, string LoggedInUserID, string list_Images) {
            object[] results = this.Invoke("Close_Ticket_Details", new object[] {
                        TicketID,
                        CloseTicketDesc,
                        LoggedInUserID,
                        list_Images});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Close_Ticket_DetailsAsync(string TicketID, string CloseTicketDesc, string LoggedInUserID, string list_Images) {
            this.Close_Ticket_DetailsAsync(TicketID, CloseTicketDesc, LoggedInUserID, list_Images, null);
        }
        
        /// <remarks/>
        public void Close_Ticket_DetailsAsync(string TicketID, string CloseTicketDesc, string LoggedInUserID, string list_Images, object userState) {
            if ((this.Close_Ticket_DetailsOperationCompleted == null)) {
                this.Close_Ticket_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClose_Ticket_DetailsOperationCompleted);
            }
            this.InvokeAsync("Close_Ticket_Details", new object[] {
                        TicketID,
                        CloseTicketDesc,
                        LoggedInUserID,
                        list_Images}, this.Close_Ticket_DetailsOperationCompleted, userState);
        }
        
        private void OnClose_Ticket_DetailsOperationCompleted(object arg) {
            if ((this.Close_Ticket_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Close_Ticket_DetailsCompleted(this, new Close_Ticket_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Location_PopulateRootLevel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Location_PopulateRootLevel(int CompanyID) {
            object[] results = this.Invoke("Location_PopulateRootLevel", new object[] {
                        CompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Location_PopulateRootLevelAsync(int CompanyID) {
            this.Location_PopulateRootLevelAsync(CompanyID, null);
        }
        
        /// <remarks/>
        public void Location_PopulateRootLevelAsync(int CompanyID, object userState) {
            if ((this.Location_PopulateRootLevelOperationCompleted == null)) {
                this.Location_PopulateRootLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocation_PopulateRootLevelOperationCompleted);
            }
            this.InvokeAsync("Location_PopulateRootLevel", new object[] {
                        CompanyID}, this.Location_PopulateRootLevelOperationCompleted, userState);
        }
        
        private void OnLocation_PopulateRootLevelOperationCompleted(object arg) {
            if ((this.Location_PopulateRootLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Location_PopulateRootLevelCompleted(this, new Location_PopulateRootLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Location_PopulateSubLevel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Location_PopulateSubLevel(int ParentID) {
            object[] results = this.Invoke("Location_PopulateSubLevel", new object[] {
                        ParentID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Location_PopulateSubLevelAsync(int ParentID) {
            this.Location_PopulateSubLevelAsync(ParentID, null);
        }
        
        /// <remarks/>
        public void Location_PopulateSubLevelAsync(int ParentID, object userState) {
            if ((this.Location_PopulateSubLevelOperationCompleted == null)) {
                this.Location_PopulateSubLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocation_PopulateSubLevelOperationCompleted);
            }
            this.InvokeAsync("Location_PopulateSubLevel", new object[] {
                        ParentID}, this.Location_PopulateSubLevelOperationCompleted, userState);
        }
        
        private void OnLocation_PopulateSubLevelOperationCompleted(object arg) {
            if ((this.Location_PopulateSubLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Location_PopulateSubLevelCompleted(this, new Location_PopulateSubLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add_Update_Location_Node", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Add_Update_Location_Node(int ParentID, string Location_Node, int CompanyID, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("Add_Update_Location_Node", new object[] {
                        ParentID,
                        Location_Node,
                        CompanyID,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Add_Update_Location_NodeAsync(int ParentID, string Location_Node, int CompanyID, string LoggedInUserID, string strAction) {
            this.Add_Update_Location_NodeAsync(ParentID, Location_Node, CompanyID, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void Add_Update_Location_NodeAsync(int ParentID, string Location_Node, int CompanyID, string LoggedInUserID, string strAction, object userState) {
            if ((this.Add_Update_Location_NodeOperationCompleted == null)) {
                this.Add_Update_Location_NodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdd_Update_Location_NodeOperationCompleted);
            }
            this.InvokeAsync("Add_Update_Location_Node", new object[] {
                        ParentID,
                        Location_Node,
                        CompanyID,
                        LoggedInUserID,
                        strAction}, this.Add_Update_Location_NodeOperationCompleted, userState);
        }
        
        private void OnAdd_Update_Location_NodeOperationCompleted(object arg) {
            if ((this.Add_Update_Location_NodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Add_Update_Location_NodeCompleted(this, new Add_Update_Location_NodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchMenu", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchMenu(int parentMenuId, string LoggedInUserID) {
            object[] results = this.Invoke("FetchMenu", new object[] {
                        parentMenuId,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchMenuAsync(int parentMenuId, string LoggedInUserID) {
            this.FetchMenuAsync(parentMenuId, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void FetchMenuAsync(int parentMenuId, string LoggedInUserID, object userState) {
            if ((this.FetchMenuOperationCompleted == null)) {
                this.FetchMenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchMenuOperationCompleted);
            }
            this.InvokeAsync("FetchMenu", new object[] {
                        parentMenuId,
                        LoggedInUserID}, this.FetchMenuOperationCompleted, userState);
        }
        
        private void OnFetchMenuOperationCompleted(object arg) {
            if ((this.FetchMenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchMenuCompleted(this, new FetchMenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RoleMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RoleMaster_CRUD(int RoleID, string Role, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("RoleMaster_CRUD", new object[] {
                        RoleID,
                        Role,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RoleMaster_CRUDAsync(int RoleID, string Role, string LoggedInUserID, string strAction) {
            this.RoleMaster_CRUDAsync(RoleID, Role, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void RoleMaster_CRUDAsync(int RoleID, string Role, string LoggedInUserID, string strAction, object userState) {
            if ((this.RoleMaster_CRUDOperationCompleted == null)) {
                this.RoleMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("RoleMaster_CRUD", new object[] {
                        RoleID,
                        Role,
                        LoggedInUserID,
                        strAction}, this.RoleMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnRoleMaster_CRUDOperationCompleted(object arg) {
            if ((this.RoleMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleMaster_CRUDCompleted(this, new RoleMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Assigned_Role", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Assigned_Role(int RoleID) {
            object[] results = this.Invoke("Fetch_Assigned_Role", new object[] {
                        RoleID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Assigned_RoleAsync(int RoleID) {
            this.Fetch_Assigned_RoleAsync(RoleID, null);
        }
        
        /// <remarks/>
        public void Fetch_Assigned_RoleAsync(int RoleID, object userState) {
            if ((this.Fetch_Assigned_RoleOperationCompleted == null)) {
                this.Fetch_Assigned_RoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Assigned_RoleOperationCompleted);
            }
            this.InvokeAsync("Fetch_Assigned_Role", new object[] {
                        RoleID}, this.Fetch_Assigned_RoleOperationCompleted, userState);
        }
        
        private void OnFetch_Assigned_RoleOperationCompleted(object arg) {
            if ((this.Fetch_Assigned_RoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Assigned_RoleCompleted(this, new Fetch_Assigned_RoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Role_Menu", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Role_Menu() {
            object[] results = this.Invoke("Fetch_Role_Menu", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Role_MenuAsync() {
            this.Fetch_Role_MenuAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_Role_MenuAsync(object userState) {
            if ((this.Fetch_Role_MenuOperationCompleted == null)) {
                this.Fetch_Role_MenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Role_MenuOperationCompleted);
            }
            this.InvokeAsync("Fetch_Role_Menu", new object[0], this.Fetch_Role_MenuOperationCompleted, userState);
        }
        
        private void OnFetch_Role_MenuOperationCompleted(object arg) {
            if ((this.Fetch_Role_MenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Role_MenuCompleted(this, new Fetch_Role_MenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FETCH_Saved_Role_MENU_Rights", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FETCH_Saved_Role_MENU_Rights(int RoleID, int ParentMenuId) {
            object[] results = this.Invoke("FETCH_Saved_Role_MENU_Rights", new object[] {
                        RoleID,
                        ParentMenuId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FETCH_Saved_Role_MENU_RightsAsync(int RoleID, int ParentMenuId) {
            this.FETCH_Saved_Role_MENU_RightsAsync(RoleID, ParentMenuId, null);
        }
        
        /// <remarks/>
        public void FETCH_Saved_Role_MENU_RightsAsync(int RoleID, int ParentMenuId, object userState) {
            if ((this.FETCH_Saved_Role_MENU_RightsOperationCompleted == null)) {
                this.FETCH_Saved_Role_MENU_RightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFETCH_Saved_Role_MENU_RightsOperationCompleted);
            }
            this.InvokeAsync("FETCH_Saved_Role_MENU_Rights", new object[] {
                        RoleID,
                        ParentMenuId}, this.FETCH_Saved_Role_MENU_RightsOperationCompleted, userState);
        }
        
        private void OnFETCH_Saved_Role_MENU_RightsOperationCompleted(object arg) {
            if ((this.FETCH_Saved_Role_MENU_RightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FETCH_Saved_Role_MENU_RightsCompleted(this, new FETCH_Saved_Role_MENU_RightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_RoleMenuRights", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_RoleMenuRights(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData) {
            object[] results = this.Invoke("Insert_RoleMenuRights", new object[] {
                        RoleId,
                        ParentMenuId,
                        LoggedInUserID,
                        strWpSectionHeaderData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_RoleMenuRightsAsync(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData) {
            this.Insert_RoleMenuRightsAsync(RoleId, ParentMenuId, LoggedInUserID, strWpSectionHeaderData, null);
        }
        
        /// <remarks/>
        public void Insert_RoleMenuRightsAsync(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData, object userState) {
            if ((this.Insert_RoleMenuRightsOperationCompleted == null)) {
                this.Insert_RoleMenuRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_RoleMenuRightsOperationCompleted);
            }
            this.InvokeAsync("Insert_RoleMenuRights", new object[] {
                        RoleId,
                        ParentMenuId,
                        LoggedInUserID,
                        strWpSectionHeaderData}, this.Insert_RoleMenuRightsOperationCompleted, userState);
        }
        
        private void OnInsert_RoleMenuRightsOperationCompleted(object arg) {
            if ((this.Insert_RoleMenuRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_RoleMenuRightsCompleted(this, new Insert_RoleMenuRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Assigned_Role", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_Assigned_Role(int RoleID, string SelectedEmployees, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_Assigned_Role", new object[] {
                        RoleID,
                        SelectedEmployees,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Assigned_RoleAsync(int RoleID, string SelectedEmployees, string LoggedInUserID) {
            this.Insert_Assigned_RoleAsync(RoleID, SelectedEmployees, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_Assigned_RoleAsync(int RoleID, string SelectedEmployees, string LoggedInUserID, object userState) {
            if ((this.Insert_Assigned_RoleOperationCompleted == null)) {
                this.Insert_Assigned_RoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Assigned_RoleOperationCompleted);
            }
            this.InvokeAsync("Insert_Assigned_Role", new object[] {
                        RoleID,
                        SelectedEmployees,
                        LoggedInUserID}, this.Insert_Assigned_RoleOperationCompleted, userState);
        }
        
        private void OnInsert_Assigned_RoleOperationCompleted(object arg) {
            if ((this.Insert_Assigned_RoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Assigned_RoleCompleted(this, new Insert_Assigned_RoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_RoleListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_RoleListing() {
            object[] results = this.Invoke("Fetch_RoleListing", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_RoleListingAsync() {
            this.Fetch_RoleListingAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_RoleListingAsync(object userState) {
            if ((this.Fetch_RoleListingOperationCompleted == null)) {
                this.Fetch_RoleListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_RoleListingOperationCompleted);
            }
            this.InvokeAsync("Fetch_RoleListing", new object[0], this.Fetch_RoleListingOperationCompleted, userState);
        }
        
        private void OnFetch_RoleListingOperationCompleted(object arg) {
            if ((this.Fetch_RoleListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_RoleListingCompleted(this, new Fetch_RoleListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_VMSConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_VMSConfiguration(string strConfigTitle, string strConfigDesc, int CompanyID, string strXmlVMS_Question, string strXmlVMS_Feedback, bool blFeedbackCompulsary, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_VMSConfiguration", new object[] {
                        strConfigTitle,
                        strConfigDesc,
                        CompanyID,
                        strXmlVMS_Question,
                        strXmlVMS_Feedback,
                        blFeedbackCompulsary,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_VMSConfigurationAsync(string strConfigTitle, string strConfigDesc, int CompanyID, string strXmlVMS_Question, string strXmlVMS_Feedback, bool blFeedbackCompulsary, string LoggedInUserID) {
            this.Insert_VMSConfigurationAsync(strConfigTitle, strConfigDesc, CompanyID, strXmlVMS_Question, strXmlVMS_Feedback, blFeedbackCompulsary, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_VMSConfigurationAsync(string strConfigTitle, string strConfigDesc, int CompanyID, string strXmlVMS_Question, string strXmlVMS_Feedback, bool blFeedbackCompulsary, string LoggedInUserID, object userState) {
            if ((this.Insert_VMSConfigurationOperationCompleted == null)) {
                this.Insert_VMSConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_VMSConfigurationOperationCompleted);
            }
            this.InvokeAsync("Insert_VMSConfiguration", new object[] {
                        strConfigTitle,
                        strConfigDesc,
                        CompanyID,
                        strXmlVMS_Question,
                        strXmlVMS_Feedback,
                        blFeedbackCompulsary,
                        LoggedInUserID}, this.Insert_VMSConfigurationOperationCompleted, userState);
        }
        
        private void OnInsert_VMSConfigurationOperationCompleted(object arg) {
            if ((this.Insert_VMSConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_VMSConfigurationCompleted(this, new Insert_VMSConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Answer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Answer(char Key) {
            object[] results = this.Invoke("Fetch_Answer", new object[] {
                        Key});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_AnswerAsync(char Key) {
            this.Fetch_AnswerAsync(Key, null);
        }
        
        /// <remarks/>
        public void Fetch_AnswerAsync(char Key, object userState) {
            if ((this.Fetch_AnswerOperationCompleted == null)) {
                this.Fetch_AnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_AnswerOperationCompleted);
            }
            this.InvokeAsync("Fetch_Answer", new object[] {
                        Key}, this.Fetch_AnswerOperationCompleted, userState);
        }
        
        private void OnFetch_AnswerOperationCompleted(object arg) {
            if ((this.Fetch_AnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_AnswerCompleted(this, new Fetch_AnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void MenuMaster_CRUDCompletedEventHandler(object sender, MenuMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MenuMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MenuMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UserTypeMaster_CRUDCompletedEventHandler(object sender, UserTypeMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserTypeMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserTypeMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DepartmentMaster_CRUDCompletedEventHandler(object sender, DepartmentMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_ZoneCompletedEventHandler(object sender, Fetch_ZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_ZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_ZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_LocationCompletedEventHandler(object sender, Fetch_LocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_LocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_LocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_Sub_LocationCompletedEventHandler(object sender, Fetch_Sub_LocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Sub_LocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Sub_LocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_DepartmentCompletedEventHandler(object sender, Fetch_DepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_DepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_DepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_User_TypeCompletedEventHandler(object sender, Fetch_User_TypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_User_TypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_User_TypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UserMaster_CRUDCompletedEventHandler(object sender, UserMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LoginUserCompletedEventHandler(object sender, LoginUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void PriorityMaster_CRUDCompletedEventHandler(object sender, PriorityMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PriorityMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PriorityMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FrequencyMaster_CRUDCompletedEventHandler(object sender, FrequencyMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FrequencyMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FrequencyMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ZoneMaster_CRUDCompletedEventHandler(object sender, ZoneMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZoneMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZoneMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LocationMaster_CRUDCompletedEventHandler(object sender, LocationMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocationMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LocationMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SubLocationMaster_CRUDCompletedEventHandler(object sender, SubLocationMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubLocationMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubLocationMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UserGroupMaster_CRUDCompletedEventHandler(object sender, UserGroupMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGroupMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGroupMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FetchUserGrpCompletedEventHandler(object sender, FetchUserGrpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchUserGrpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchUserGrpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_CategorySubCategoryCompletedEventHandler(object sender, Fetch_CategorySubCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CategorySubCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CategorySubCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void WorkflowMaster_CRUDCompletedEventHandler(object sender, WorkflowMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorkflowMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorkflowMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_User_UserGroupListCompletedEventHandler(object sender, Fetch_User_UserGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_User_UserGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_User_UserGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CategoryMaster_CRUDCompletedEventHandler(object sender, CategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SubCategoryMaster_CRUDCompletedEventHandler(object sender, SubCategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubCategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubCategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void BindLocationDetailsCompletedEventHandler(object sender, BindLocationDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BindLocationDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BindLocationDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_LocationTreeCompletedEventHandler(object sender, Fetch_LocationTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_LocationTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_LocationTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_Ticket_WorkflowCompletedEventHandler(object sender, Fetch_Ticket_WorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Ticket_WorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Ticket_WorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Insert_Ticket_DetailsCompletedEventHandler(object sender, Insert_Ticket_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Ticket_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Ticket_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Employee_CRUDCompletedEventHandler(object sender, Employee_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Employee_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Employee_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void fetchStoreCompletedEventHandler(object sender, fetchStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Retailer_CRUDCompletedEventHandler(object sender, Retailer_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Retailer_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Retailer_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Event_InsertCompletedEventHandler(object sender, Event_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void EventDetails_CRUDCompletedEventHandler(object sender, EventDetails_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EventDetails_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EventDetails_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void bindEventDetailsCompletedEventHandler(object sender, bindEventDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bindEventDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bindEventDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Get_CustomerDetailsCompletedEventHandler(object sender, Get_CustomerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_CustomerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_CustomerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Get_EventQuestionsCompletedEventHandler(object sender, Get_EventQuestionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_EventQuestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_EventQuestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Event_QuestionIUCompletedEventHandler(object sender, Event_QuestionIUCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_QuestionIUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_QuestionIUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_MIS_ReportCompletedEventHandler(object sender, Fetch_MIS_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MIS_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MIS_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Event_UpdateCompletedEventHandler(object sender, Event_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetEventListCompletedEventHandler(object sender, GetEventListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_MIS_Report_ExcelCompletedEventHandler(object sender, Fetch_MIS_Report_ExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MIS_Report_ExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MIS_Report_ExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ImportRetailerCompletedEventHandler(object sender, ImportRetailerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportRetailerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportRetailerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void AddChecklistMaster_CRUDCompletedEventHandler(object sender, AddChecklistMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddChecklistMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddChecklistMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ChecklistPoint_CRUDCompletedEventHandler(object sender, ChecklistPoint_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChecklistPoint_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChecklistPoint_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ChecklistRequestCompletedEventHandler(object sender, ChecklistRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChecklistRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChecklistRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Update_ChecklistPointsCompletedEventHandler(object sender, Update_ChecklistPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_ChecklistPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_ChecklistPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Close_Ticket_DetailsCompletedEventHandler(object sender, Close_Ticket_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Close_Ticket_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Close_Ticket_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Location_PopulateRootLevelCompletedEventHandler(object sender, Location_PopulateRootLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Location_PopulateRootLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Location_PopulateRootLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Location_PopulateSubLevelCompletedEventHandler(object sender, Location_PopulateSubLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Location_PopulateSubLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Location_PopulateSubLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Add_Update_Location_NodeCompletedEventHandler(object sender, Add_Update_Location_NodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Add_Update_Location_NodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Add_Update_Location_NodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FetchMenuCompletedEventHandler(object sender, FetchMenuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchMenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchMenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void RoleMaster_CRUDCompletedEventHandler(object sender, RoleMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_Assigned_RoleCompletedEventHandler(object sender, Fetch_Assigned_RoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Assigned_RoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Assigned_RoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_Role_MenuCompletedEventHandler(object sender, Fetch_Role_MenuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Role_MenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Role_MenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FETCH_Saved_Role_MENU_RightsCompletedEventHandler(object sender, FETCH_Saved_Role_MENU_RightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FETCH_Saved_Role_MENU_RightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FETCH_Saved_Role_MENU_RightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Insert_RoleMenuRightsCompletedEventHandler(object sender, Insert_RoleMenuRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_RoleMenuRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_RoleMenuRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Insert_Assigned_RoleCompletedEventHandler(object sender, Insert_Assigned_RoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Assigned_RoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Assigned_RoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_RoleListingCompletedEventHandler(object sender, Fetch_RoleListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_RoleListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_RoleListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Insert_VMSConfigurationCompletedEventHandler(object sender, Insert_VMSConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_VMSConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_VMSConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void Fetch_AnswerCompletedEventHandler(object sender, Fetch_AnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_AnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_AnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591