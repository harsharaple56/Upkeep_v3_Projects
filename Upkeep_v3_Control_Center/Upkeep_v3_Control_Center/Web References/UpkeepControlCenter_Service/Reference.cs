//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Upkeep_v3_Control_Center.UpkeepControlCenter_Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UpkeepControlCenter_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class UpkeepControlCenter_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GroupMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Invoices_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CC_DashboardOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_GroupDescOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CompanyDescOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompanyMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PopulateLicenseMastersOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchLicenseExpiryDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback License_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdminLogin_MasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatedsLicenseActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Subscription_Package_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_SMS_Config_DetailsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UpkeepControlCenter_Service() {
            this.Url = global::Upkeep_v3_Control_Center.Properties.Settings.Default.Upkeep_v3_Control_Center_UpkeepControlCenter_Service_UpkeepControlCenter_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event GroupMaster_CRUDCompletedEventHandler GroupMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Invoices_CRUDCompletedEventHandler Invoices_CRUDCompleted;
        
        /// <remarks/>
        public event CC_DashboardCompletedEventHandler CC_DashboardCompleted;
        
        /// <remarks/>
        public event Fetch_GroupDescCompletedEventHandler Fetch_GroupDescCompleted;
        
        /// <remarks/>
        public event Fetch_CompanyDescCompletedEventHandler Fetch_CompanyDescCompleted;
        
        /// <remarks/>
        public event CompanyMaster_CRUDCompletedEventHandler CompanyMaster_CRUDCompleted;
        
        /// <remarks/>
        public event PopulateLicenseMastersCompletedEventHandler PopulateLicenseMastersCompleted;
        
        /// <remarks/>
        public event FetchLicenseExpiryDateCompletedEventHandler FetchLicenseExpiryDateCompleted;
        
        /// <remarks/>
        public event License_CRUDCompletedEventHandler License_CRUDCompleted;
        
        /// <remarks/>
        public event LoginUserCompletedEventHandler LoginUserCompleted;
        
        /// <remarks/>
        public event AdminLogin_MasterCompletedEventHandler AdminLogin_MasterCompleted;
        
        /// <remarks/>
        public event ValidateCompanyCompletedEventHandler ValidateCompanyCompleted;
        
        /// <remarks/>
        public event UpdatedsLicenseActionCompletedEventHandler UpdatedsLicenseActionCompleted;
        
        /// <remarks/>
        public event Subscription_Package_CRUDCompletedEventHandler Subscription_Package_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_SMS_Config_DetailsCompletedEventHandler Fetch_SMS_Config_DetailsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GroupMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GroupMaster_CRUD(int Group_ID, string Group_Desc, string Group_Code, string LoggedInUserID, string Is_Deleted, string Action) {
            object[] results = this.Invoke("GroupMaster_CRUD", new object[] {
                        Group_ID,
                        Group_Desc,
                        Group_Code,
                        LoggedInUserID,
                        Is_Deleted,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GroupMaster_CRUDAsync(int Group_ID, string Group_Desc, string Group_Code, string LoggedInUserID, string Is_Deleted, string Action) {
            this.GroupMaster_CRUDAsync(Group_ID, Group_Desc, Group_Code, LoggedInUserID, Is_Deleted, Action, null);
        }
        
        /// <remarks/>
        public void GroupMaster_CRUDAsync(int Group_ID, string Group_Desc, string Group_Code, string LoggedInUserID, string Is_Deleted, string Action, object userState) {
            if ((this.GroupMaster_CRUDOperationCompleted == null)) {
                this.GroupMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGroupMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("GroupMaster_CRUD", new object[] {
                        Group_ID,
                        Group_Desc,
                        Group_Code,
                        LoggedInUserID,
                        Is_Deleted,
                        Action}, this.GroupMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnGroupMaster_CRUDOperationCompleted(object arg) {
            if ((this.GroupMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GroupMaster_CRUDCompleted(this, new GroupMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Invoices_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Invoices_CRUD(
                    int Invoice_ID, 
                    string Invoice_No, 
                    string Invoice_Desc, 
                    string Invoice_Amount, 
                    string Invoice_CSGT, 
                    string Invoice_SGST, 
                    string Invoice_Date, 
                    string Status, 
                    string Transaction_Details, 
                    int Company_ID, 
                    string Company_Desc, 
                    string Payment_Mode, 
                    string Nature_of_Invoice, 
                    string Billing_Name, 
                    string Due_date, 
                    string GSTIN, 
                    string Invoice_File_Path, 
                    string LoggedInUserID, 
                    string Action) {
            object[] results = this.Invoke("Invoices_CRUD", new object[] {
                        Invoice_ID,
                        Invoice_No,
                        Invoice_Desc,
                        Invoice_Amount,
                        Invoice_CSGT,
                        Invoice_SGST,
                        Invoice_Date,
                        Status,
                        Transaction_Details,
                        Company_ID,
                        Company_Desc,
                        Payment_Mode,
                        Nature_of_Invoice,
                        Billing_Name,
                        Due_date,
                        GSTIN,
                        Invoice_File_Path,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Invoices_CRUDAsync(
                    int Invoice_ID, 
                    string Invoice_No, 
                    string Invoice_Desc, 
                    string Invoice_Amount, 
                    string Invoice_CSGT, 
                    string Invoice_SGST, 
                    string Invoice_Date, 
                    string Status, 
                    string Transaction_Details, 
                    int Company_ID, 
                    string Company_Desc, 
                    string Payment_Mode, 
                    string Nature_of_Invoice, 
                    string Billing_Name, 
                    string Due_date, 
                    string GSTIN, 
                    string Invoice_File_Path, 
                    string LoggedInUserID, 
                    string Action) {
            this.Invoices_CRUDAsync(Invoice_ID, Invoice_No, Invoice_Desc, Invoice_Amount, Invoice_CSGT, Invoice_SGST, Invoice_Date, Status, Transaction_Details, Company_ID, Company_Desc, Payment_Mode, Nature_of_Invoice, Billing_Name, Due_date, GSTIN, Invoice_File_Path, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void Invoices_CRUDAsync(
                    int Invoice_ID, 
                    string Invoice_No, 
                    string Invoice_Desc, 
                    string Invoice_Amount, 
                    string Invoice_CSGT, 
                    string Invoice_SGST, 
                    string Invoice_Date, 
                    string Status, 
                    string Transaction_Details, 
                    int Company_ID, 
                    string Company_Desc, 
                    string Payment_Mode, 
                    string Nature_of_Invoice, 
                    string Billing_Name, 
                    string Due_date, 
                    string GSTIN, 
                    string Invoice_File_Path, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.Invoices_CRUDOperationCompleted == null)) {
                this.Invoices_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoices_CRUDOperationCompleted);
            }
            this.InvokeAsync("Invoices_CRUD", new object[] {
                        Invoice_ID,
                        Invoice_No,
                        Invoice_Desc,
                        Invoice_Amount,
                        Invoice_CSGT,
                        Invoice_SGST,
                        Invoice_Date,
                        Status,
                        Transaction_Details,
                        Company_ID,
                        Company_Desc,
                        Payment_Mode,
                        Nature_of_Invoice,
                        Billing_Name,
                        Due_date,
                        GSTIN,
                        Invoice_File_Path,
                        LoggedInUserID,
                        Action}, this.Invoices_CRUDOperationCompleted, userState);
        }
        
        private void OnInvoices_CRUDOperationCompleted(object arg) {
            if ((this.Invoices_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Invoices_CRUDCompleted(this, new Invoices_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CC_Dashboard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CC_Dashboard() {
            object[] results = this.Invoke("CC_Dashboard", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CC_DashboardAsync() {
            this.CC_DashboardAsync(null);
        }
        
        /// <remarks/>
        public void CC_DashboardAsync(object userState) {
            if ((this.CC_DashboardOperationCompleted == null)) {
                this.CC_DashboardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCC_DashboardOperationCompleted);
            }
            this.InvokeAsync("CC_Dashboard", new object[0], this.CC_DashboardOperationCompleted, userState);
        }
        
        private void OnCC_DashboardOperationCompleted(object arg) {
            if ((this.CC_DashboardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CC_DashboardCompleted(this, new CC_DashboardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_GroupDesc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_GroupDesc() {
            object[] results = this.Invoke("Fetch_GroupDesc", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_GroupDescAsync() {
            this.Fetch_GroupDescAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_GroupDescAsync(object userState) {
            if ((this.Fetch_GroupDescOperationCompleted == null)) {
                this.Fetch_GroupDescOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_GroupDescOperationCompleted);
            }
            this.InvokeAsync("Fetch_GroupDesc", new object[0], this.Fetch_GroupDescOperationCompleted, userState);
        }
        
        private void OnFetch_GroupDescOperationCompleted(object arg) {
            if ((this.Fetch_GroupDescCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_GroupDescCompleted(this, new Fetch_GroupDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CompanyDesc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CompanyDesc() {
            object[] results = this.Invoke("Fetch_CompanyDesc", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CompanyDescAsync() {
            this.Fetch_CompanyDescAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_CompanyDescAsync(object userState) {
            if ((this.Fetch_CompanyDescOperationCompleted == null)) {
                this.Fetch_CompanyDescOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CompanyDescOperationCompleted);
            }
            this.InvokeAsync("Fetch_CompanyDesc", new object[0], this.Fetch_CompanyDescOperationCompleted, userState);
        }
        
        private void OnFetch_CompanyDescOperationCompleted(object arg) {
            if ((this.Fetch_CompanyDescCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CompanyDescCompleted(this, new Fetch_CompanyDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompanyMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CompanyMaster_CRUD(
                    int CompanyID, 
                    string strCompanyCode, 
                    string strCompanyDesc, 
                    int GroupID, 
                    string CompanyLogo, 
                    string ClientURL, 
                    int Is_DBatClientServer, 
                    string ConString, 
                    string CompanyEmailID, 
                    string CompanyMobileNo, 
                    string User_FName, 
                    string User_LName, 
                    string User_Dept, 
                    string User_Code, 
                    string User_Name, 
                    string User_Designation, 
                    string User_EmailID, 
                    string User_MobileNo, 
                    int SMS_ConfigID, 
                    int SMS_Alloted, 
                    int SMS_Min_Bal_Alert, 
                    int SMS_Available_Balance, 
                    string LoggedInUserID, 
                    string Action) {
            object[] results = this.Invoke("CompanyMaster_CRUD", new object[] {
                        CompanyID,
                        strCompanyCode,
                        strCompanyDesc,
                        GroupID,
                        CompanyLogo,
                        ClientURL,
                        Is_DBatClientServer,
                        ConString,
                        CompanyEmailID,
                        CompanyMobileNo,
                        User_FName,
                        User_LName,
                        User_Dept,
                        User_Code,
                        User_Name,
                        User_Designation,
                        User_EmailID,
                        User_MobileNo,
                        SMS_ConfigID,
                        SMS_Alloted,
                        SMS_Min_Bal_Alert,
                        SMS_Available_Balance,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyMaster_CRUDAsync(
                    int CompanyID, 
                    string strCompanyCode, 
                    string strCompanyDesc, 
                    int GroupID, 
                    string CompanyLogo, 
                    string ClientURL, 
                    int Is_DBatClientServer, 
                    string ConString, 
                    string CompanyEmailID, 
                    string CompanyMobileNo, 
                    string User_FName, 
                    string User_LName, 
                    string User_Dept, 
                    string User_Code, 
                    string User_Name, 
                    string User_Designation, 
                    string User_EmailID, 
                    string User_MobileNo, 
                    int SMS_ConfigID, 
                    int SMS_Alloted, 
                    int SMS_Min_Bal_Alert, 
                    int SMS_Available_Balance, 
                    string LoggedInUserID, 
                    string Action) {
            this.CompanyMaster_CRUDAsync(CompanyID, strCompanyCode, strCompanyDesc, GroupID, CompanyLogo, ClientURL, Is_DBatClientServer, ConString, CompanyEmailID, CompanyMobileNo, User_FName, User_LName, User_Dept, User_Code, User_Name, User_Designation, User_EmailID, User_MobileNo, SMS_ConfigID, SMS_Alloted, SMS_Min_Bal_Alert, SMS_Available_Balance, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void CompanyMaster_CRUDAsync(
                    int CompanyID, 
                    string strCompanyCode, 
                    string strCompanyDesc, 
                    int GroupID, 
                    string CompanyLogo, 
                    string ClientURL, 
                    int Is_DBatClientServer, 
                    string ConString, 
                    string CompanyEmailID, 
                    string CompanyMobileNo, 
                    string User_FName, 
                    string User_LName, 
                    string User_Dept, 
                    string User_Code, 
                    string User_Name, 
                    string User_Designation, 
                    string User_EmailID, 
                    string User_MobileNo, 
                    int SMS_ConfigID, 
                    int SMS_Alloted, 
                    int SMS_Min_Bal_Alert, 
                    int SMS_Available_Balance, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.CompanyMaster_CRUDOperationCompleted == null)) {
                this.CompanyMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CompanyMaster_CRUD", new object[] {
                        CompanyID,
                        strCompanyCode,
                        strCompanyDesc,
                        GroupID,
                        CompanyLogo,
                        ClientURL,
                        Is_DBatClientServer,
                        ConString,
                        CompanyEmailID,
                        CompanyMobileNo,
                        User_FName,
                        User_LName,
                        User_Dept,
                        User_Code,
                        User_Name,
                        User_Designation,
                        User_EmailID,
                        User_MobileNo,
                        SMS_ConfigID,
                        SMS_Alloted,
                        SMS_Min_Bal_Alert,
                        SMS_Available_Balance,
                        LoggedInUserID,
                        Action}, this.CompanyMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCompanyMaster_CRUDOperationCompleted(object arg) {
            if ((this.CompanyMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyMaster_CRUDCompleted(this, new CompanyMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PopulateLicenseMasters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PopulateLicenseMasters() {
            object[] results = this.Invoke("PopulateLicenseMasters", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PopulateLicenseMastersAsync() {
            this.PopulateLicenseMastersAsync(null);
        }
        
        /// <remarks/>
        public void PopulateLicenseMastersAsync(object userState) {
            if ((this.PopulateLicenseMastersOperationCompleted == null)) {
                this.PopulateLicenseMastersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateLicenseMastersOperationCompleted);
            }
            this.InvokeAsync("PopulateLicenseMasters", new object[0], this.PopulateLicenseMastersOperationCompleted, userState);
        }
        
        private void OnPopulateLicenseMastersOperationCompleted(object arg) {
            if ((this.PopulateLicenseMastersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PopulateLicenseMastersCompleted(this, new PopulateLicenseMastersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchLicenseExpiryDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchLicenseExpiryDate(int SubscriptionID, string ActivationDate) {
            object[] results = this.Invoke("FetchLicenseExpiryDate", new object[] {
                        SubscriptionID,
                        ActivationDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchLicenseExpiryDateAsync(int SubscriptionID, string ActivationDate) {
            this.FetchLicenseExpiryDateAsync(SubscriptionID, ActivationDate, null);
        }
        
        /// <remarks/>
        public void FetchLicenseExpiryDateAsync(int SubscriptionID, string ActivationDate, object userState) {
            if ((this.FetchLicenseExpiryDateOperationCompleted == null)) {
                this.FetchLicenseExpiryDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchLicenseExpiryDateOperationCompleted);
            }
            this.InvokeAsync("FetchLicenseExpiryDate", new object[] {
                        SubscriptionID,
                        ActivationDate}, this.FetchLicenseExpiryDateOperationCompleted, userState);
        }
        
        private void OnFetchLicenseExpiryDateOperationCompleted(object arg) {
            if ((this.FetchLicenseExpiryDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchLicenseExpiryDateCompleted(this, new FetchLicenseExpiryDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/License_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet License_CRUD(int LicenseID, string strClientID, int Company_ID, int Subs_Pack_Id, string strActivationDate, string strExpirationDate, string strDueDate, int UserLimit, string strSelectedModules, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("License_CRUD", new object[] {
                        LicenseID,
                        strClientID,
                        Company_ID,
                        Subs_Pack_Id,
                        strActivationDate,
                        strExpirationDate,
                        strDueDate,
                        UserLimit,
                        strSelectedModules,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void License_CRUDAsync(int LicenseID, string strClientID, int Company_ID, int Subs_Pack_Id, string strActivationDate, string strExpirationDate, string strDueDate, int UserLimit, string strSelectedModules, string LoggedInUserID, string Action) {
            this.License_CRUDAsync(LicenseID, strClientID, Company_ID, Subs_Pack_Id, strActivationDate, strExpirationDate, strDueDate, UserLimit, strSelectedModules, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void License_CRUDAsync(int LicenseID, string strClientID, int Company_ID, int Subs_Pack_Id, string strActivationDate, string strExpirationDate, string strDueDate, int UserLimit, string strSelectedModules, string LoggedInUserID, string Action, object userState) {
            if ((this.License_CRUDOperationCompleted == null)) {
                this.License_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicense_CRUDOperationCompleted);
            }
            this.InvokeAsync("License_CRUD", new object[] {
                        LicenseID,
                        strClientID,
                        Company_ID,
                        Subs_Pack_Id,
                        strActivationDate,
                        strExpirationDate,
                        strDueDate,
                        UserLimit,
                        strSelectedModules,
                        LoggedInUserID,
                        Action}, this.License_CRUDOperationCompleted, userState);
        }
        
        private void OnLicense_CRUDOperationCompleted(object arg) {
            if ((this.License_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.License_CRUDCompleted(this, new License_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoginUser(string UserId, string strPassword) {
            object[] results = this.Invoke("LoginUser", new object[] {
                        UserId,
                        strPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoginUserAsync(string UserId, string strPassword) {
            this.LoginUserAsync(UserId, strPassword, null);
        }
        
        /// <remarks/>
        public void LoginUserAsync(string UserId, string strPassword, object userState) {
            if ((this.LoginUserOperationCompleted == null)) {
                this.LoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserOperationCompleted);
            }
            this.InvokeAsync("LoginUser", new object[] {
                        UserId,
                        strPassword}, this.LoginUserOperationCompleted, userState);
        }
        
        private void OnLoginUserOperationCompleted(object arg) {
            if ((this.LoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdminLogin_Master", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AdminLogin_Master(int ID, string FirstName, string LastName, string UserName, string Password, string LoggedInUserID, string Is_Deleted, string Action) {
            object[] results = this.Invoke("AdminLogin_Master", new object[] {
                        ID,
                        FirstName,
                        LastName,
                        UserName,
                        Password,
                        LoggedInUserID,
                        Is_Deleted,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AdminLogin_MasterAsync(int ID, string FirstName, string LastName, string UserName, string Password, string LoggedInUserID, string Is_Deleted, string Action) {
            this.AdminLogin_MasterAsync(ID, FirstName, LastName, UserName, Password, LoggedInUserID, Is_Deleted, Action, null);
        }
        
        /// <remarks/>
        public void AdminLogin_MasterAsync(int ID, string FirstName, string LastName, string UserName, string Password, string LoggedInUserID, string Is_Deleted, string Action, object userState) {
            if ((this.AdminLogin_MasterOperationCompleted == null)) {
                this.AdminLogin_MasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdminLogin_MasterOperationCompleted);
            }
            this.InvokeAsync("AdminLogin_Master", new object[] {
                        ID,
                        FirstName,
                        LastName,
                        UserName,
                        Password,
                        LoggedInUserID,
                        Is_Deleted,
                        Action}, this.AdminLogin_MasterOperationCompleted, userState);
        }
        
        private void OnAdminLogin_MasterOperationCompleted(object arg) {
            if ((this.AdminLogin_MasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdminLogin_MasterCompleted(this, new AdminLogin_MasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateCompany", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ValidateCompany(string CompanyCode) {
            object[] results = this.Invoke("ValidateCompany", new object[] {
                        CompanyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCompanyAsync(string CompanyCode) {
            this.ValidateCompanyAsync(CompanyCode, null);
        }
        
        /// <remarks/>
        public void ValidateCompanyAsync(string CompanyCode, object userState) {
            if ((this.ValidateCompanyOperationCompleted == null)) {
                this.ValidateCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCompanyOperationCompleted);
            }
            this.InvokeAsync("ValidateCompany", new object[] {
                        CompanyCode}, this.ValidateCompanyOperationCompleted, userState);
        }
        
        private void OnValidateCompanyOperationCompleted(object arg) {
            if ((this.ValidateCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompanyCompleted(this, new ValidateCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatedsLicenseAction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdatedsLicenseAction(int LicenseID, int LicenseAction, string LoggedInUserID) {
            object[] results = this.Invoke("UpdatedsLicenseAction", new object[] {
                        LicenseID,
                        LicenseAction,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatedsLicenseActionAsync(int LicenseID, int LicenseAction, string LoggedInUserID) {
            this.UpdatedsLicenseActionAsync(LicenseID, LicenseAction, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void UpdatedsLicenseActionAsync(int LicenseID, int LicenseAction, string LoggedInUserID, object userState) {
            if ((this.UpdatedsLicenseActionOperationCompleted == null)) {
                this.UpdatedsLicenseActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatedsLicenseActionOperationCompleted);
            }
            this.InvokeAsync("UpdatedsLicenseAction", new object[] {
                        LicenseID,
                        LicenseAction,
                        LoggedInUserID}, this.UpdatedsLicenseActionOperationCompleted, userState);
        }
        
        private void OnUpdatedsLicenseActionOperationCompleted(object arg) {
            if ((this.UpdatedsLicenseActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatedsLicenseActionCompleted(this, new UpdatedsLicenseActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Subscription_Package_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Subscription_Package_CRUD(int PackageID, string PackageName, int NoOfDays, int Price, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("Subscription_Package_CRUD", new object[] {
                        PackageID,
                        PackageName,
                        NoOfDays,
                        Price,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Subscription_Package_CRUDAsync(int PackageID, string PackageName, int NoOfDays, int Price, string LoggedInUserID, string Action) {
            this.Subscription_Package_CRUDAsync(PackageID, PackageName, NoOfDays, Price, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void Subscription_Package_CRUDAsync(int PackageID, string PackageName, int NoOfDays, int Price, string LoggedInUserID, string Action, object userState) {
            if ((this.Subscription_Package_CRUDOperationCompleted == null)) {
                this.Subscription_Package_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscription_Package_CRUDOperationCompleted);
            }
            this.InvokeAsync("Subscription_Package_CRUD", new object[] {
                        PackageID,
                        PackageName,
                        NoOfDays,
                        Price,
                        LoggedInUserID,
                        Action}, this.Subscription_Package_CRUDOperationCompleted, userState);
        }
        
        private void OnSubscription_Package_CRUDOperationCompleted(object arg) {
            if ((this.Subscription_Package_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Subscription_Package_CRUDCompleted(this, new Subscription_Package_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_SMS_Config_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_SMS_Config_Details(int ConfigID) {
            object[] results = this.Invoke("Fetch_SMS_Config_Details", new object[] {
                        ConfigID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_SMS_Config_DetailsAsync(int ConfigID) {
            this.Fetch_SMS_Config_DetailsAsync(ConfigID, null);
        }
        
        /// <remarks/>
        public void Fetch_SMS_Config_DetailsAsync(int ConfigID, object userState) {
            if ((this.Fetch_SMS_Config_DetailsOperationCompleted == null)) {
                this.Fetch_SMS_Config_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_SMS_Config_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_SMS_Config_Details", new object[] {
                        ConfigID}, this.Fetch_SMS_Config_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_SMS_Config_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_SMS_Config_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_SMS_Config_DetailsCompleted(this, new Fetch_SMS_Config_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GroupMaster_CRUDCompletedEventHandler(object sender, GroupMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GroupMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Invoices_CRUDCompletedEventHandler(object sender, Invoices_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Invoices_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Invoices_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CC_DashboardCompletedEventHandler(object sender, CC_DashboardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CC_DashboardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CC_DashboardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_GroupDescCompletedEventHandler(object sender, Fetch_GroupDescCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_GroupDescCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_GroupDescCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_CompanyDescCompletedEventHandler(object sender, Fetch_CompanyDescCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CompanyDescCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CompanyDescCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CompanyMaster_CRUDCompletedEventHandler(object sender, CompanyMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PopulateLicenseMastersCompletedEventHandler(object sender, PopulateLicenseMastersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PopulateLicenseMastersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PopulateLicenseMastersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchLicenseExpiryDateCompletedEventHandler(object sender, FetchLicenseExpiryDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchLicenseExpiryDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchLicenseExpiryDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void License_CRUDCompletedEventHandler(object sender, License_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class License_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal License_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LoginUserCompletedEventHandler(object sender, LoginUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AdminLogin_MasterCompletedEventHandler(object sender, AdminLogin_MasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdminLogin_MasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdminLogin_MasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateCompanyCompletedEventHandler(object sender, ValidateCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdatedsLicenseActionCompletedEventHandler(object sender, UpdatedsLicenseActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatedsLicenseActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatedsLicenseActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Subscription_Package_CRUDCompletedEventHandler(object sender, Subscription_Package_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Subscription_Package_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Subscription_Package_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_SMS_Config_DetailsCompletedEventHandler(object sender, Fetch_SMS_Config_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_SMS_Config_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_SMS_Config_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591