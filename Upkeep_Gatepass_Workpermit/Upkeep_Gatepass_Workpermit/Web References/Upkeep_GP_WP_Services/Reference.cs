//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Upkeep_Gatepass_Workpermit.Upkeep_GP_WP_Services {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Upkeep_GP_WP_ServicesSoap", Namespace="http://tempuri.org/")]
    public partial class Upkeep_GP_WP_Services : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_User_UserGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_GatePassConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_GatePassConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_GatePassConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GatePassHeader_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GatePassType_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GatePassTerm_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_GatePassConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_GatePassRequestDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_GatePassRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MyRequestGatePassOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MyActionableGatePassOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_GatePassRequest_Approval_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAction_GatePassRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback User_LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback Employee_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback Retailer_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback EventDetails_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback bindEventDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_CustomerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_EventQuestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_QuestionIUOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MIS_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Event_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MIS_Report_ExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportRetailerOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBaggageReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchPowerBankReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_WorkPermitConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_AnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_WorkPermitConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_WorkPermitConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_WorkPermitRequestDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_WorkPermitRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_WorkPermitRequestSavedDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_WorkPermitRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MyRequestWorkPermitOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MyActionableWorkPermitOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_DashboardCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Delete_GatePassConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_WorkPermitConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_WorkPermitSavedConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_GatePass_MISOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_WorkPermit_MISOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchMenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Assigned_RoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Role_MenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback FETCH_Saved_Role_MENU_RightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_RoleMenuRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Assigned_RoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_RoleListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Chk_AnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_ChecklistConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_ChecklistConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Bind_ChecklistConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_MyChecklistOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Upkeep_GP_WP_Services() {
            this.Url = global::Upkeep_Gatepass_Workpermit.Properties.Settings.Default.Upkeep_Gatepass_Workpermit_Upkeep_GP_WP_Services_Upkeep_GP_WP_Services;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event Fetch_User_UserGroupListCompletedEventHandler Fetch_User_UserGroupListCompleted;
        
        /// <remarks/>
        public event Fetch_CompanyCompletedEventHandler Fetch_CompanyCompleted;
        
        /// <remarks/>
        public event Insert_GatePassConfigurationCompletedEventHandler Insert_GatePassConfigurationCompleted;
        
        /// <remarks/>
        public event Fetch_GatePassConfigurationCompletedEventHandler Fetch_GatePassConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_GatePassConfigurationCompletedEventHandler Bind_GatePassConfigurationCompleted;
        
        /// <remarks/>
        public event GatePassHeader_CRUDCompletedEventHandler GatePassHeader_CRUDCompleted;
        
        /// <remarks/>
        public event GatePassType_CRUDCompletedEventHandler GatePassType_CRUDCompleted;
        
        /// <remarks/>
        public event GatePassTerm_CRUDCompletedEventHandler GatePassTerm_CRUDCompleted;
        
        /// <remarks/>
        public event Update_GatePassConfigurationCompletedEventHandler Update_GatePassConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_GatePassRequestDetailsCompletedEventHandler Bind_GatePassRequestDetailsCompleted;
        
        /// <remarks/>
        public event Insert_GatePassRequestCompletedEventHandler Insert_GatePassRequestCompleted;
        
        /// <remarks/>
        public event Fetch_MyRequestGatePassCompletedEventHandler Fetch_MyRequestGatePassCompleted;
        
        /// <remarks/>
        public event Fetch_MyActionableGatePassCompletedEventHandler Fetch_MyActionableGatePassCompleted;
        
        /// <remarks/>
        public event Fetch_GatePassRequest_Approval_DetailsCompletedEventHandler Fetch_GatePassRequest_Approval_DetailsCompleted;
        
        /// <remarks/>
        public event UpdateAction_GatePassRequestCompletedEventHandler UpdateAction_GatePassRequestCompleted;
        
        /// <remarks/>
        public event User_LoginCompletedEventHandler User_LoginCompleted;
        
        /// <remarks/>
        public event Employee_CRUDCompletedEventHandler Employee_CRUDCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event fetchStoreCompletedEventHandler fetchStoreCompleted;
        
        /// <remarks/>
        public event Retailer_CRUDCompletedEventHandler Retailer_CRUDCompleted;
        
        /// <remarks/>
        public event Event_InsertCompletedEventHandler Event_InsertCompleted;
        
        /// <remarks/>
        public event EventDetails_CRUDCompletedEventHandler EventDetails_CRUDCompleted;
        
        /// <remarks/>
        public event bindEventDetailsCompletedEventHandler bindEventDetailsCompleted;
        
        /// <remarks/>
        public event Get_CustomerDetailsCompletedEventHandler Get_CustomerDetailsCompleted;
        
        /// <remarks/>
        public event Get_EventQuestionsCompletedEventHandler Get_EventQuestionsCompleted;
        
        /// <remarks/>
        public event Event_QuestionIUCompletedEventHandler Event_QuestionIUCompleted;
        
        /// <remarks/>
        public event Fetch_MIS_ReportCompletedEventHandler Fetch_MIS_ReportCompleted;
        
        /// <remarks/>
        public event Event_UpdateCompletedEventHandler Event_UpdateCompleted;
        
        /// <remarks/>
        public event GetEventListCompletedEventHandler GetEventListCompleted;
        
        /// <remarks/>
        public event Fetch_MIS_Report_ExcelCompletedEventHandler Fetch_MIS_Report_ExcelCompleted;
        
        /// <remarks/>
        public event ImportRetailerCompletedEventHandler ImportRetailerCompleted;
        
        /// <remarks/>
        public event FetchBaggageReportCompletedEventHandler FetchBaggageReportCompleted;
        
        /// <remarks/>
        public event FetchPowerBankReportCompletedEventHandler FetchPowerBankReportCompleted;
        
        /// <remarks/>
        public event Insert_WorkPermitConfigurationCompletedEventHandler Insert_WorkPermitConfigurationCompleted;
        
        /// <remarks/>
        public event Fetch_AnswerCompletedEventHandler Fetch_AnswerCompleted;
        
        /// <remarks/>
        public event Fetch_WorkPermitConfigurationCompletedEventHandler Fetch_WorkPermitConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_WorkPermitConfigurationCompletedEventHandler Bind_WorkPermitConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_WorkPermitRequestDetailsCompletedEventHandler Bind_WorkPermitRequestDetailsCompleted;
        
        /// <remarks/>
        public event Insert_WorkPermitRequestCompletedEventHandler Insert_WorkPermitRequestCompleted;
        
        /// <remarks/>
        public event Fetch_WorkPermitRequestSavedDataCompletedEventHandler Fetch_WorkPermitRequestSavedDataCompleted;
        
        /// <remarks/>
        public event Update_WorkPermitRequestCompletedEventHandler Update_WorkPermitRequestCompleted;
        
        /// <remarks/>
        public event Fetch_MyRequestWorkPermitCompletedEventHandler Fetch_MyRequestWorkPermitCompleted;
        
        /// <remarks/>
        public event Fetch_MyActionableWorkPermitCompletedEventHandler Fetch_MyActionableWorkPermitCompleted;
        
        /// <remarks/>
        public event Fetch_DashboardCountCompletedEventHandler Fetch_DashboardCountCompleted;
        
        /// <remarks/>
        public event Delete_GatePassConfigurationCompletedEventHandler Delete_GatePassConfigurationCompleted;
        
        /// <remarks/>
        public event Update_WorkPermitConfigurationCompletedEventHandler Update_WorkPermitConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_WorkPermitSavedConfigurationCompletedEventHandler Bind_WorkPermitSavedConfigurationCompleted;
        
        /// <remarks/>
        public event Fetch_GatePass_MISCompletedEventHandler Fetch_GatePass_MISCompleted;
        
        /// <remarks/>
        public event Fetch_WorkPermit_MISCompletedEventHandler Fetch_WorkPermit_MISCompleted;
        
        /// <remarks/>
        public event FetchMenuCompletedEventHandler FetchMenuCompleted;
        
        /// <remarks/>
        public event RoleMaster_CRUDCompletedEventHandler RoleMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_Assigned_RoleCompletedEventHandler Fetch_Assigned_RoleCompleted;
        
        /// <remarks/>
        public event Fetch_Role_MenuCompletedEventHandler Fetch_Role_MenuCompleted;
        
        /// <remarks/>
        public event FETCH_Saved_Role_MENU_RightsCompletedEventHandler FETCH_Saved_Role_MENU_RightsCompleted;
        
        /// <remarks/>
        public event Insert_RoleMenuRightsCompletedEventHandler Insert_RoleMenuRightsCompleted;
        
        /// <remarks/>
        public event Insert_Assigned_RoleCompletedEventHandler Insert_Assigned_RoleCompleted;
        
        /// <remarks/>
        public event Fetch_RoleListingCompletedEventHandler Fetch_RoleListingCompleted;
        
        /// <remarks/>
        public event Fetch_Chk_AnswerCompletedEventHandler Fetch_Chk_AnswerCompleted;
        
        /// <remarks/>
        public event Update_ChecklistConfigurationCompletedEventHandler Update_ChecklistConfigurationCompleted;
        
        /// <remarks/>
        public event Insert_ChecklistConfigurationCompletedEventHandler Insert_ChecklistConfigurationCompleted;
        
        /// <remarks/>
        public event Bind_ChecklistConfigurationCompletedEventHandler Bind_ChecklistConfigurationCompleted;
        
        /// <remarks/>
        public event Fetch_MyChecklistCompletedEventHandler Fetch_MyChecklistCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_User_UserGroupList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_User_UserGroupList(string Initiator) {
            object[] results = this.Invoke("Fetch_User_UserGroupList", new object[] {
                        Initiator});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_User_UserGroupListAsync(string Initiator) {
            this.Fetch_User_UserGroupListAsync(Initiator, null);
        }
        
        /// <remarks/>
        public void Fetch_User_UserGroupListAsync(string Initiator, object userState) {
            if ((this.Fetch_User_UserGroupListOperationCompleted == null)) {
                this.Fetch_User_UserGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_User_UserGroupListOperationCompleted);
            }
            this.InvokeAsync("Fetch_User_UserGroupList", new object[] {
                        Initiator}, this.Fetch_User_UserGroupListOperationCompleted, userState);
        }
        
        private void OnFetch_User_UserGroupListOperationCompleted(object arg) {
            if ((this.Fetch_User_UserGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_User_UserGroupListCompleted(this, new Fetch_User_UserGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Company", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Company() {
            object[] results = this.Invoke("Fetch_Company", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CompanyAsync() {
            this.Fetch_CompanyAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_CompanyAsync(object userState) {
            if ((this.Fetch_CompanyOperationCompleted == null)) {
                this.Fetch_CompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CompanyOperationCompleted);
            }
            this.InvokeAsync("Fetch_Company", new object[0], this.Fetch_CompanyOperationCompleted, userState);
        }
        
        private void OnFetch_CompanyOperationCompleted(object arg) {
            if ((this.Fetch_CompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CompanyCompleted(this, new Fetch_CompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_GatePassConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_GatePassConfiguration(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlGatepass_Header, string strXmlGatepass_Type, string strXmlGatepass_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_GatePassConfiguration", new object[] {
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlGatepass_Header,
                        strXmlGatepass_Type,
                        strXmlGatepass_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        strGPClosureBy,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_GatePassConfigurationAsync(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlGatepass_Header, string strXmlGatepass_Type, string strXmlGatepass_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID) {
            this.Insert_GatePassConfigurationAsync(strConfigTitle, CompanyID, strInitiator, LinkDepartment, strTransactionPrefix, strXmlGatepass_Header, strXmlGatepass_Type, strXmlGatepass_TermCondition, strXmlApprovalMatrix, ShowApprovalMatrix, strGPClosureBy, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_GatePassConfigurationAsync(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlGatepass_Header, string strXmlGatepass_Type, string strXmlGatepass_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID, object userState) {
            if ((this.Insert_GatePassConfigurationOperationCompleted == null)) {
                this.Insert_GatePassConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_GatePassConfigurationOperationCompleted);
            }
            this.InvokeAsync("Insert_GatePassConfiguration", new object[] {
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlGatepass_Header,
                        strXmlGatepass_Type,
                        strXmlGatepass_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        strGPClosureBy,
                        LoggedInUserID}, this.Insert_GatePassConfigurationOperationCompleted, userState);
        }
        
        private void OnInsert_GatePassConfigurationOperationCompleted(object arg) {
            if ((this.Insert_GatePassConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_GatePassConfigurationCompleted(this, new Insert_GatePassConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_GatePassConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_GatePassConfiguration(string Initiator) {
            object[] results = this.Invoke("Fetch_GatePassConfiguration", new object[] {
                        Initiator});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_GatePassConfigurationAsync(string Initiator) {
            this.Fetch_GatePassConfigurationAsync(Initiator, null);
        }
        
        /// <remarks/>
        public void Fetch_GatePassConfigurationAsync(string Initiator, object userState) {
            if ((this.Fetch_GatePassConfigurationOperationCompleted == null)) {
                this.Fetch_GatePassConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_GatePassConfigurationOperationCompleted);
            }
            this.InvokeAsync("Fetch_GatePassConfiguration", new object[] {
                        Initiator}, this.Fetch_GatePassConfigurationOperationCompleted, userState);
        }
        
        private void OnFetch_GatePassConfigurationOperationCompleted(object arg) {
            if ((this.Fetch_GatePassConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_GatePassConfigurationCompleted(this, new Fetch_GatePassConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_GatePassConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_GatePassConfiguration(int GP_ConfigID) {
            object[] results = this.Invoke("Bind_GatePassConfiguration", new object[] {
                        GP_ConfigID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_GatePassConfigurationAsync(int GP_ConfigID) {
            this.Bind_GatePassConfigurationAsync(GP_ConfigID, null);
        }
        
        /// <remarks/>
        public void Bind_GatePassConfigurationAsync(int GP_ConfigID, object userState) {
            if ((this.Bind_GatePassConfigurationOperationCompleted == null)) {
                this.Bind_GatePassConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_GatePassConfigurationOperationCompleted);
            }
            this.InvokeAsync("Bind_GatePassConfiguration", new object[] {
                        GP_ConfigID}, this.Bind_GatePassConfigurationOperationCompleted, userState);
        }
        
        private void OnBind_GatePassConfigurationOperationCompleted(object arg) {
            if ((this.Bind_GatePassConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_GatePassConfigurationCompleted(this, new Bind_GatePassConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GatePassHeader_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GatePassHeader_CRUD(int GatePassHeaderID, string GatePassHeader, bool GPHeaderNumeric, int GPHeaderUnit, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("GatePassHeader_CRUD", new object[] {
                        GatePassHeaderID,
                        GatePassHeader,
                        GPHeaderNumeric,
                        GPHeaderUnit,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GatePassHeader_CRUDAsync(int GatePassHeaderID, string GatePassHeader, bool GPHeaderNumeric, int GPHeaderUnit, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            this.GatePassHeader_CRUDAsync(GatePassHeaderID, GatePassHeader, GPHeaderNumeric, GPHeaderUnit, GatePass_ConfigID, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void GatePassHeader_CRUDAsync(int GatePassHeaderID, string GatePassHeader, bool GPHeaderNumeric, int GPHeaderUnit, int GatePass_ConfigID, string LoggedInUserID, string strAction, object userState) {
            if ((this.GatePassHeader_CRUDOperationCompleted == null)) {
                this.GatePassHeader_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGatePassHeader_CRUDOperationCompleted);
            }
            this.InvokeAsync("GatePassHeader_CRUD", new object[] {
                        GatePassHeaderID,
                        GatePassHeader,
                        GPHeaderNumeric,
                        GPHeaderUnit,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction}, this.GatePassHeader_CRUDOperationCompleted, userState);
        }
        
        private void OnGatePassHeader_CRUDOperationCompleted(object arg) {
            if ((this.GatePassHeader_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GatePassHeader_CRUDCompleted(this, new GatePassHeader_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GatePassType_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GatePassType_CRUD(int GP_TypeID, string GP_TypeDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("GatePassType_CRUD", new object[] {
                        GP_TypeID,
                        GP_TypeDesc,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GatePassType_CRUDAsync(int GP_TypeID, string GP_TypeDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            this.GatePassType_CRUDAsync(GP_TypeID, GP_TypeDesc, GatePass_ConfigID, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void GatePassType_CRUDAsync(int GP_TypeID, string GP_TypeDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction, object userState) {
            if ((this.GatePassType_CRUDOperationCompleted == null)) {
                this.GatePassType_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGatePassType_CRUDOperationCompleted);
            }
            this.InvokeAsync("GatePassType_CRUD", new object[] {
                        GP_TypeID,
                        GP_TypeDesc,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction}, this.GatePassType_CRUDOperationCompleted, userState);
        }
        
        private void OnGatePassType_CRUDOperationCompleted(object arg) {
            if ((this.GatePassType_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GatePassType_CRUDCompleted(this, new GatePassType_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GatePassTerm_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GatePassTerm_CRUD(int GP_TermID, string GP_TermDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("GatePassTerm_CRUD", new object[] {
                        GP_TermID,
                        GP_TermDesc,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GatePassTerm_CRUDAsync(int GP_TermID, string GP_TermDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction) {
            this.GatePassTerm_CRUDAsync(GP_TermID, GP_TermDesc, GatePass_ConfigID, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void GatePassTerm_CRUDAsync(int GP_TermID, string GP_TermDesc, int GatePass_ConfigID, string LoggedInUserID, string strAction, object userState) {
            if ((this.GatePassTerm_CRUDOperationCompleted == null)) {
                this.GatePassTerm_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGatePassTerm_CRUDOperationCompleted);
            }
            this.InvokeAsync("GatePassTerm_CRUD", new object[] {
                        GP_TermID,
                        GP_TermDesc,
                        GatePass_ConfigID,
                        LoggedInUserID,
                        strAction}, this.GatePassTerm_CRUDOperationCompleted, userState);
        }
        
        private void OnGatePassTerm_CRUDOperationCompleted(object arg) {
            if ((this.GatePassTerm_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GatePassTerm_CRUDCompleted(this, new GatePassTerm_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_GatePassConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_GatePassConfiguration(int GP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID) {
            object[] results = this.Invoke("Update_GatePassConfiguration", new object[] {
                        GP_Config_ID,
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        strGPClosureBy,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_GatePassConfigurationAsync(int GP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID) {
            this.Update_GatePassConfigurationAsync(GP_Config_ID, strConfigTitle, CompanyID, strInitiator, LinkDepartment, strTransactionPrefix, strXmlApprovalMatrix, ShowApprovalMatrix, strGPClosureBy, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Update_GatePassConfigurationAsync(int GP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string strGPClosureBy, string LoggedInUserID, object userState) {
            if ((this.Update_GatePassConfigurationOperationCompleted == null)) {
                this.Update_GatePassConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_GatePassConfigurationOperationCompleted);
            }
            this.InvokeAsync("Update_GatePassConfiguration", new object[] {
                        GP_Config_ID,
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        strGPClosureBy,
                        LoggedInUserID}, this.Update_GatePassConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdate_GatePassConfigurationOperationCompleted(object arg) {
            if ((this.Update_GatePassConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_GatePassConfigurationCompleted(this, new Update_GatePassConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_GatePassRequestDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_GatePassRequestDetails(int GP_ConfigID, string LoggedInUserID) {
            object[] results = this.Invoke("Bind_GatePassRequestDetails", new object[] {
                        GP_ConfigID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_GatePassRequestDetailsAsync(int GP_ConfigID, string LoggedInUserID) {
            this.Bind_GatePassRequestDetailsAsync(GP_ConfigID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Bind_GatePassRequestDetailsAsync(int GP_ConfigID, string LoggedInUserID, object userState) {
            if ((this.Bind_GatePassRequestDetailsOperationCompleted == null)) {
                this.Bind_GatePassRequestDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_GatePassRequestDetailsOperationCompleted);
            }
            this.InvokeAsync("Bind_GatePassRequestDetails", new object[] {
                        GP_ConfigID,
                        LoggedInUserID}, this.Bind_GatePassRequestDetailsOperationCompleted, userState);
        }
        
        private void OnBind_GatePassRequestDetailsOperationCompleted(object arg) {
            if ((this.Bind_GatePassRequestDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_GatePassRequestDetailsCompleted(this, new Bind_GatePassRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_GatePassRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_GatePassRequest(int GP_ConfigID, string strGatePassDate, int DeptID, int GPTypeID, string strGPHeader, string strGPHeaderData, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_GatePassRequest", new object[] {
                        GP_ConfigID,
                        strGatePassDate,
                        DeptID,
                        GPTypeID,
                        strGPHeader,
                        strGPHeaderData,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_GatePassRequestAsync(int GP_ConfigID, string strGatePassDate, int DeptID, int GPTypeID, string strGPHeader, string strGPHeaderData, string LoggedInUserID) {
            this.Insert_GatePassRequestAsync(GP_ConfigID, strGatePassDate, DeptID, GPTypeID, strGPHeader, strGPHeaderData, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_GatePassRequestAsync(int GP_ConfigID, string strGatePassDate, int DeptID, int GPTypeID, string strGPHeader, string strGPHeaderData, string LoggedInUserID, object userState) {
            if ((this.Insert_GatePassRequestOperationCompleted == null)) {
                this.Insert_GatePassRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_GatePassRequestOperationCompleted);
            }
            this.InvokeAsync("Insert_GatePassRequest", new object[] {
                        GP_ConfigID,
                        strGatePassDate,
                        DeptID,
                        GPTypeID,
                        strGPHeader,
                        strGPHeaderData,
                        LoggedInUserID}, this.Insert_GatePassRequestOperationCompleted, userState);
        }
        
        private void OnInsert_GatePassRequestOperationCompleted(object arg) {
            if ((this.Insert_GatePassRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_GatePassRequestCompleted(this, new Insert_GatePassRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MyRequestGatePass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MyRequestGatePass(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MyRequestGatePass", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MyRequestGatePassAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_MyRequestGatePassAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MyRequestGatePassAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MyRequestGatePassOperationCompleted == null)) {
                this.Fetch_MyRequestGatePassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MyRequestGatePassOperationCompleted);
            }
            this.InvokeAsync("Fetch_MyRequestGatePass", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_MyRequestGatePassOperationCompleted, userState);
        }
        
        private void OnFetch_MyRequestGatePassOperationCompleted(object arg) {
            if ((this.Fetch_MyRequestGatePassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MyRequestGatePassCompleted(this, new Fetch_MyRequestGatePassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MyActionableGatePass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MyActionableGatePass(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MyActionableGatePass", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MyActionableGatePassAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_MyActionableGatePassAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MyActionableGatePassAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MyActionableGatePassOperationCompleted == null)) {
                this.Fetch_MyActionableGatePassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MyActionableGatePassOperationCompleted);
            }
            this.InvokeAsync("Fetch_MyActionableGatePass", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_MyActionableGatePassOperationCompleted, userState);
        }
        
        private void OnFetch_MyActionableGatePassOperationCompleted(object arg) {
            if ((this.Fetch_MyActionableGatePassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MyActionableGatePassCompleted(this, new Fetch_MyActionableGatePassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_GatePassRequest_Approval_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_GatePassRequest_Approval_Details(int TransactionID, string LoggedInUserID) {
            object[] results = this.Invoke("Fetch_GatePassRequest_Approval_Details", new object[] {
                        TransactionID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_GatePassRequest_Approval_DetailsAsync(int TransactionID, string LoggedInUserID) {
            this.Fetch_GatePassRequest_Approval_DetailsAsync(TransactionID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Fetch_GatePassRequest_Approval_DetailsAsync(int TransactionID, string LoggedInUserID, object userState) {
            if ((this.Fetch_GatePassRequest_Approval_DetailsOperationCompleted == null)) {
                this.Fetch_GatePassRequest_Approval_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_GatePassRequest_Approval_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_GatePassRequest_Approval_Details", new object[] {
                        TransactionID,
                        LoggedInUserID}, this.Fetch_GatePassRequest_Approval_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_GatePassRequest_Approval_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_GatePassRequest_Approval_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_GatePassRequest_Approval_DetailsCompleted(this, new Fetch_GatePassRequest_Approval_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAction_GatePassRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdateAction_GatePassRequest(string TransactionID, string CurrentLevel, string ActionStatus, string strRemarks, string LoggedInUserID) {
            object[] results = this.Invoke("UpdateAction_GatePassRequest", new object[] {
                        TransactionID,
                        CurrentLevel,
                        ActionStatus,
                        strRemarks,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAction_GatePassRequestAsync(string TransactionID, string CurrentLevel, string ActionStatus, string strRemarks, string LoggedInUserID) {
            this.UpdateAction_GatePassRequestAsync(TransactionID, CurrentLevel, ActionStatus, strRemarks, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void UpdateAction_GatePassRequestAsync(string TransactionID, string CurrentLevel, string ActionStatus, string strRemarks, string LoggedInUserID, object userState) {
            if ((this.UpdateAction_GatePassRequestOperationCompleted == null)) {
                this.UpdateAction_GatePassRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAction_GatePassRequestOperationCompleted);
            }
            this.InvokeAsync("UpdateAction_GatePassRequest", new object[] {
                        TransactionID,
                        CurrentLevel,
                        ActionStatus,
                        strRemarks,
                        LoggedInUserID}, this.UpdateAction_GatePassRequestOperationCompleted, userState);
        }
        
        private void OnUpdateAction_GatePassRequestOperationCompleted(object arg) {
            if ((this.UpdateAction_GatePassRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAction_GatePassRequestCompleted(this, new UpdateAction_GatePassRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/User_Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet User_Login(string UserId, string strPassword, string UserType) {
            object[] results = this.Invoke("User_Login", new object[] {
                        UserId,
                        strPassword,
                        UserType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void User_LoginAsync(string UserId, string strPassword, string UserType) {
            this.User_LoginAsync(UserId, strPassword, UserType, null);
        }
        
        /// <remarks/>
        public void User_LoginAsync(string UserId, string strPassword, string UserType, object userState) {
            if ((this.User_LoginOperationCompleted == null)) {
                this.User_LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUser_LoginOperationCompleted);
            }
            this.InvokeAsync("User_Login", new object[] {
                        UserId,
                        strPassword,
                        UserType}, this.User_LoginOperationCompleted, userState);
        }
        
        private void OnUser_LoginOperationCompleted(object arg) {
            if ((this.User_LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.User_LoginCompleted(this, new User_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Employee_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Employee_CRUD(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType) {
            object[] results = this.Invoke("Employee_CRUD", new object[] {
                        firstName,
                        lastName,
                        email,
                        phone,
                        EmpID,
                        LoggedInUserID,
                        role,
                        Username,
                        Password,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Employee_CRUDAsync(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType) {
            this.Employee_CRUDAsync(firstName, lastName, email, phone, EmpID, LoggedInUserID, role, Username, Password, actionType, null);
        }
        
        /// <remarks/>
        public void Employee_CRUDAsync(string firstName, string lastName, string email, long phone, string EmpID, string LoggedInUserID, string role, string Username, string Password, string actionType, object userState) {
            if ((this.Employee_CRUDOperationCompleted == null)) {
                this.Employee_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployee_CRUDOperationCompleted);
            }
            this.InvokeAsync("Employee_CRUD", new object[] {
                        firstName,
                        lastName,
                        email,
                        phone,
                        EmpID,
                        LoggedInUserID,
                        role,
                        Username,
                        Password,
                        actionType}, this.Employee_CRUDOperationCompleted, userState);
        }
        
        private void OnEmployee_CRUDOperationCompleted(object arg) {
            if ((this.Employee_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Employee_CRUDCompleted(this, new Employee_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChangePassword(string UserName, string strPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        UserName,
                        strPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserName, string strPassword) {
            this.ChangePasswordAsync(UserName, strPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserName, string strPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        UserName,
                        strPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fetchStore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fetchStore() {
            object[] results = this.Invoke("fetchStore", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fetchStoreAsync() {
            this.fetchStoreAsync(null);
        }
        
        /// <remarks/>
        public void fetchStoreAsync(object userState) {
            if ((this.fetchStoreOperationCompleted == null)) {
                this.fetchStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchStoreOperationCompleted);
            }
            this.InvokeAsync("fetchStore", new object[0], this.fetchStoreOperationCompleted, userState);
        }
        
        private void OnfetchStoreOperationCompleted(object arg) {
            if ((this.fetchStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchStoreCompleted(this, new fetchStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Retailer_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Retailer_CRUD(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, string Username, string Password, string LoggedInUserID, string actionType) {
            object[] results = this.Invoke("Retailer_CRUD", new object[] {
                        storeName,
                        firstName,
                        lastName,
                        email,
                        phone,
                        RetailerID,
                        Username,
                        Password,
                        LoggedInUserID,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Retailer_CRUDAsync(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, string Username, string Password, string LoggedInUserID, string actionType) {
            this.Retailer_CRUDAsync(storeName, firstName, lastName, email, phone, RetailerID, Username, Password, LoggedInUserID, actionType, null);
        }
        
        /// <remarks/>
        public void Retailer_CRUDAsync(string storeName, string firstName, string lastName, string email, long phone, int RetailerID, string Username, string Password, string LoggedInUserID, string actionType, object userState) {
            if ((this.Retailer_CRUDOperationCompleted == null)) {
                this.Retailer_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetailer_CRUDOperationCompleted);
            }
            this.InvokeAsync("Retailer_CRUD", new object[] {
                        storeName,
                        firstName,
                        lastName,
                        email,
                        phone,
                        RetailerID,
                        Username,
                        Password,
                        LoggedInUserID,
                        actionType}, this.Retailer_CRUDOperationCompleted, userState);
        }
        
        private void OnRetailer_CRUDOperationCompleted(object arg) {
            if ((this.Retailer_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Retailer_CRUDCompleted(this, new Retailer_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_Insert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_Insert(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4) {
            object[] results = this.Invoke("Event_Insert", new object[] {
                        eventName,
                        locationName,
                        startDateTime,
                        endDateTime,
                        CustomerQuestion,
                        CustQuesType,
                        QuesFor,
                        EventID,
                        EventMode,
                        LoggedInUserID,
                        option1,
                        option2,
                        option3,
                        option4});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_InsertAsync(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4) {
            this.Event_InsertAsync(eventName, locationName, startDateTime, endDateTime, CustomerQuestion, CustQuesType, QuesFor, EventID, EventMode, LoggedInUserID, option1, option2, option3, option4, null);
        }
        
        /// <remarks/>
        public void Event_InsertAsync(string eventName, string locationName, string startDateTime, string endDateTime, string CustomerQuestion, string CustQuesType, string QuesFor, int EventID, string EventMode, string LoggedInUserID, string option1, string option2, string option3, string option4, object userState) {
            if ((this.Event_InsertOperationCompleted == null)) {
                this.Event_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_InsertOperationCompleted);
            }
            this.InvokeAsync("Event_Insert", new object[] {
                        eventName,
                        locationName,
                        startDateTime,
                        endDateTime,
                        CustomerQuestion,
                        CustQuesType,
                        QuesFor,
                        EventID,
                        EventMode,
                        LoggedInUserID,
                        option1,
                        option2,
                        option3,
                        option4}, this.Event_InsertOperationCompleted, userState);
        }
        
        private void OnEvent_InsertOperationCompleted(object arg) {
            if ((this.Event_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_InsertCompleted(this, new Event_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EventDetails_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EventDetails_CRUD(int EventID, string actionType) {
            object[] results = this.Invoke("EventDetails_CRUD", new object[] {
                        EventID,
                        actionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EventDetails_CRUDAsync(int EventID, string actionType) {
            this.EventDetails_CRUDAsync(EventID, actionType, null);
        }
        
        /// <remarks/>
        public void EventDetails_CRUDAsync(int EventID, string actionType, object userState) {
            if ((this.EventDetails_CRUDOperationCompleted == null)) {
                this.EventDetails_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEventDetails_CRUDOperationCompleted);
            }
            this.InvokeAsync("EventDetails_CRUD", new object[] {
                        EventID,
                        actionType}, this.EventDetails_CRUDOperationCompleted, userState);
        }
        
        private void OnEventDetails_CRUDOperationCompleted(object arg) {
            if ((this.EventDetails_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EventDetails_CRUDCompleted(this, new EventDetails_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/bindEventDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet bindEventDetails(int EventID) {
            object[] results = this.Invoke("bindEventDetails", new object[] {
                        EventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void bindEventDetailsAsync(int EventID) {
            this.bindEventDetailsAsync(EventID, null);
        }
        
        /// <remarks/>
        public void bindEventDetailsAsync(int EventID, object userState) {
            if ((this.bindEventDetailsOperationCompleted == null)) {
                this.bindEventDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbindEventDetailsOperationCompleted);
            }
            this.InvokeAsync("bindEventDetails", new object[] {
                        EventID}, this.bindEventDetailsOperationCompleted, userState);
        }
        
        private void OnbindEventDetailsOperationCompleted(object arg) {
            if ((this.bindEventDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bindEventDetailsCompleted(this, new bindEventDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_CustomerDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_CustomerDetails() {
            object[] results = this.Invoke("Get_CustomerDetails", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_CustomerDetailsAsync() {
            this.Get_CustomerDetailsAsync(null);
        }
        
        /// <remarks/>
        public void Get_CustomerDetailsAsync(object userState) {
            if ((this.Get_CustomerDetailsOperationCompleted == null)) {
                this.Get_CustomerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_CustomerDetailsOperationCompleted);
            }
            this.InvokeAsync("Get_CustomerDetails", new object[0], this.Get_CustomerDetailsOperationCompleted, userState);
        }
        
        private void OnGet_CustomerDetailsOperationCompleted(object arg) {
            if ((this.Get_CustomerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_CustomerDetailsCompleted(this, new Get_CustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_EventQuestions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_EventQuestions(int EventID) {
            object[] results = this.Invoke("Get_EventQuestions", new object[] {
                        EventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_EventQuestionsAsync(int EventID) {
            this.Get_EventQuestionsAsync(EventID, null);
        }
        
        /// <remarks/>
        public void Get_EventQuestionsAsync(int EventID, object userState) {
            if ((this.Get_EventQuestionsOperationCompleted == null)) {
                this.Get_EventQuestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_EventQuestionsOperationCompleted);
            }
            this.InvokeAsync("Get_EventQuestions", new object[] {
                        EventID}, this.Get_EventQuestionsOperationCompleted, userState);
        }
        
        private void OnGet_EventQuestionsOperationCompleted(object arg) {
            if ((this.Get_EventQuestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_EventQuestionsCompleted(this, new Get_EventQuestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_QuestionIU", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_QuestionIU(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType) {
            object[] results = this.Invoke("Event_QuestionIU", new object[] {
                        EventID,
                        CustomerQuestion,
                        AnswerType,
                        opt1,
                        opt2,
                        opt3,
                        opt4,
                        LoggedInUserID,
                        QuestionID,
                        ActionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_QuestionIUAsync(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType) {
            this.Event_QuestionIUAsync(EventID, CustomerQuestion, AnswerType, opt1, opt2, opt3, opt4, LoggedInUserID, QuestionID, ActionType, null);
        }
        
        /// <remarks/>
        public void Event_QuestionIUAsync(int EventID, string CustomerQuestion, string AnswerType, string opt1, string opt2, string opt3, string opt4, string LoggedInUserID, int QuestionID, string ActionType, object userState) {
            if ((this.Event_QuestionIUOperationCompleted == null)) {
                this.Event_QuestionIUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_QuestionIUOperationCompleted);
            }
            this.InvokeAsync("Event_QuestionIU", new object[] {
                        EventID,
                        CustomerQuestion,
                        AnswerType,
                        opt1,
                        opt2,
                        opt3,
                        opt4,
                        LoggedInUserID,
                        QuestionID,
                        ActionType}, this.Event_QuestionIUOperationCompleted, userState);
        }
        
        private void OnEvent_QuestionIUOperationCompleted(object arg) {
            if ((this.Event_QuestionIUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_QuestionIUCompleted(this, new Event_QuestionIUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MIS_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MIS_Report(string EventID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MIS_Report", new object[] {
                        EventID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MIS_ReportAsync(string EventID, string From_Date, string To_Date) {
            this.Fetch_MIS_ReportAsync(EventID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MIS_ReportAsync(string EventID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MIS_ReportOperationCompleted == null)) {
                this.Fetch_MIS_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MIS_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_MIS_Report", new object[] {
                        EventID,
                        From_Date,
                        To_Date}, this.Fetch_MIS_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_MIS_ReportOperationCompleted(object arg) {
            if ((this.Fetch_MIS_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MIS_ReportCompleted(this, new Fetch_MIS_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Event_Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Event_Update(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType) {
            object[] results = this.Invoke("Event_Update", new object[] {
                        EventID,
                        Location,
                        QuesFor,
                        EventMode,
                        startDate,
                        endDate,
                        LoggedInUserID,
                        ActionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Event_UpdateAsync(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType) {
            this.Event_UpdateAsync(EventID, Location, QuesFor, EventMode, startDate, endDate, LoggedInUserID, ActionType, null);
        }
        
        /// <remarks/>
        public void Event_UpdateAsync(int EventID, string Location, string QuesFor, string EventMode, string startDate, string endDate, string LoggedInUserID, string ActionType, object userState) {
            if ((this.Event_UpdateOperationCompleted == null)) {
                this.Event_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvent_UpdateOperationCompleted);
            }
            this.InvokeAsync("Event_Update", new object[] {
                        EventID,
                        Location,
                        QuesFor,
                        EventMode,
                        startDate,
                        endDate,
                        LoggedInUserID,
                        ActionType}, this.Event_UpdateOperationCompleted, userState);
        }
        
        private void OnEvent_UpdateOperationCompleted(object arg) {
            if ((this.Event_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Event_UpdateCompleted(this, new Event_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEventList() {
            object[] results = this.Invoke("GetEventList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventListAsync() {
            this.GetEventListAsync(null);
        }
        
        /// <remarks/>
        public void GetEventListAsync(object userState) {
            if ((this.GetEventListOperationCompleted == null)) {
                this.GetEventListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventListOperationCompleted);
            }
            this.InvokeAsync("GetEventList", new object[0], this.GetEventListOperationCompleted, userState);
        }
        
        private void OnGetEventListOperationCompleted(object arg) {
            if ((this.GetEventListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventListCompleted(this, new GetEventListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MIS_Report_Excel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MIS_Report_Excel(string EventID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MIS_Report_Excel", new object[] {
                        EventID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MIS_Report_ExcelAsync(string EventID, string From_Date, string To_Date) {
            this.Fetch_MIS_Report_ExcelAsync(EventID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MIS_Report_ExcelAsync(string EventID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MIS_Report_ExcelOperationCompleted == null)) {
                this.Fetch_MIS_Report_ExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MIS_Report_ExcelOperationCompleted);
            }
            this.InvokeAsync("Fetch_MIS_Report_Excel", new object[] {
                        EventID,
                        From_Date,
                        To_Date}, this.Fetch_MIS_Report_ExcelOperationCompleted, userState);
        }
        
        private void OnFetch_MIS_Report_ExcelOperationCompleted(object arg) {
            if ((this.Fetch_MIS_Report_ExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MIS_Report_ExcelCompleted(this, new Fetch_MIS_Report_ExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportRetailer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ImportRetailer() {
            object[] results = this.Invoke("ImportRetailer", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ImportRetailerAsync() {
            this.ImportRetailerAsync(null);
        }
        
        /// <remarks/>
        public void ImportRetailerAsync(object userState) {
            if ((this.ImportRetailerOperationCompleted == null)) {
                this.ImportRetailerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportRetailerOperationCompleted);
            }
            this.InvokeAsync("ImportRetailer", new object[0], this.ImportRetailerOperationCompleted, userState);
        }
        
        private void OnImportRetailerOperationCompleted(object arg) {
            if ((this.ImportRetailerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportRetailerCompleted(this, new ImportRetailerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBaggageReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchBaggageReport(string From_Date, string To_Date) {
            object[] results = this.Invoke("FetchBaggageReport", new object[] {
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBaggageReportAsync(string From_Date, string To_Date) {
            this.FetchBaggageReportAsync(From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void FetchBaggageReportAsync(string From_Date, string To_Date, object userState) {
            if ((this.FetchBaggageReportOperationCompleted == null)) {
                this.FetchBaggageReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBaggageReportOperationCompleted);
            }
            this.InvokeAsync("FetchBaggageReport", new object[] {
                        From_Date,
                        To_Date}, this.FetchBaggageReportOperationCompleted, userState);
        }
        
        private void OnFetchBaggageReportOperationCompleted(object arg) {
            if ((this.FetchBaggageReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBaggageReportCompleted(this, new FetchBaggageReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchPowerBankReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchPowerBankReport(string From_Date, string To_Date) {
            object[] results = this.Invoke("FetchPowerBankReport", new object[] {
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchPowerBankReportAsync(string From_Date, string To_Date) {
            this.FetchPowerBankReportAsync(From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void FetchPowerBankReportAsync(string From_Date, string To_Date, object userState) {
            if ((this.FetchPowerBankReportOperationCompleted == null)) {
                this.FetchPowerBankReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchPowerBankReportOperationCompleted);
            }
            this.InvokeAsync("FetchPowerBankReport", new object[] {
                        From_Date,
                        To_Date}, this.FetchPowerBankReportOperationCompleted, userState);
        }
        
        private void OnFetchPowerBankReportOperationCompleted(object arg) {
            if ((this.FetchPowerBankReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchPowerBankReportCompleted(this, new FetchPowerBankReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_WorkPermitConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_WorkPermitConfiguration(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_WorkPermitConfiguration", new object[] {
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlWorkPermit_Header,
                        strXmlWorkPermit_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_WorkPermitConfigurationAsync(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID) {
            this.Insert_WorkPermitConfigurationAsync(strConfigTitle, CompanyID, strInitiator, LinkDepartment, strTransactionPrefix, strXmlWorkPermit_Header, strXmlWorkPermit_TermCondition, strXmlApprovalMatrix, ShowApprovalMatrix, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_WorkPermitConfigurationAsync(string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID, object userState) {
            if ((this.Insert_WorkPermitConfigurationOperationCompleted == null)) {
                this.Insert_WorkPermitConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_WorkPermitConfigurationOperationCompleted);
            }
            this.InvokeAsync("Insert_WorkPermitConfiguration", new object[] {
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlWorkPermit_Header,
                        strXmlWorkPermit_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        LoggedInUserID}, this.Insert_WorkPermitConfigurationOperationCompleted, userState);
        }
        
        private void OnInsert_WorkPermitConfigurationOperationCompleted(object arg) {
            if ((this.Insert_WorkPermitConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_WorkPermitConfigurationCompleted(this, new Insert_WorkPermitConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Answer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Answer() {
            object[] results = this.Invoke("Fetch_Answer", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_AnswerAsync() {
            this.Fetch_AnswerAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_AnswerAsync(object userState) {
            if ((this.Fetch_AnswerOperationCompleted == null)) {
                this.Fetch_AnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_AnswerOperationCompleted);
            }
            this.InvokeAsync("Fetch_Answer", new object[0], this.Fetch_AnswerOperationCompleted, userState);
        }
        
        private void OnFetch_AnswerOperationCompleted(object arg) {
            if ((this.Fetch_AnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_AnswerCompleted(this, new Fetch_AnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_WorkPermitConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_WorkPermitConfiguration(string Initiator) {
            object[] results = this.Invoke("Fetch_WorkPermitConfiguration", new object[] {
                        Initiator});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_WorkPermitConfigurationAsync(string Initiator) {
            this.Fetch_WorkPermitConfigurationAsync(Initiator, null);
        }
        
        /// <remarks/>
        public void Fetch_WorkPermitConfigurationAsync(string Initiator, object userState) {
            if ((this.Fetch_WorkPermitConfigurationOperationCompleted == null)) {
                this.Fetch_WorkPermitConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_WorkPermitConfigurationOperationCompleted);
            }
            this.InvokeAsync("Fetch_WorkPermitConfiguration", new object[] {
                        Initiator}, this.Fetch_WorkPermitConfigurationOperationCompleted, userState);
        }
        
        private void OnFetch_WorkPermitConfigurationOperationCompleted(object arg) {
            if ((this.Fetch_WorkPermitConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_WorkPermitConfigurationCompleted(this, new Fetch_WorkPermitConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_WorkPermitConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_WorkPermitConfiguration(int WP_ConfigID) {
            object[] results = this.Invoke("Bind_WorkPermitConfiguration", new object[] {
                        WP_ConfigID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_WorkPermitConfigurationAsync(int WP_ConfigID) {
            this.Bind_WorkPermitConfigurationAsync(WP_ConfigID, null);
        }
        
        /// <remarks/>
        public void Bind_WorkPermitConfigurationAsync(int WP_ConfigID, object userState) {
            if ((this.Bind_WorkPermitConfigurationOperationCompleted == null)) {
                this.Bind_WorkPermitConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_WorkPermitConfigurationOperationCompleted);
            }
            this.InvokeAsync("Bind_WorkPermitConfiguration", new object[] {
                        WP_ConfigID}, this.Bind_WorkPermitConfigurationOperationCompleted, userState);
        }
        
        private void OnBind_WorkPermitConfigurationOperationCompleted(object arg) {
            if ((this.Bind_WorkPermitConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_WorkPermitConfigurationCompleted(this, new Bind_WorkPermitConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_WorkPermitRequestDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_WorkPermitRequestDetails(int WP_ConfigID, string LoggedInUserID) {
            object[] results = this.Invoke("Bind_WorkPermitRequestDetails", new object[] {
                        WP_ConfigID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_WorkPermitRequestDetailsAsync(int WP_ConfigID, string LoggedInUserID) {
            this.Bind_WorkPermitRequestDetailsAsync(WP_ConfigID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Bind_WorkPermitRequestDetailsAsync(int WP_ConfigID, string LoggedInUserID, object userState) {
            if ((this.Bind_WorkPermitRequestDetailsOperationCompleted == null)) {
                this.Bind_WorkPermitRequestDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_WorkPermitRequestDetailsOperationCompleted);
            }
            this.InvokeAsync("Bind_WorkPermitRequestDetails", new object[] {
                        WP_ConfigID,
                        LoggedInUserID}, this.Bind_WorkPermitRequestDetailsOperationCompleted, userState);
        }
        
        private void OnBind_WorkPermitRequestDetailsOperationCompleted(object arg) {
            if ((this.Bind_WorkPermitRequestDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_WorkPermitRequestDetailsCompleted(this, new Bind_WorkPermitRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_WorkPermitRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_WorkPermitRequest(int WP_ConfigID, string LoggedInUserID, string strWpDate, string strWpTpDate, string strWpSectionHeaderData) {
            object[] results = this.Invoke("Insert_WorkPermitRequest", new object[] {
                        WP_ConfigID,
                        LoggedInUserID,
                        strWpDate,
                        strWpTpDate,
                        strWpSectionHeaderData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_WorkPermitRequestAsync(int WP_ConfigID, string LoggedInUserID, string strWpDate, string strWpTpDate, string strWpSectionHeaderData) {
            this.Insert_WorkPermitRequestAsync(WP_ConfigID, LoggedInUserID, strWpDate, strWpTpDate, strWpSectionHeaderData, null);
        }
        
        /// <remarks/>
        public void Insert_WorkPermitRequestAsync(int WP_ConfigID, string LoggedInUserID, string strWpDate, string strWpTpDate, string strWpSectionHeaderData, object userState) {
            if ((this.Insert_WorkPermitRequestOperationCompleted == null)) {
                this.Insert_WorkPermitRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_WorkPermitRequestOperationCompleted);
            }
            this.InvokeAsync("Insert_WorkPermitRequest", new object[] {
                        WP_ConfigID,
                        LoggedInUserID,
                        strWpDate,
                        strWpTpDate,
                        strWpSectionHeaderData}, this.Insert_WorkPermitRequestOperationCompleted, userState);
        }
        
        private void OnInsert_WorkPermitRequestOperationCompleted(object arg) {
            if ((this.Insert_WorkPermitRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_WorkPermitRequestCompleted(this, new Insert_WorkPermitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_WorkPermitRequestSavedData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_WorkPermitRequestSavedData(int WP_ConfigID, int Transaction_ID, string LoggedInUserID) {
            object[] results = this.Invoke("Fetch_WorkPermitRequestSavedData", new object[] {
                        WP_ConfigID,
                        Transaction_ID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_WorkPermitRequestSavedDataAsync(int WP_ConfigID, int Transaction_ID, string LoggedInUserID) {
            this.Fetch_WorkPermitRequestSavedDataAsync(WP_ConfigID, Transaction_ID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Fetch_WorkPermitRequestSavedDataAsync(int WP_ConfigID, int Transaction_ID, string LoggedInUserID, object userState) {
            if ((this.Fetch_WorkPermitRequestSavedDataOperationCompleted == null)) {
                this.Fetch_WorkPermitRequestSavedDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_WorkPermitRequestSavedDataOperationCompleted);
            }
            this.InvokeAsync("Fetch_WorkPermitRequestSavedData", new object[] {
                        WP_ConfigID,
                        Transaction_ID,
                        LoggedInUserID}, this.Fetch_WorkPermitRequestSavedDataOperationCompleted, userState);
        }
        
        private void OnFetch_WorkPermitRequestSavedDataOperationCompleted(object arg) {
            if ((this.Fetch_WorkPermitRequestSavedDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_WorkPermitRequestSavedDataCompleted(this, new Fetch_WorkPermitRequestSavedDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_WorkPermitRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_WorkPermitRequest(int TransactionID, string LoggedInUserID, string ActionStatus, string Remarks) {
            object[] results = this.Invoke("Update_WorkPermitRequest", new object[] {
                        TransactionID,
                        LoggedInUserID,
                        ActionStatus,
                        Remarks});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_WorkPermitRequestAsync(int TransactionID, string LoggedInUserID, string ActionStatus, string Remarks) {
            this.Update_WorkPermitRequestAsync(TransactionID, LoggedInUserID, ActionStatus, Remarks, null);
        }
        
        /// <remarks/>
        public void Update_WorkPermitRequestAsync(int TransactionID, string LoggedInUserID, string ActionStatus, string Remarks, object userState) {
            if ((this.Update_WorkPermitRequestOperationCompleted == null)) {
                this.Update_WorkPermitRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_WorkPermitRequestOperationCompleted);
            }
            this.InvokeAsync("Update_WorkPermitRequest", new object[] {
                        TransactionID,
                        LoggedInUserID,
                        ActionStatus,
                        Remarks}, this.Update_WorkPermitRequestOperationCompleted, userState);
        }
        
        private void OnUpdate_WorkPermitRequestOperationCompleted(object arg) {
            if ((this.Update_WorkPermitRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_WorkPermitRequestCompleted(this, new Update_WorkPermitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MyRequestWorkPermit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MyRequestWorkPermit(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MyRequestWorkPermit", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MyRequestWorkPermitAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_MyRequestWorkPermitAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MyRequestWorkPermitAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MyRequestWorkPermitOperationCompleted == null)) {
                this.Fetch_MyRequestWorkPermitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MyRequestWorkPermitOperationCompleted);
            }
            this.InvokeAsync("Fetch_MyRequestWorkPermit", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_MyRequestWorkPermitOperationCompleted, userState);
        }
        
        private void OnFetch_MyRequestWorkPermitOperationCompleted(object arg) {
            if ((this.Fetch_MyRequestWorkPermitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MyRequestWorkPermitCompleted(this, new Fetch_MyRequestWorkPermitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MyActionableWorkPermit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MyActionableWorkPermit(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MyActionableWorkPermit", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MyActionableWorkPermitAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_MyActionableWorkPermitAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MyActionableWorkPermitAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MyActionableWorkPermitOperationCompleted == null)) {
                this.Fetch_MyActionableWorkPermitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MyActionableWorkPermitOperationCompleted);
            }
            this.InvokeAsync("Fetch_MyActionableWorkPermit", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_MyActionableWorkPermitOperationCompleted, userState);
        }
        
        private void OnFetch_MyActionableWorkPermitOperationCompleted(object arg) {
            if ((this.Fetch_MyActionableWorkPermitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MyActionableWorkPermitCompleted(this, new Fetch_MyActionableWorkPermitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_DashboardCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_DashboardCount(int CompanyID, string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_DashboardCount", new object[] {
                        CompanyID,
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_DashboardCountAsync(int CompanyID, string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_DashboardCountAsync(CompanyID, LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_DashboardCountAsync(int CompanyID, string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_DashboardCountOperationCompleted == null)) {
                this.Fetch_DashboardCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_DashboardCountOperationCompleted);
            }
            this.InvokeAsync("Fetch_DashboardCount", new object[] {
                        CompanyID,
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_DashboardCountOperationCompleted, userState);
        }
        
        private void OnFetch_DashboardCountOperationCompleted(object arg) {
            if ((this.Fetch_DashboardCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_DashboardCountCompleted(this, new Fetch_DashboardCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete_GatePassConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Delete_GatePassConfiguration(int ConfigID, string LoggedInUserID) {
            object[] results = this.Invoke("Delete_GatePassConfiguration", new object[] {
                        ConfigID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Delete_GatePassConfigurationAsync(int ConfigID, string LoggedInUserID) {
            this.Delete_GatePassConfigurationAsync(ConfigID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Delete_GatePassConfigurationAsync(int ConfigID, string LoggedInUserID, object userState) {
            if ((this.Delete_GatePassConfigurationOperationCompleted == null)) {
                this.Delete_GatePassConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelete_GatePassConfigurationOperationCompleted);
            }
            this.InvokeAsync("Delete_GatePassConfiguration", new object[] {
                        ConfigID,
                        LoggedInUserID}, this.Delete_GatePassConfigurationOperationCompleted, userState);
        }
        
        private void OnDelete_GatePassConfigurationOperationCompleted(object arg) {
            if ((this.Delete_GatePassConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Delete_GatePassConfigurationCompleted(this, new Delete_GatePassConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_WorkPermitConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_WorkPermitConfiguration(int WP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID) {
            object[] results = this.Invoke("Update_WorkPermitConfiguration", new object[] {
                        WP_Config_ID,
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlWorkPermit_Header,
                        strXmlWorkPermit_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_WorkPermitConfigurationAsync(int WP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID) {
            this.Update_WorkPermitConfigurationAsync(WP_Config_ID, strConfigTitle, CompanyID, strInitiator, LinkDepartment, strTransactionPrefix, strXmlWorkPermit_Header, strXmlWorkPermit_TermCondition, strXmlApprovalMatrix, ShowApprovalMatrix, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Update_WorkPermitConfigurationAsync(int WP_Config_ID, string strConfigTitle, int CompanyID, string strInitiator, bool LinkDepartment, string strTransactionPrefix, string strXmlWorkPermit_Header, string strXmlWorkPermit_TermCondition, string strXmlApprovalMatrix, bool ShowApprovalMatrix, string LoggedInUserID, object userState) {
            if ((this.Update_WorkPermitConfigurationOperationCompleted == null)) {
                this.Update_WorkPermitConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_WorkPermitConfigurationOperationCompleted);
            }
            this.InvokeAsync("Update_WorkPermitConfiguration", new object[] {
                        WP_Config_ID,
                        strConfigTitle,
                        CompanyID,
                        strInitiator,
                        LinkDepartment,
                        strTransactionPrefix,
                        strXmlWorkPermit_Header,
                        strXmlWorkPermit_TermCondition,
                        strXmlApprovalMatrix,
                        ShowApprovalMatrix,
                        LoggedInUserID}, this.Update_WorkPermitConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdate_WorkPermitConfigurationOperationCompleted(object arg) {
            if ((this.Update_WorkPermitConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_WorkPermitConfigurationCompleted(this, new Update_WorkPermitConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_WorkPermitSavedConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_WorkPermitSavedConfiguration(int WP_ConfigID, string LoggedInUserID) {
            object[] results = this.Invoke("Bind_WorkPermitSavedConfiguration", new object[] {
                        WP_ConfigID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_WorkPermitSavedConfigurationAsync(int WP_ConfigID, string LoggedInUserID) {
            this.Bind_WorkPermitSavedConfigurationAsync(WP_ConfigID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Bind_WorkPermitSavedConfigurationAsync(int WP_ConfigID, string LoggedInUserID, object userState) {
            if ((this.Bind_WorkPermitSavedConfigurationOperationCompleted == null)) {
                this.Bind_WorkPermitSavedConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_WorkPermitSavedConfigurationOperationCompleted);
            }
            this.InvokeAsync("Bind_WorkPermitSavedConfiguration", new object[] {
                        WP_ConfigID,
                        LoggedInUserID}, this.Bind_WorkPermitSavedConfigurationOperationCompleted, userState);
        }
        
        private void OnBind_WorkPermitSavedConfigurationOperationCompleted(object arg) {
            if ((this.Bind_WorkPermitSavedConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_WorkPermitSavedConfigurationCompleted(this, new Bind_WorkPermitSavedConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_GatePass_MIS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_GatePass_MIS(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_GatePass_MIS", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_GatePass_MISAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_GatePass_MISAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_GatePass_MISAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_GatePass_MISOperationCompleted == null)) {
                this.Fetch_GatePass_MISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_GatePass_MISOperationCompleted);
            }
            this.InvokeAsync("Fetch_GatePass_MIS", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_GatePass_MISOperationCompleted, userState);
        }
        
        private void OnFetch_GatePass_MISOperationCompleted(object arg) {
            if ((this.Fetch_GatePass_MISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_GatePass_MISCompleted(this, new Fetch_GatePass_MISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_WorkPermit_MIS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_WorkPermit_MIS(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_WorkPermit_MIS", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_WorkPermit_MISAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_WorkPermit_MISAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_WorkPermit_MISAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_WorkPermit_MISOperationCompleted == null)) {
                this.Fetch_WorkPermit_MISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_WorkPermit_MISOperationCompleted);
            }
            this.InvokeAsync("Fetch_WorkPermit_MIS", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_WorkPermit_MISOperationCompleted, userState);
        }
        
        private void OnFetch_WorkPermit_MISOperationCompleted(object arg) {
            if ((this.Fetch_WorkPermit_MISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_WorkPermit_MISCompleted(this, new Fetch_WorkPermit_MISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchMenu", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchMenu(int parentMenuId, string LoggedInUserID) {
            object[] results = this.Invoke("FetchMenu", new object[] {
                        parentMenuId,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchMenuAsync(int parentMenuId, string LoggedInUserID) {
            this.FetchMenuAsync(parentMenuId, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void FetchMenuAsync(int parentMenuId, string LoggedInUserID, object userState) {
            if ((this.FetchMenuOperationCompleted == null)) {
                this.FetchMenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchMenuOperationCompleted);
            }
            this.InvokeAsync("FetchMenu", new object[] {
                        parentMenuId,
                        LoggedInUserID}, this.FetchMenuOperationCompleted, userState);
        }
        
        private void OnFetchMenuOperationCompleted(object arg) {
            if ((this.FetchMenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchMenuCompleted(this, new FetchMenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RoleMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RoleMaster_CRUD(int RoleID, string Role, string LoggedInUserID, string strAction) {
            object[] results = this.Invoke("RoleMaster_CRUD", new object[] {
                        RoleID,
                        Role,
                        LoggedInUserID,
                        strAction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RoleMaster_CRUDAsync(int RoleID, string Role, string LoggedInUserID, string strAction) {
            this.RoleMaster_CRUDAsync(RoleID, Role, LoggedInUserID, strAction, null);
        }
        
        /// <remarks/>
        public void RoleMaster_CRUDAsync(int RoleID, string Role, string LoggedInUserID, string strAction, object userState) {
            if ((this.RoleMaster_CRUDOperationCompleted == null)) {
                this.RoleMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("RoleMaster_CRUD", new object[] {
                        RoleID,
                        Role,
                        LoggedInUserID,
                        strAction}, this.RoleMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnRoleMaster_CRUDOperationCompleted(object arg) {
            if ((this.RoleMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleMaster_CRUDCompleted(this, new RoleMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Assigned_Role", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Assigned_Role(int RoleID) {
            object[] results = this.Invoke("Fetch_Assigned_Role", new object[] {
                        RoleID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Assigned_RoleAsync(int RoleID) {
            this.Fetch_Assigned_RoleAsync(RoleID, null);
        }
        
        /// <remarks/>
        public void Fetch_Assigned_RoleAsync(int RoleID, object userState) {
            if ((this.Fetch_Assigned_RoleOperationCompleted == null)) {
                this.Fetch_Assigned_RoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Assigned_RoleOperationCompleted);
            }
            this.InvokeAsync("Fetch_Assigned_Role", new object[] {
                        RoleID}, this.Fetch_Assigned_RoleOperationCompleted, userState);
        }
        
        private void OnFetch_Assigned_RoleOperationCompleted(object arg) {
            if ((this.Fetch_Assigned_RoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Assigned_RoleCompleted(this, new Fetch_Assigned_RoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Role_Menu", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Role_Menu() {
            object[] results = this.Invoke("Fetch_Role_Menu", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Role_MenuAsync() {
            this.Fetch_Role_MenuAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_Role_MenuAsync(object userState) {
            if ((this.Fetch_Role_MenuOperationCompleted == null)) {
                this.Fetch_Role_MenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Role_MenuOperationCompleted);
            }
            this.InvokeAsync("Fetch_Role_Menu", new object[0], this.Fetch_Role_MenuOperationCompleted, userState);
        }
        
        private void OnFetch_Role_MenuOperationCompleted(object arg) {
            if ((this.Fetch_Role_MenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Role_MenuCompleted(this, new Fetch_Role_MenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FETCH_Saved_Role_MENU_Rights", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FETCH_Saved_Role_MENU_Rights(int RoleID, int ParentMenuId) {
            object[] results = this.Invoke("FETCH_Saved_Role_MENU_Rights", new object[] {
                        RoleID,
                        ParentMenuId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FETCH_Saved_Role_MENU_RightsAsync(int RoleID, int ParentMenuId) {
            this.FETCH_Saved_Role_MENU_RightsAsync(RoleID, ParentMenuId, null);
        }
        
        /// <remarks/>
        public void FETCH_Saved_Role_MENU_RightsAsync(int RoleID, int ParentMenuId, object userState) {
            if ((this.FETCH_Saved_Role_MENU_RightsOperationCompleted == null)) {
                this.FETCH_Saved_Role_MENU_RightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFETCH_Saved_Role_MENU_RightsOperationCompleted);
            }
            this.InvokeAsync("FETCH_Saved_Role_MENU_Rights", new object[] {
                        RoleID,
                        ParentMenuId}, this.FETCH_Saved_Role_MENU_RightsOperationCompleted, userState);
        }
        
        private void OnFETCH_Saved_Role_MENU_RightsOperationCompleted(object arg) {
            if ((this.FETCH_Saved_Role_MENU_RightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FETCH_Saved_Role_MENU_RightsCompleted(this, new FETCH_Saved_Role_MENU_RightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_RoleMenuRights", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_RoleMenuRights(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData) {
            object[] results = this.Invoke("Insert_RoleMenuRights", new object[] {
                        RoleId,
                        ParentMenuId,
                        LoggedInUserID,
                        strWpSectionHeaderData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_RoleMenuRightsAsync(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData) {
            this.Insert_RoleMenuRightsAsync(RoleId, ParentMenuId, LoggedInUserID, strWpSectionHeaderData, null);
        }
        
        /// <remarks/>
        public void Insert_RoleMenuRightsAsync(int RoleId, int ParentMenuId, string LoggedInUserID, string strWpSectionHeaderData, object userState) {
            if ((this.Insert_RoleMenuRightsOperationCompleted == null)) {
                this.Insert_RoleMenuRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_RoleMenuRightsOperationCompleted);
            }
            this.InvokeAsync("Insert_RoleMenuRights", new object[] {
                        RoleId,
                        ParentMenuId,
                        LoggedInUserID,
                        strWpSectionHeaderData}, this.Insert_RoleMenuRightsOperationCompleted, userState);
        }
        
        private void OnInsert_RoleMenuRightsOperationCompleted(object arg) {
            if ((this.Insert_RoleMenuRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_RoleMenuRightsCompleted(this, new Insert_RoleMenuRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Assigned_Role", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_Assigned_Role(int RoleID, string SelectedEmployees, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_Assigned_Role", new object[] {
                        RoleID,
                        SelectedEmployees,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Assigned_RoleAsync(int RoleID, string SelectedEmployees, string LoggedInUserID) {
            this.Insert_Assigned_RoleAsync(RoleID, SelectedEmployees, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_Assigned_RoleAsync(int RoleID, string SelectedEmployees, string LoggedInUserID, object userState) {
            if ((this.Insert_Assigned_RoleOperationCompleted == null)) {
                this.Insert_Assigned_RoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Assigned_RoleOperationCompleted);
            }
            this.InvokeAsync("Insert_Assigned_Role", new object[] {
                        RoleID,
                        SelectedEmployees,
                        LoggedInUserID}, this.Insert_Assigned_RoleOperationCompleted, userState);
        }
        
        private void OnInsert_Assigned_RoleOperationCompleted(object arg) {
            if ((this.Insert_Assigned_RoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Assigned_RoleCompleted(this, new Insert_Assigned_RoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_RoleListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_RoleListing() {
            object[] results = this.Invoke("Fetch_RoleListing", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_RoleListingAsync() {
            this.Fetch_RoleListingAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_RoleListingAsync(object userState) {
            if ((this.Fetch_RoleListingOperationCompleted == null)) {
                this.Fetch_RoleListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_RoleListingOperationCompleted);
            }
            this.InvokeAsync("Fetch_RoleListing", new object[0], this.Fetch_RoleListingOperationCompleted, userState);
        }
        
        private void OnFetch_RoleListingOperationCompleted(object arg) {
            if ((this.Fetch_RoleListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_RoleListingCompleted(this, new Fetch_RoleListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Chk_Answer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Chk_Answer() {
            object[] results = this.Invoke("Fetch_Chk_Answer", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Chk_AnswerAsync() {
            this.Fetch_Chk_AnswerAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_Chk_AnswerAsync(object userState) {
            if ((this.Fetch_Chk_AnswerOperationCompleted == null)) {
                this.Fetch_Chk_AnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Chk_AnswerOperationCompleted);
            }
            this.InvokeAsync("Fetch_Chk_Answer", new object[0], this.Fetch_Chk_AnswerOperationCompleted, userState);
        }
        
        private void OnFetch_Chk_AnswerOperationCompleted(object arg) {
            if ((this.Fetch_Chk_AnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Chk_AnswerCompleted(this, new Fetch_Chk_AnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_ChecklistConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_ChecklistConfiguration(int Chk_Config_ID, string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID) {
            object[] results = this.Invoke("Update_ChecklistConfiguration", new object[] {
                        Chk_Config_ID,
                        strConfigTitle,
                        strConfigTitleDesc,
                        IsScoreEnable,
                        TotalScore,
                        strXmlChecklist,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_ChecklistConfigurationAsync(int Chk_Config_ID, string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID) {
            this.Update_ChecklistConfigurationAsync(Chk_Config_ID, strConfigTitle, strConfigTitleDesc, IsScoreEnable, TotalScore, strXmlChecklist, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Update_ChecklistConfigurationAsync(int Chk_Config_ID, string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID, object userState) {
            if ((this.Update_ChecklistConfigurationOperationCompleted == null)) {
                this.Update_ChecklistConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_ChecklistConfigurationOperationCompleted);
            }
            this.InvokeAsync("Update_ChecklistConfiguration", new object[] {
                        Chk_Config_ID,
                        strConfigTitle,
                        strConfigTitleDesc,
                        IsScoreEnable,
                        TotalScore,
                        strXmlChecklist,
                        LoggedInUserID}, this.Update_ChecklistConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdate_ChecklistConfigurationOperationCompleted(object arg) {
            if ((this.Update_ChecklistConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_ChecklistConfigurationCompleted(this, new Update_ChecklistConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_ChecklistConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_ChecklistConfiguration(string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID) {
            object[] results = this.Invoke("Insert_ChecklistConfiguration", new object[] {
                        strConfigTitle,
                        strConfigTitleDesc,
                        IsScoreEnable,
                        TotalScore,
                        strXmlChecklist,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_ChecklistConfigurationAsync(string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID) {
            this.Insert_ChecklistConfigurationAsync(strConfigTitle, strConfigTitleDesc, IsScoreEnable, TotalScore, strXmlChecklist, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Insert_ChecklistConfigurationAsync(string strConfigTitle, string strConfigTitleDesc, bool IsScoreEnable, int TotalScore, string strXmlChecklist, string LoggedInUserID, object userState) {
            if ((this.Insert_ChecklistConfigurationOperationCompleted == null)) {
                this.Insert_ChecklistConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_ChecklistConfigurationOperationCompleted);
            }
            this.InvokeAsync("Insert_ChecklistConfiguration", new object[] {
                        strConfigTitle,
                        strConfigTitleDesc,
                        IsScoreEnable,
                        TotalScore,
                        strXmlChecklist,
                        LoggedInUserID}, this.Insert_ChecklistConfigurationOperationCompleted, userState);
        }
        
        private void OnInsert_ChecklistConfigurationOperationCompleted(object arg) {
            if ((this.Insert_ChecklistConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_ChecklistConfigurationCompleted(this, new Insert_ChecklistConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Bind_ChecklistConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Bind_ChecklistConfiguration(int CHK_ConfigID) {
            object[] results = this.Invoke("Bind_ChecklistConfiguration", new object[] {
                        CHK_ConfigID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Bind_ChecklistConfigurationAsync(int CHK_ConfigID) {
            this.Bind_ChecklistConfigurationAsync(CHK_ConfigID, null);
        }
        
        /// <remarks/>
        public void Bind_ChecklistConfigurationAsync(int CHK_ConfigID, object userState) {
            if ((this.Bind_ChecklistConfigurationOperationCompleted == null)) {
                this.Bind_ChecklistConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBind_ChecklistConfigurationOperationCompleted);
            }
            this.InvokeAsync("Bind_ChecklistConfiguration", new object[] {
                        CHK_ConfigID}, this.Bind_ChecklistConfigurationOperationCompleted, userState);
        }
        
        private void OnBind_ChecklistConfigurationOperationCompleted(object arg) {
            if ((this.Bind_ChecklistConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Bind_ChecklistConfigurationCompleted(this, new Bind_ChecklistConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_MyChecklist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_MyChecklist(string LoggedInUserID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_MyChecklist", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_MyChecklistAsync(string LoggedInUserID, string From_Date, string To_Date) {
            this.Fetch_MyChecklistAsync(LoggedInUserID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_MyChecklistAsync(string LoggedInUserID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_MyChecklistOperationCompleted == null)) {
                this.Fetch_MyChecklistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_MyChecklistOperationCompleted);
            }
            this.InvokeAsync("Fetch_MyChecklist", new object[] {
                        LoggedInUserID,
                        From_Date,
                        To_Date}, this.Fetch_MyChecklistOperationCompleted, userState);
        }
        
        private void OnFetch_MyChecklistOperationCompleted(object arg) {
            if ((this.Fetch_MyChecklistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_MyChecklistCompleted(this, new Fetch_MyChecklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_User_UserGroupListCompletedEventHandler(object sender, Fetch_User_UserGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_User_UserGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_User_UserGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_CompanyCompletedEventHandler(object sender, Fetch_CompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_GatePassConfigurationCompletedEventHandler(object sender, Insert_GatePassConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_GatePassConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_GatePassConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_GatePassConfigurationCompletedEventHandler(object sender, Fetch_GatePassConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_GatePassConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_GatePassConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_GatePassConfigurationCompletedEventHandler(object sender, Bind_GatePassConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_GatePassConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_GatePassConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GatePassHeader_CRUDCompletedEventHandler(object sender, GatePassHeader_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GatePassHeader_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GatePassHeader_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GatePassType_CRUDCompletedEventHandler(object sender, GatePassType_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GatePassType_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GatePassType_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GatePassTerm_CRUDCompletedEventHandler(object sender, GatePassTerm_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GatePassTerm_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GatePassTerm_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Update_GatePassConfigurationCompletedEventHandler(object sender, Update_GatePassConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_GatePassConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_GatePassConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_GatePassRequestDetailsCompletedEventHandler(object sender, Bind_GatePassRequestDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_GatePassRequestDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_GatePassRequestDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_GatePassRequestCompletedEventHandler(object sender, Insert_GatePassRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_GatePassRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_GatePassRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MyRequestGatePassCompletedEventHandler(object sender, Fetch_MyRequestGatePassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MyRequestGatePassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MyRequestGatePassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MyActionableGatePassCompletedEventHandler(object sender, Fetch_MyActionableGatePassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MyActionableGatePassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MyActionableGatePassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_GatePassRequest_Approval_DetailsCompletedEventHandler(object sender, Fetch_GatePassRequest_Approval_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_GatePassRequest_Approval_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_GatePassRequest_Approval_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateAction_GatePassRequestCompletedEventHandler(object sender, UpdateAction_GatePassRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAction_GatePassRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAction_GatePassRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void User_LoginCompletedEventHandler(object sender, User_LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class User_LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal User_LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Employee_CRUDCompletedEventHandler(object sender, Employee_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Employee_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Employee_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void fetchStoreCompletedEventHandler(object sender, fetchStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Retailer_CRUDCompletedEventHandler(object sender, Retailer_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Retailer_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Retailer_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Event_InsertCompletedEventHandler(object sender, Event_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EventDetails_CRUDCompletedEventHandler(object sender, EventDetails_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EventDetails_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EventDetails_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void bindEventDetailsCompletedEventHandler(object sender, bindEventDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bindEventDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bindEventDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_CustomerDetailsCompletedEventHandler(object sender, Get_CustomerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_CustomerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_CustomerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_EventQuestionsCompletedEventHandler(object sender, Get_EventQuestionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_EventQuestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_EventQuestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Event_QuestionIUCompletedEventHandler(object sender, Event_QuestionIUCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_QuestionIUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_QuestionIUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MIS_ReportCompletedEventHandler(object sender, Fetch_MIS_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MIS_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MIS_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Event_UpdateCompletedEventHandler(object sender, Event_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Event_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Event_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetEventListCompletedEventHandler(object sender, GetEventListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MIS_Report_ExcelCompletedEventHandler(object sender, Fetch_MIS_Report_ExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MIS_Report_ExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MIS_Report_ExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ImportRetailerCompletedEventHandler(object sender, ImportRetailerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportRetailerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportRetailerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FetchBaggageReportCompletedEventHandler(object sender, FetchBaggageReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBaggageReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBaggageReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FetchPowerBankReportCompletedEventHandler(object sender, FetchPowerBankReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchPowerBankReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchPowerBankReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_WorkPermitConfigurationCompletedEventHandler(object sender, Insert_WorkPermitConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_WorkPermitConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_WorkPermitConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_AnswerCompletedEventHandler(object sender, Fetch_AnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_AnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_AnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_WorkPermitConfigurationCompletedEventHandler(object sender, Fetch_WorkPermitConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_WorkPermitConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_WorkPermitConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_WorkPermitConfigurationCompletedEventHandler(object sender, Bind_WorkPermitConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_WorkPermitConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_WorkPermitConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_WorkPermitRequestDetailsCompletedEventHandler(object sender, Bind_WorkPermitRequestDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_WorkPermitRequestDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_WorkPermitRequestDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_WorkPermitRequestCompletedEventHandler(object sender, Insert_WorkPermitRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_WorkPermitRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_WorkPermitRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_WorkPermitRequestSavedDataCompletedEventHandler(object sender, Fetch_WorkPermitRequestSavedDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_WorkPermitRequestSavedDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_WorkPermitRequestSavedDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Update_WorkPermitRequestCompletedEventHandler(object sender, Update_WorkPermitRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_WorkPermitRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_WorkPermitRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MyRequestWorkPermitCompletedEventHandler(object sender, Fetch_MyRequestWorkPermitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MyRequestWorkPermitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MyRequestWorkPermitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MyActionableWorkPermitCompletedEventHandler(object sender, Fetch_MyActionableWorkPermitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MyActionableWorkPermitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MyActionableWorkPermitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_DashboardCountCompletedEventHandler(object sender, Fetch_DashboardCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_DashboardCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_DashboardCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Delete_GatePassConfigurationCompletedEventHandler(object sender, Delete_GatePassConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Delete_GatePassConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Delete_GatePassConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Update_WorkPermitConfigurationCompletedEventHandler(object sender, Update_WorkPermitConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_WorkPermitConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_WorkPermitConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_WorkPermitSavedConfigurationCompletedEventHandler(object sender, Bind_WorkPermitSavedConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_WorkPermitSavedConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_WorkPermitSavedConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_GatePass_MISCompletedEventHandler(object sender, Fetch_GatePass_MISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_GatePass_MISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_GatePass_MISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_WorkPermit_MISCompletedEventHandler(object sender, Fetch_WorkPermit_MISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_WorkPermit_MISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_WorkPermit_MISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FetchMenuCompletedEventHandler(object sender, FetchMenuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchMenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchMenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RoleMaster_CRUDCompletedEventHandler(object sender, RoleMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_Assigned_RoleCompletedEventHandler(object sender, Fetch_Assigned_RoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Assigned_RoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Assigned_RoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_Role_MenuCompletedEventHandler(object sender, Fetch_Role_MenuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Role_MenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Role_MenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FETCH_Saved_Role_MENU_RightsCompletedEventHandler(object sender, FETCH_Saved_Role_MENU_RightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FETCH_Saved_Role_MENU_RightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FETCH_Saved_Role_MENU_RightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_RoleMenuRightsCompletedEventHandler(object sender, Insert_RoleMenuRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_RoleMenuRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_RoleMenuRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_Assigned_RoleCompletedEventHandler(object sender, Insert_Assigned_RoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Assigned_RoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Assigned_RoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_RoleListingCompletedEventHandler(object sender, Fetch_RoleListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_RoleListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_RoleListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_Chk_AnswerCompletedEventHandler(object sender, Fetch_Chk_AnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Chk_AnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Chk_AnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Update_ChecklistConfigurationCompletedEventHandler(object sender, Update_ChecklistConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_ChecklistConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_ChecklistConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_ChecklistConfigurationCompletedEventHandler(object sender, Insert_ChecklistConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_ChecklistConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_ChecklistConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Bind_ChecklistConfigurationCompletedEventHandler(object sender, Bind_ChecklistConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bind_ChecklistConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Bind_ChecklistConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Fetch_MyChecklistCompletedEventHandler(object sender, Fetch_MyChecklistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_MyChecklistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_MyChecklistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591