//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Upkeep_v3.CocktailWorld_Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CocktailWorld_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CocktailWorld_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Flr6DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_FLR3LegalReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CashMemoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Flr4DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CostValuation_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Sales_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Purchase_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Transfer_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Cost_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_SlowMovingQty_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_NonMovingQty_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CocktailSale_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_BulkLitre_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_BaseQuantity_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Abstract_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_BrandSummary_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Chatai_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_OptimumQuantity_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_BrandOpeningStockOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_BrandsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_SupplierOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_BrandCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_CocktailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_CocktailCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_SaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_PurchaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_AutoBillingOperationCompleted;
        
        private System.Threading.SendOrPostCallback Import_TransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback Save_WashDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback Save_BrandCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_AssignBrandCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Spr_CRUD_CocktailCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Validate_NegativeStockNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchTaxDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrandOpeningMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseDetailsMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferDetailsMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleDetailsMaster_CrudOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleMaster_CrudOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillBook_CrudOperationCompleted;
        
        private System.Threading.SendOrPostCallback CategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Category_BrandOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Brand_OpeningOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_CategorySizeLinkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CocktailMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CocktailBrandsMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBrandSizeLinkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrandMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SizeMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubCategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PermitMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Save_CategorySizeLinkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback License_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SupplierMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Test_Dataset_RDLCOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CocktailWorld_Service() {
            this.Url = global::Upkeep_v3.Properties.Settings.Default.Upkeep_v3_CocktailWorld_Service_CocktailWorld_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event Fetch_Flr6DataCompletedEventHandler Fetch_Flr6DataCompleted;
        
        /// <remarks/>
        public event Fetch_FLR3LegalReportCompletedEventHandler Fetch_FLR3LegalReportCompleted;
        
        /// <remarks/>
        public event Fetch_CashMemoCompletedEventHandler Fetch_CashMemoCompleted;
        
        /// <remarks/>
        public event Fetch_Flr4DataCompletedEventHandler Fetch_Flr4DataCompleted;
        
        /// <remarks/>
        public event Fetch_CostValuation_ReportCompletedEventHandler Fetch_CostValuation_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Sales_ReportCompletedEventHandler Fetch_Sales_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Purchase_ReportCompletedEventHandler Fetch_Purchase_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Transfer_ReportCompletedEventHandler Fetch_Transfer_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Cost_ReportCompletedEventHandler Fetch_Cost_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_SlowMovingQty_ReportCompletedEventHandler Fetch_SlowMovingQty_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_NonMovingQty_ReportCompletedEventHandler Fetch_NonMovingQty_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_CocktailSale_ReportCompletedEventHandler Fetch_CocktailSale_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_BulkLitre_ReportCompletedEventHandler Fetch_BulkLitre_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_BaseQuantity_ReportCompletedEventHandler Fetch_BaseQuantity_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Abstract_ReportCompletedEventHandler Fetch_Abstract_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_BrandSummary_ReportCompletedEventHandler Fetch_BrandSummary_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Chatai_ReportCompletedEventHandler Fetch_Chatai_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_OptimumQuantity_ReportCompletedEventHandler Fetch_OptimumQuantity_ReportCompleted;
        
        /// <remarks/>
        public event Import_BrandOpeningStockCompletedEventHandler Import_BrandOpeningStockCompleted;
        
        /// <remarks/>
        public event Import_BrandsCompletedEventHandler Import_BrandsCompleted;
        
        /// <remarks/>
        public event Import_SupplierCompletedEventHandler Import_SupplierCompleted;
        
        /// <remarks/>
        public event Import_BrandCodeCompletedEventHandler Import_BrandCodeCompleted;
        
        /// <remarks/>
        public event Import_CocktailCompletedEventHandler Import_CocktailCompleted;
        
        /// <remarks/>
        public event Import_CocktailCodeCompletedEventHandler Import_CocktailCodeCompleted;
        
        /// <remarks/>
        public event Import_SaleCompletedEventHandler Import_SaleCompleted;
        
        /// <remarks/>
        public event Import_PurchaseCompletedEventHandler Import_PurchaseCompleted;
        
        /// <remarks/>
        public event Import_AutoBillingCompletedEventHandler Import_AutoBillingCompleted;
        
        /// <remarks/>
        public event Import_TransferCompletedEventHandler Import_TransferCompleted;
        
        /// <remarks/>
        public event Save_WashDayCompletedEventHandler Save_WashDayCompleted;
        
        /// <remarks/>
        public event Save_BrandCodeCompletedEventHandler Save_BrandCodeCompleted;
        
        /// <remarks/>
        public event Fetch_AssignBrandCodeCompletedEventHandler Fetch_AssignBrandCodeCompleted;
        
        /// <remarks/>
        public event Spr_CRUD_CocktailCodeCompletedEventHandler Spr_CRUD_CocktailCodeCompleted;
        
        /// <remarks/>
        public event Validate_NegativeStockNewCompletedEventHandler Validate_NegativeStockNewCompleted;
        
        /// <remarks/>
        public event FetchTaxDetailsCompletedEventHandler FetchTaxDetailsCompleted;
        
        /// <remarks/>
        public event BrandOpeningMaster_CRUDCompletedEventHandler BrandOpeningMaster_CRUDCompleted;
        
        /// <remarks/>
        public event PurchaseMaster_CRUDCompletedEventHandler PurchaseMaster_CRUDCompleted;
        
        /// <remarks/>
        public event TransferMaster_CRUDCompletedEventHandler TransferMaster_CRUDCompleted;
        
        /// <remarks/>
        public event PurchaseDetailsMaster_CRUDCompletedEventHandler PurchaseDetailsMaster_CRUDCompleted;
        
        /// <remarks/>
        public event TransferDetailsMaster_CRUDCompletedEventHandler TransferDetailsMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SaleDetailsMaster_CrudCompletedEventHandler SaleDetailsMaster_CrudCompleted;
        
        /// <remarks/>
        public event SaleMaster_CrudCompletedEventHandler SaleMaster_CrudCompleted;
        
        /// <remarks/>
        public event BillBook_CrudCompletedEventHandler BillBook_CrudCompleted;
        
        /// <remarks/>
        public event CategoryMaster_CRUDCompletedEventHandler CategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_Category_BrandCompletedEventHandler Fetch_Category_BrandCompleted;
        
        /// <remarks/>
        public event Fetch_Brand_OpeningCompletedEventHandler Fetch_Brand_OpeningCompleted;
        
        /// <remarks/>
        public event Fetch_CategorySizeLinkupCompletedEventHandler Fetch_CategorySizeLinkupCompleted;
        
        /// <remarks/>
        public event CocktailMaster_CRUDCompletedEventHandler CocktailMaster_CRUDCompleted;
        
        /// <remarks/>
        public event CocktailBrandsMaster_CRUDCompletedEventHandler CocktailBrandsMaster_CRUDCompleted;
        
        /// <remarks/>
        public event FetchBrandSizeLinkupCompletedEventHandler FetchBrandSizeLinkupCompleted;
        
        /// <remarks/>
        public event BrandMaster_CRUDCompletedEventHandler BrandMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SizeMaster_CRUDCompletedEventHandler SizeMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SubCategoryMaster_CRUDCompletedEventHandler SubCategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event PermitMaster_CRUDCompletedEventHandler PermitMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Save_CategorySizeLinkupCompletedEventHandler Save_CategorySizeLinkupCompleted;
        
        /// <remarks/>
        public event License_CRUDCompletedEventHandler License_CRUDCompleted;
        
        /// <remarks/>
        public event SupplierMaster_CRUDCompletedEventHandler SupplierMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Fetch_Test_Dataset_RDLCCompletedEventHandler Fetch_Test_Dataset_RDLCCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Flr6Data", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Flr6Data(int Company_ID, string Date, string License_ID) {
            object[] results = this.Invoke("Fetch_Flr6Data", new object[] {
                        Company_ID,
                        Date,
                        License_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Flr6DataAsync(int Company_ID, string Date, string License_ID) {
            this.Fetch_Flr6DataAsync(Company_ID, Date, License_ID, null);
        }
        
        /// <remarks/>
        public void Fetch_Flr6DataAsync(int Company_ID, string Date, string License_ID, object userState) {
            if ((this.Fetch_Flr6DataOperationCompleted == null)) {
                this.Fetch_Flr6DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Flr6DataOperationCompleted);
            }
            this.InvokeAsync("Fetch_Flr6Data", new object[] {
                        Company_ID,
                        Date,
                        License_ID}, this.Fetch_Flr6DataOperationCompleted, userState);
        }
        
        private void OnFetch_Flr6DataOperationCompleted(object arg) {
            if ((this.Fetch_Flr6DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Flr6DataCompleted(this, new Fetch_Flr6DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_FLR3LegalReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_FLR3LegalReport(string Company_ID, string Date, string License_ID) {
            object[] results = this.Invoke("Fetch_FLR3LegalReport", new object[] {
                        Company_ID,
                        Date,
                        License_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_FLR3LegalReportAsync(string Company_ID, string Date, string License_ID) {
            this.Fetch_FLR3LegalReportAsync(Company_ID, Date, License_ID, null);
        }
        
        /// <remarks/>
        public void Fetch_FLR3LegalReportAsync(string Company_ID, string Date, string License_ID, object userState) {
            if ((this.Fetch_FLR3LegalReportOperationCompleted == null)) {
                this.Fetch_FLR3LegalReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_FLR3LegalReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_FLR3LegalReport", new object[] {
                        Company_ID,
                        Date,
                        License_ID}, this.Fetch_FLR3LegalReportOperationCompleted, userState);
        }
        
        private void OnFetch_FLR3LegalReportOperationCompleted(object arg) {
            if ((this.Fetch_FLR3LegalReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_FLR3LegalReportCompleted(this, new Fetch_FLR3LegalReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CashMemo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CashMemo(int License_ID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_CashMemo", new object[] {
                        License_ID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CashMemoAsync(int License_ID, string From_Date, string To_Date) {
            this.Fetch_CashMemoAsync(License_ID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_CashMemoAsync(int License_ID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_CashMemoOperationCompleted == null)) {
                this.Fetch_CashMemoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CashMemoOperationCompleted);
            }
            this.InvokeAsync("Fetch_CashMemo", new object[] {
                        License_ID,
                        From_Date,
                        To_Date}, this.Fetch_CashMemoOperationCompleted, userState);
        }
        
        private void OnFetch_CashMemoOperationCompleted(object arg) {
            if ((this.Fetch_CashMemoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CashMemoCompleted(this, new Fetch_CashMemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Flr4Data", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Flr4Data() {
            object[] results = this.Invoke("Fetch_Flr4Data", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Flr4DataAsync() {
            this.Fetch_Flr4DataAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_Flr4DataAsync(object userState) {
            if ((this.Fetch_Flr4DataOperationCompleted == null)) {
                this.Fetch_Flr4DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Flr4DataOperationCompleted);
            }
            this.InvokeAsync("Fetch_Flr4Data", new object[0], this.Fetch_Flr4DataOperationCompleted, userState);
        }
        
        private void OnFetch_Flr4DataOperationCompleted(object arg) {
            if ((this.Fetch_Flr4DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Flr4DataCompleted(this, new Fetch_Flr4DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CostValuation_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CostValuation_Report(int License, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_CostValuation_Report", new object[] {
                        License,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CostValuation_ReportAsync(int License, string From_Date, string To_Date) {
            this.Fetch_CostValuation_ReportAsync(License, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_CostValuation_ReportAsync(int License, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_CostValuation_ReportOperationCompleted == null)) {
                this.Fetch_CostValuation_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CostValuation_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_CostValuation_Report", new object[] {
                        License,
                        From_Date,
                        To_Date}, this.Fetch_CostValuation_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_CostValuation_ReportOperationCompleted(object arg) {
            if ((this.Fetch_CostValuation_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CostValuation_ReportCompleted(this, new Fetch_CostValuation_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Sales_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Sales_Report(string License, string From_Date, string To_Date, string Brand, string Category) {
            object[] results = this.Invoke("Fetch_Sales_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Sales_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category) {
            this.Fetch_Sales_ReportAsync(License, From_Date, To_Date, Brand, Category, null);
        }
        
        /// <remarks/>
        public void Fetch_Sales_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category, object userState) {
            if ((this.Fetch_Sales_ReportOperationCompleted == null)) {
                this.Fetch_Sales_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Sales_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Sales_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category}, this.Fetch_Sales_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Sales_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Sales_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Sales_ReportCompleted(this, new Fetch_Sales_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Purchase_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Purchase_Report(string License, string From_Date, string To_Date, string Brand, string Category) {
            object[] results = this.Invoke("Fetch_Purchase_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Purchase_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category) {
            this.Fetch_Purchase_ReportAsync(License, From_Date, To_Date, Brand, Category, null);
        }
        
        /// <remarks/>
        public void Fetch_Purchase_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category, object userState) {
            if ((this.Fetch_Purchase_ReportOperationCompleted == null)) {
                this.Fetch_Purchase_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Purchase_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Purchase_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category}, this.Fetch_Purchase_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Purchase_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Purchase_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Purchase_ReportCompleted(this, new Fetch_Purchase_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Transfer_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Transfer_Report(string License, string From_Date, string To_Date, string Brand, string Category) {
            object[] results = this.Invoke("Fetch_Transfer_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Transfer_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category) {
            this.Fetch_Transfer_ReportAsync(License, From_Date, To_Date, Brand, Category, null);
        }
        
        /// <remarks/>
        public void Fetch_Transfer_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category, object userState) {
            if ((this.Fetch_Transfer_ReportOperationCompleted == null)) {
                this.Fetch_Transfer_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Transfer_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Transfer_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category}, this.Fetch_Transfer_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Transfer_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Transfer_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Transfer_ReportCompleted(this, new Fetch_Transfer_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Cost_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Cost_Report(string License, string From_Date, string To_Date, string Brand, string Category) {
            object[] results = this.Invoke("Fetch_Cost_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Cost_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category) {
            this.Fetch_Cost_ReportAsync(License, From_Date, To_Date, Brand, Category, null);
        }
        
        /// <remarks/>
        public void Fetch_Cost_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category, object userState) {
            if ((this.Fetch_Cost_ReportOperationCompleted == null)) {
                this.Fetch_Cost_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Cost_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Cost_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category}, this.Fetch_Cost_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Cost_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Cost_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Cost_ReportCompleted(this, new Fetch_Cost_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_SlowMovingQty_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_SlowMovingQty_Report(int License_ID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_SlowMovingQty_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_SlowMovingQty_ReportAsync(int License_ID, string From_Date, string To_Date) {
            this.Fetch_SlowMovingQty_ReportAsync(License_ID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_SlowMovingQty_ReportAsync(int License_ID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_SlowMovingQty_ReportOperationCompleted == null)) {
                this.Fetch_SlowMovingQty_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_SlowMovingQty_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_SlowMovingQty_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date}, this.Fetch_SlowMovingQty_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_SlowMovingQty_ReportOperationCompleted(object arg) {
            if ((this.Fetch_SlowMovingQty_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_SlowMovingQty_ReportCompleted(this, new Fetch_SlowMovingQty_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_NonMovingQty_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_NonMovingQty_Report(int License_ID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_NonMovingQty_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_NonMovingQty_ReportAsync(int License_ID, string From_Date, string To_Date) {
            this.Fetch_NonMovingQty_ReportAsync(License_ID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_NonMovingQty_ReportAsync(int License_ID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_NonMovingQty_ReportOperationCompleted == null)) {
                this.Fetch_NonMovingQty_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_NonMovingQty_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_NonMovingQty_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date}, this.Fetch_NonMovingQty_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_NonMovingQty_ReportOperationCompleted(object arg) {
            if ((this.Fetch_NonMovingQty_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_NonMovingQty_ReportCompleted(this, new Fetch_NonMovingQty_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CocktailSale_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CocktailSale_Report(string License, string From_Date, string To_Date, string Brand, string Category) {
            object[] results = this.Invoke("Fetch_CocktailSale_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CocktailSale_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category) {
            this.Fetch_CocktailSale_ReportAsync(License, From_Date, To_Date, Brand, Category, null);
        }
        
        /// <remarks/>
        public void Fetch_CocktailSale_ReportAsync(string License, string From_Date, string To_Date, string Brand, string Category, object userState) {
            if ((this.Fetch_CocktailSale_ReportOperationCompleted == null)) {
                this.Fetch_CocktailSale_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CocktailSale_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_CocktailSale_Report", new object[] {
                        License,
                        From_Date,
                        To_Date,
                        Brand,
                        Category}, this.Fetch_CocktailSale_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_CocktailSale_ReportOperationCompleted(object arg) {
            if ((this.Fetch_CocktailSale_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CocktailSale_ReportCompleted(this, new Fetch_CocktailSale_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_BulkLitre_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_BulkLitre_Report(int License_ID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_BulkLitre_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_BulkLitre_ReportAsync(int License_ID, string From_Date, string To_Date) {
            this.Fetch_BulkLitre_ReportAsync(License_ID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_BulkLitre_ReportAsync(int License_ID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_BulkLitre_ReportOperationCompleted == null)) {
                this.Fetch_BulkLitre_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_BulkLitre_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_BulkLitre_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date}, this.Fetch_BulkLitre_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_BulkLitre_ReportOperationCompleted(object arg) {
            if ((this.Fetch_BulkLitre_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_BulkLitre_ReportCompleted(this, new Fetch_BulkLitre_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_BaseQuantity_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_BaseQuantity_Report(int License_ID, string Date) {
            object[] results = this.Invoke("Fetch_BaseQuantity_Report", new object[] {
                        License_ID,
                        Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_BaseQuantity_ReportAsync(int License_ID, string Date) {
            this.Fetch_BaseQuantity_ReportAsync(License_ID, Date, null);
        }
        
        /// <remarks/>
        public void Fetch_BaseQuantity_ReportAsync(int License_ID, string Date, object userState) {
            if ((this.Fetch_BaseQuantity_ReportOperationCompleted == null)) {
                this.Fetch_BaseQuantity_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_BaseQuantity_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_BaseQuantity_Report", new object[] {
                        License_ID,
                        Date}, this.Fetch_BaseQuantity_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_BaseQuantity_ReportOperationCompleted(object arg) {
            if ((this.Fetch_BaseQuantity_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_BaseQuantity_ReportCompleted(this, new Fetch_BaseQuantity_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Abstract_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Abstract_Report(int License_ID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_Abstract_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Abstract_ReportAsync(int License_ID, string From_Date, string To_Date) {
            this.Fetch_Abstract_ReportAsync(License_ID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_Abstract_ReportAsync(int License_ID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_Abstract_ReportOperationCompleted == null)) {
                this.Fetch_Abstract_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Abstract_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Abstract_Report", new object[] {
                        License_ID,
                        From_Date,
                        To_Date}, this.Fetch_Abstract_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Abstract_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Abstract_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Abstract_ReportCompleted(this, new Fetch_Abstract_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_BrandSummary_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_BrandSummary_Report(int LicenseID, string From_Date, string To_Date, bool Brandwise, bool Categorywise, bool SubCategorywise, bool IsBulkLitre) {
            object[] results = this.Invoke("Fetch_BrandSummary_Report", new object[] {
                        LicenseID,
                        From_Date,
                        To_Date,
                        Brandwise,
                        Categorywise,
                        SubCategorywise,
                        IsBulkLitre});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_BrandSummary_ReportAsync(int LicenseID, string From_Date, string To_Date, bool Brandwise, bool Categorywise, bool SubCategorywise, bool IsBulkLitre) {
            this.Fetch_BrandSummary_ReportAsync(LicenseID, From_Date, To_Date, Brandwise, Categorywise, SubCategorywise, IsBulkLitre, null);
        }
        
        /// <remarks/>
        public void Fetch_BrandSummary_ReportAsync(int LicenseID, string From_Date, string To_Date, bool Brandwise, bool Categorywise, bool SubCategorywise, bool IsBulkLitre, object userState) {
            if ((this.Fetch_BrandSummary_ReportOperationCompleted == null)) {
                this.Fetch_BrandSummary_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_BrandSummary_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_BrandSummary_Report", new object[] {
                        LicenseID,
                        From_Date,
                        To_Date,
                        Brandwise,
                        Categorywise,
                        SubCategorywise,
                        IsBulkLitre}, this.Fetch_BrandSummary_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_BrandSummary_ReportOperationCompleted(object arg) {
            if ((this.Fetch_BrandSummary_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_BrandSummary_ReportCompleted(this, new Fetch_BrandSummary_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Chatai_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Chatai_Report(int LicenseID, string From_Date, string To_Date) {
            object[] results = this.Invoke("Fetch_Chatai_Report", new object[] {
                        LicenseID,
                        From_Date,
                        To_Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Chatai_ReportAsync(int LicenseID, string From_Date, string To_Date) {
            this.Fetch_Chatai_ReportAsync(LicenseID, From_Date, To_Date, null);
        }
        
        /// <remarks/>
        public void Fetch_Chatai_ReportAsync(int LicenseID, string From_Date, string To_Date, object userState) {
            if ((this.Fetch_Chatai_ReportOperationCompleted == null)) {
                this.Fetch_Chatai_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Chatai_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Chatai_Report", new object[] {
                        LicenseID,
                        From_Date,
                        To_Date}, this.Fetch_Chatai_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Chatai_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Chatai_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Chatai_ReportCompleted(this, new Fetch_Chatai_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_OptimumQuantity_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_OptimumQuantity_Report(int License_ID, string Date) {
            object[] results = this.Invoke("Fetch_OptimumQuantity_Report", new object[] {
                        License_ID,
                        Date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_OptimumQuantity_ReportAsync(int License_ID, string Date) {
            this.Fetch_OptimumQuantity_ReportAsync(License_ID, Date, null);
        }
        
        /// <remarks/>
        public void Fetch_OptimumQuantity_ReportAsync(int License_ID, string Date, object userState) {
            if ((this.Fetch_OptimumQuantity_ReportOperationCompleted == null)) {
                this.Fetch_OptimumQuantity_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_OptimumQuantity_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_OptimumQuantity_Report", new object[] {
                        License_ID,
                        Date}, this.Fetch_OptimumQuantity_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_OptimumQuantity_ReportOperationCompleted(object arg) {
            if ((this.Fetch_OptimumQuantity_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_OptimumQuantity_ReportCompleted(this, new Fetch_OptimumQuantity_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_BrandOpeningStock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_BrandOpeningStock(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_BrandOpeningStock", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_BrandOpeningStockAsync(int CompanyID, string LoggedInUserID) {
            this.Import_BrandOpeningStockAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_BrandOpeningStockAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_BrandOpeningStockOperationCompleted == null)) {
                this.Import_BrandOpeningStockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_BrandOpeningStockOperationCompleted);
            }
            this.InvokeAsync("Import_BrandOpeningStock", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_BrandOpeningStockOperationCompleted, userState);
        }
        
        private void OnImport_BrandOpeningStockOperationCompleted(object arg) {
            if ((this.Import_BrandOpeningStockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_BrandOpeningStockCompleted(this, new Import_BrandOpeningStockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Brands", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Brands(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Brands", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_BrandsAsync(int CompanyID, string LoggedInUserID) {
            this.Import_BrandsAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_BrandsAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_BrandsOperationCompleted == null)) {
                this.Import_BrandsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_BrandsOperationCompleted);
            }
            this.InvokeAsync("Import_Brands", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_BrandsOperationCompleted, userState);
        }
        
        private void OnImport_BrandsOperationCompleted(object arg) {
            if ((this.Import_BrandsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_BrandsCompleted(this, new Import_BrandsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Supplier", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Supplier(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Supplier", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_SupplierAsync(int CompanyID, string LoggedInUserID) {
            this.Import_SupplierAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_SupplierAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_SupplierOperationCompleted == null)) {
                this.Import_SupplierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_SupplierOperationCompleted);
            }
            this.InvokeAsync("Import_Supplier", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_SupplierOperationCompleted, userState);
        }
        
        private void OnImport_SupplierOperationCompleted(object arg) {
            if ((this.Import_SupplierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_SupplierCompleted(this, new Import_SupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_BrandCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_BrandCode(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_BrandCode", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_BrandCodeAsync(int CompanyID, string LoggedInUserID) {
            this.Import_BrandCodeAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_BrandCodeAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_BrandCodeOperationCompleted == null)) {
                this.Import_BrandCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_BrandCodeOperationCompleted);
            }
            this.InvokeAsync("Import_BrandCode", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_BrandCodeOperationCompleted, userState);
        }
        
        private void OnImport_BrandCodeOperationCompleted(object arg) {
            if ((this.Import_BrandCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_BrandCodeCompleted(this, new Import_BrandCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Cocktail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Cocktail(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Cocktail", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_CocktailAsync(int CompanyID, string LoggedInUserID) {
            this.Import_CocktailAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_CocktailAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_CocktailOperationCompleted == null)) {
                this.Import_CocktailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_CocktailOperationCompleted);
            }
            this.InvokeAsync("Import_Cocktail", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_CocktailOperationCompleted, userState);
        }
        
        private void OnImport_CocktailOperationCompleted(object arg) {
            if ((this.Import_CocktailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_CocktailCompleted(this, new Import_CocktailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_CocktailCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_CocktailCode(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_CocktailCode", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_CocktailCodeAsync(int CompanyID, string LoggedInUserID) {
            this.Import_CocktailCodeAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_CocktailCodeAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_CocktailCodeOperationCompleted == null)) {
                this.Import_CocktailCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_CocktailCodeOperationCompleted);
            }
            this.InvokeAsync("Import_CocktailCode", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_CocktailCodeOperationCompleted, userState);
        }
        
        private void OnImport_CocktailCodeOperationCompleted(object arg) {
            if ((this.Import_CocktailCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_CocktailCodeCompleted(this, new Import_CocktailCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Sale", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Sale(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Sale", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_SaleAsync(int CompanyID, string LoggedInUserID) {
            this.Import_SaleAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_SaleAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_SaleOperationCompleted == null)) {
                this.Import_SaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_SaleOperationCompleted);
            }
            this.InvokeAsync("Import_Sale", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_SaleOperationCompleted, userState);
        }
        
        private void OnImport_SaleOperationCompleted(object arg) {
            if ((this.Import_SaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_SaleCompleted(this, new Import_SaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Purchase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Purchase(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Purchase", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_PurchaseAsync(int CompanyID, string LoggedInUserID) {
            this.Import_PurchaseAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_PurchaseAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_PurchaseOperationCompleted == null)) {
                this.Import_PurchaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_PurchaseOperationCompleted);
            }
            this.InvokeAsync("Import_Purchase", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_PurchaseOperationCompleted, userState);
        }
        
        private void OnImport_PurchaseOperationCompleted(object arg) {
            if ((this.Import_PurchaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_PurchaseCompleted(this, new Import_PurchaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_AutoBilling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_AutoBilling(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_AutoBilling", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_AutoBillingAsync(int CompanyID, string LoggedInUserID) {
            this.Import_AutoBillingAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_AutoBillingAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_AutoBillingOperationCompleted == null)) {
                this.Import_AutoBillingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_AutoBillingOperationCompleted);
            }
            this.InvokeAsync("Import_AutoBilling", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_AutoBillingOperationCompleted, userState);
        }
        
        private void OnImport_AutoBillingOperationCompleted(object arg) {
            if ((this.Import_AutoBillingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_AutoBillingCompleted(this, new Import_AutoBillingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Transfer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Import_Transfer(int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Import_Transfer", new object[] {
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Import_TransferAsync(int CompanyID, string LoggedInUserID) {
            this.Import_TransferAsync(CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Import_TransferAsync(int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Import_TransferOperationCompleted == null)) {
                this.Import_TransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImport_TransferOperationCompleted);
            }
            this.InvokeAsync("Import_Transfer", new object[] {
                        CompanyID,
                        LoggedInUserID}, this.Import_TransferOperationCompleted, userState);
        }
        
        private void OnImport_TransferOperationCompleted(object arg) {
            if ((this.Import_TransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Import_TransferCompleted(this, new Import_TransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Save_WashDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Save_WashDay(int License_ID, string From_Date, string To_Date, bool sale) {
            object[] results = this.Invoke("Save_WashDay", new object[] {
                        License_ID,
                        From_Date,
                        To_Date,
                        sale});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Save_WashDayAsync(int License_ID, string From_Date, string To_Date, bool sale) {
            this.Save_WashDayAsync(License_ID, From_Date, To_Date, sale, null);
        }
        
        /// <remarks/>
        public void Save_WashDayAsync(int License_ID, string From_Date, string To_Date, bool sale, object userState) {
            if ((this.Save_WashDayOperationCompleted == null)) {
                this.Save_WashDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSave_WashDayOperationCompleted);
            }
            this.InvokeAsync("Save_WashDay", new object[] {
                        License_ID,
                        From_Date,
                        To_Date,
                        sale}, this.Save_WashDayOperationCompleted, userState);
        }
        
        private void OnSave_WashDayOperationCompleted(object arg) {
            if ((this.Save_WashDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Save_WashDayCompleted(this, new Save_WashDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Save_BrandCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Save_BrandCode(int AssignBrandCodeID, int BrandOpeningID, int LicenseID, string BrandCode, string LoggedInUserID, int TypeID) {
            object[] results = this.Invoke("Save_BrandCode", new object[] {
                        AssignBrandCodeID,
                        BrandOpeningID,
                        LicenseID,
                        BrandCode,
                        LoggedInUserID,
                        TypeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Save_BrandCodeAsync(int AssignBrandCodeID, int BrandOpeningID, int LicenseID, string BrandCode, string LoggedInUserID, int TypeID) {
            this.Save_BrandCodeAsync(AssignBrandCodeID, BrandOpeningID, LicenseID, BrandCode, LoggedInUserID, TypeID, null);
        }
        
        /// <remarks/>
        public void Save_BrandCodeAsync(int AssignBrandCodeID, int BrandOpeningID, int LicenseID, string BrandCode, string LoggedInUserID, int TypeID, object userState) {
            if ((this.Save_BrandCodeOperationCompleted == null)) {
                this.Save_BrandCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSave_BrandCodeOperationCompleted);
            }
            this.InvokeAsync("Save_BrandCode", new object[] {
                        AssignBrandCodeID,
                        BrandOpeningID,
                        LicenseID,
                        BrandCode,
                        LoggedInUserID,
                        TypeID}, this.Save_BrandCodeOperationCompleted, userState);
        }
        
        private void OnSave_BrandCodeOperationCompleted(object arg) {
            if ((this.Save_BrandCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Save_BrandCodeCompleted(this, new Save_BrandCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_AssignBrandCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_AssignBrandCode(int BrandID, int LicenseID, int AssignBrandCodeID) {
            object[] results = this.Invoke("Fetch_AssignBrandCode", new object[] {
                        BrandID,
                        LicenseID,
                        AssignBrandCodeID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_AssignBrandCodeAsync(int BrandID, int LicenseID, int AssignBrandCodeID) {
            this.Fetch_AssignBrandCodeAsync(BrandID, LicenseID, AssignBrandCodeID, null);
        }
        
        /// <remarks/>
        public void Fetch_AssignBrandCodeAsync(int BrandID, int LicenseID, int AssignBrandCodeID, object userState) {
            if ((this.Fetch_AssignBrandCodeOperationCompleted == null)) {
                this.Fetch_AssignBrandCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_AssignBrandCodeOperationCompleted);
            }
            this.InvokeAsync("Fetch_AssignBrandCode", new object[] {
                        BrandID,
                        LicenseID,
                        AssignBrandCodeID}, this.Fetch_AssignBrandCodeOperationCompleted, userState);
        }
        
        private void OnFetch_AssignBrandCodeOperationCompleted(object arg) {
            if ((this.Fetch_AssignBrandCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_AssignBrandCodeCompleted(this, new Fetch_AssignBrandCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Spr_CRUD_CocktailCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Spr_CRUD_CocktailCode(int LicenseID, int CocktailCodeId, int CocktailID, string CocktailName, string CocktailCodeDesc, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("Spr_CRUD_CocktailCode", new object[] {
                        LicenseID,
                        CocktailCodeId,
                        CocktailID,
                        CocktailName,
                        CocktailCodeDesc,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Spr_CRUD_CocktailCodeAsync(int LicenseID, int CocktailCodeId, int CocktailID, string CocktailName, string CocktailCodeDesc, string LoggedInUserID, int Company_ID, string Action) {
            this.Spr_CRUD_CocktailCodeAsync(LicenseID, CocktailCodeId, CocktailID, CocktailName, CocktailCodeDesc, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void Spr_CRUD_CocktailCodeAsync(int LicenseID, int CocktailCodeId, int CocktailID, string CocktailName, string CocktailCodeDesc, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.Spr_CRUD_CocktailCodeOperationCompleted == null)) {
                this.Spr_CRUD_CocktailCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSpr_CRUD_CocktailCodeOperationCompleted);
            }
            this.InvokeAsync("Spr_CRUD_CocktailCode", new object[] {
                        LicenseID,
                        CocktailCodeId,
                        CocktailID,
                        CocktailName,
                        CocktailCodeDesc,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.Spr_CRUD_CocktailCodeOperationCompleted, userState);
        }
        
        private void OnSpr_CRUD_CocktailCodeOperationCompleted(object arg) {
            if ((this.Spr_CRUD_CocktailCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Spr_CRUD_CocktailCodeCompleted(this, new Spr_CRUD_CocktailCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Validate_NegativeStockNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Validate_NegativeStockNew(int licenseid, System.DateTime date, int Bill_No, int BrandOpeningID, decimal Bottle_Qty, decimal Bottle_Rate, decimal SPeg_Qty, decimal SPeg_Rate, decimal LPeg_Qty, decimal LPeg_Rate, decimal CategorytaxID, decimal Taxper, decimal TotalAmount) {
            object[] results = this.Invoke("Validate_NegativeStockNew", new object[] {
                        licenseid,
                        date,
                        Bill_No,
                        BrandOpeningID,
                        Bottle_Qty,
                        Bottle_Rate,
                        SPeg_Qty,
                        SPeg_Rate,
                        LPeg_Qty,
                        LPeg_Rate,
                        CategorytaxID,
                        Taxper,
                        TotalAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Validate_NegativeStockNewAsync(int licenseid, System.DateTime date, int Bill_No, int BrandOpeningID, decimal Bottle_Qty, decimal Bottle_Rate, decimal SPeg_Qty, decimal SPeg_Rate, decimal LPeg_Qty, decimal LPeg_Rate, decimal CategorytaxID, decimal Taxper, decimal TotalAmount) {
            this.Validate_NegativeStockNewAsync(licenseid, date, Bill_No, BrandOpeningID, Bottle_Qty, Bottle_Rate, SPeg_Qty, SPeg_Rate, LPeg_Qty, LPeg_Rate, CategorytaxID, Taxper, TotalAmount, null);
        }
        
        /// <remarks/>
        public void Validate_NegativeStockNewAsync(int licenseid, System.DateTime date, int Bill_No, int BrandOpeningID, decimal Bottle_Qty, decimal Bottle_Rate, decimal SPeg_Qty, decimal SPeg_Rate, decimal LPeg_Qty, decimal LPeg_Rate, decimal CategorytaxID, decimal Taxper, decimal TotalAmount, object userState) {
            if ((this.Validate_NegativeStockNewOperationCompleted == null)) {
                this.Validate_NegativeStockNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidate_NegativeStockNewOperationCompleted);
            }
            this.InvokeAsync("Validate_NegativeStockNew", new object[] {
                        licenseid,
                        date,
                        Bill_No,
                        BrandOpeningID,
                        Bottle_Qty,
                        Bottle_Rate,
                        SPeg_Qty,
                        SPeg_Rate,
                        LPeg_Qty,
                        LPeg_Rate,
                        CategorytaxID,
                        Taxper,
                        TotalAmount}, this.Validate_NegativeStockNewOperationCompleted, userState);
        }
        
        private void OnValidate_NegativeStockNewOperationCompleted(object arg) {
            if ((this.Validate_NegativeStockNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Validate_NegativeStockNewCompleted(this, new Validate_NegativeStockNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchTaxDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchTaxDetails(int Brand_ID) {
            object[] results = this.Invoke("FetchTaxDetails", new object[] {
                        Brand_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchTaxDetailsAsync(int Brand_ID) {
            this.FetchTaxDetailsAsync(Brand_ID, null);
        }
        
        /// <remarks/>
        public void FetchTaxDetailsAsync(int Brand_ID, object userState) {
            if ((this.FetchTaxDetailsOperationCompleted == null)) {
                this.FetchTaxDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchTaxDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchTaxDetails", new object[] {
                        Brand_ID}, this.FetchTaxDetailsOperationCompleted, userState);
        }
        
        private void OnFetchTaxDetailsOperationCompleted(object arg) {
            if ((this.FetchTaxDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchTaxDetailsCompleted(this, new FetchTaxDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrandOpeningMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BrandOpeningMaster_CRUD(int BrandOpening_ID, string CategoryDetails, int BrandID, decimal closingBottle, decimal closingSpeg, int License_ID, int Company_ID, string LoggedInUser, string Action) {
            object[] results = this.Invoke("BrandOpeningMaster_CRUD", new object[] {
                        BrandOpening_ID,
                        CategoryDetails,
                        BrandID,
                        closingBottle,
                        closingSpeg,
                        License_ID,
                        Company_ID,
                        LoggedInUser,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BrandOpeningMaster_CRUDAsync(int BrandOpening_ID, string CategoryDetails, int BrandID, decimal closingBottle, decimal closingSpeg, int License_ID, int Company_ID, string LoggedInUser, string Action) {
            this.BrandOpeningMaster_CRUDAsync(BrandOpening_ID, CategoryDetails, BrandID, closingBottle, closingSpeg, License_ID, Company_ID, LoggedInUser, Action, null);
        }
        
        /// <remarks/>
        public void BrandOpeningMaster_CRUDAsync(int BrandOpening_ID, string CategoryDetails, int BrandID, decimal closingBottle, decimal closingSpeg, int License_ID, int Company_ID, string LoggedInUser, string Action, object userState) {
            if ((this.BrandOpeningMaster_CRUDOperationCompleted == null)) {
                this.BrandOpeningMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrandOpeningMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("BrandOpeningMaster_CRUD", new object[] {
                        BrandOpening_ID,
                        CategoryDetails,
                        BrandID,
                        closingBottle,
                        closingSpeg,
                        License_ID,
                        Company_ID,
                        LoggedInUser,
                        Action}, this.BrandOpeningMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnBrandOpeningMaster_CRUDOperationCompleted(object arg) {
            if ((this.BrandOpeningMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrandOpeningMaster_CRUDCompleted(this, new BrandOpeningMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PurchaseMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PurchaseMaster_CRUD(int Purchase_ID, int Supplier_ID, string TP_No, string Invoice_No, string Purchase_Date, decimal Other_Charges, decimal Discount_Percentage, int License_ID, int Company_ID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("PurchaseMaster_CRUD", new object[] {
                        Purchase_ID,
                        Supplier_ID,
                        TP_No,
                        Invoice_No,
                        Purchase_Date,
                        Other_Charges,
                        Discount_Percentage,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseMaster_CRUDAsync(int Purchase_ID, int Supplier_ID, string TP_No, string Invoice_No, string Purchase_Date, decimal Other_Charges, decimal Discount_Percentage, int License_ID, int Company_ID, string LoggedInUserID, string Action) {
            this.PurchaseMaster_CRUDAsync(Purchase_ID, Supplier_ID, TP_No, Invoice_No, Purchase_Date, Other_Charges, Discount_Percentage, License_ID, Company_ID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void PurchaseMaster_CRUDAsync(int Purchase_ID, int Supplier_ID, string TP_No, string Invoice_No, string Purchase_Date, decimal Other_Charges, decimal Discount_Percentage, int License_ID, int Company_ID, string LoggedInUserID, string Action, object userState) {
            if ((this.PurchaseMaster_CRUDOperationCompleted == null)) {
                this.PurchaseMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("PurchaseMaster_CRUD", new object[] {
                        Purchase_ID,
                        Supplier_ID,
                        TP_No,
                        Invoice_No,
                        Purchase_Date,
                        Other_Charges,
                        Discount_Percentage,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Action}, this.PurchaseMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnPurchaseMaster_CRUDOperationCompleted(object arg) {
            if ((this.PurchaseMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseMaster_CRUDCompleted(this, new PurchaseMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TransferMaster_CRUD(int Transfer_ID, string TransferDate, string TP_No, string Invoice_No, string FL_IV, string Is_Show_Excise, int Trasnfer_To_LicenseID, int License_ID, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("TransferMaster_CRUD", new object[] {
                        Transfer_ID,
                        TransferDate,
                        TP_No,
                        Invoice_No,
                        FL_IV,
                        Is_Show_Excise,
                        Trasnfer_To_LicenseID,
                        License_ID,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TransferMaster_CRUDAsync(int Transfer_ID, string TransferDate, string TP_No, string Invoice_No, string FL_IV, string Is_Show_Excise, int Trasnfer_To_LicenseID, int License_ID, string LoggedInUserID, int Company_ID, string Action) {
            this.TransferMaster_CRUDAsync(Transfer_ID, TransferDate, TP_No, Invoice_No, FL_IV, Is_Show_Excise, Trasnfer_To_LicenseID, License_ID, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void TransferMaster_CRUDAsync(int Transfer_ID, string TransferDate, string TP_No, string Invoice_No, string FL_IV, string Is_Show_Excise, int Trasnfer_To_LicenseID, int License_ID, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.TransferMaster_CRUDOperationCompleted == null)) {
                this.TransferMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("TransferMaster_CRUD", new object[] {
                        Transfer_ID,
                        TransferDate,
                        TP_No,
                        Invoice_No,
                        FL_IV,
                        Is_Show_Excise,
                        Trasnfer_To_LicenseID,
                        License_ID,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.TransferMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnTransferMaster_CRUDOperationCompleted(object arg) {
            if ((this.TransferMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferMaster_CRUDCompleted(this, new TransferMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PurchaseDetailsMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PurchaseDetailsMaster_CRUD(
                    int Purchase_ID, 
                    int Brand_Opening_ID, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    int Free_Qty, 
                    int No_Of_Boxes, 
                    int Batch_No, 
                    string Mfg, 
                    string Tax_Type, 
                    decimal Tax_Amt, 
                    decimal Total_Amt, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Action) {
            object[] results = this.Invoke("PurchaseDetailsMaster_CRUD", new object[] {
                        Purchase_ID,
                        Brand_Opening_ID,
                        Brand_Desc,
                        Size_Desc,
                        Bottle_Qty,
                        Bottle_Rate,
                        Speg_Qty,
                        Speg_Rate,
                        Free_Qty,
                        No_Of_Boxes,
                        Batch_No,
                        Mfg,
                        Tax_Type,
                        Tax_Amt,
                        Total_Amt,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseDetailsMaster_CRUDAsync(
                    int Purchase_ID, 
                    int Brand_Opening_ID, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    int Free_Qty, 
                    int No_Of_Boxes, 
                    int Batch_No, 
                    string Mfg, 
                    string Tax_Type, 
                    decimal Tax_Amt, 
                    decimal Total_Amt, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Action) {
            this.PurchaseDetailsMaster_CRUDAsync(Purchase_ID, Brand_Opening_ID, Brand_Desc, Size_Desc, Bottle_Qty, Bottle_Rate, Speg_Qty, Speg_Rate, Free_Qty, No_Of_Boxes, Batch_No, Mfg, Tax_Type, Tax_Amt, Total_Amt, License_ID, Company_ID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void PurchaseDetailsMaster_CRUDAsync(
                    int Purchase_ID, 
                    int Brand_Opening_ID, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    int Free_Qty, 
                    int No_Of_Boxes, 
                    int Batch_No, 
                    string Mfg, 
                    string Tax_Type, 
                    decimal Tax_Amt, 
                    decimal Total_Amt, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.PurchaseDetailsMaster_CRUDOperationCompleted == null)) {
                this.PurchaseDetailsMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseDetailsMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("PurchaseDetailsMaster_CRUD", new object[] {
                        Purchase_ID,
                        Brand_Opening_ID,
                        Brand_Desc,
                        Size_Desc,
                        Bottle_Qty,
                        Bottle_Rate,
                        Speg_Qty,
                        Speg_Rate,
                        Free_Qty,
                        No_Of_Boxes,
                        Batch_No,
                        Mfg,
                        Tax_Type,
                        Tax_Amt,
                        Total_Amt,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Action}, this.PurchaseDetailsMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnPurchaseDetailsMaster_CRUDOperationCompleted(object arg) {
            if ((this.PurchaseDetailsMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseDetailsMaster_CRUDCompleted(this, new PurchaseDetailsMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferDetailsMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TransferDetailsMaster_CRUD(
                    int Transfer_ID, 
                    string Transfer_Against, 
                    string TP_No, 
                    int Brand_Opening_ID, 
                    string MfgDate, 
                    string Boxes, 
                    string BatchNo, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Created_By, 
                    string Created_Date, 
                    string Action) {
            object[] results = this.Invoke("TransferDetailsMaster_CRUD", new object[] {
                        Transfer_ID,
                        Transfer_Against,
                        TP_No,
                        Brand_Opening_ID,
                        MfgDate,
                        Boxes,
                        BatchNo,
                        Speg_Qty,
                        Speg_Rate,
                        Bottle_Qty,
                        Bottle_Rate,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Created_By,
                        Created_Date,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TransferDetailsMaster_CRUDAsync(
                    int Transfer_ID, 
                    string Transfer_Against, 
                    string TP_No, 
                    int Brand_Opening_ID, 
                    string MfgDate, 
                    string Boxes, 
                    string BatchNo, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Created_By, 
                    string Created_Date, 
                    string Action) {
            this.TransferDetailsMaster_CRUDAsync(Transfer_ID, Transfer_Against, TP_No, Brand_Opening_ID, MfgDate, Boxes, BatchNo, Speg_Qty, Speg_Rate, Bottle_Qty, Bottle_Rate, License_ID, Company_ID, LoggedInUserID, Created_By, Created_Date, Action, null);
        }
        
        /// <remarks/>
        public void TransferDetailsMaster_CRUDAsync(
                    int Transfer_ID, 
                    string Transfer_Against, 
                    string TP_No, 
                    int Brand_Opening_ID, 
                    string MfgDate, 
                    string Boxes, 
                    string BatchNo, 
                    decimal Speg_Qty, 
                    decimal Speg_Rate, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    int License_ID, 
                    int Company_ID, 
                    string LoggedInUserID, 
                    string Created_By, 
                    string Created_Date, 
                    string Action, 
                    object userState) {
            if ((this.TransferDetailsMaster_CRUDOperationCompleted == null)) {
                this.TransferDetailsMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferDetailsMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("TransferDetailsMaster_CRUD", new object[] {
                        Transfer_ID,
                        Transfer_Against,
                        TP_No,
                        Brand_Opening_ID,
                        MfgDate,
                        Boxes,
                        BatchNo,
                        Speg_Qty,
                        Speg_Rate,
                        Bottle_Qty,
                        Bottle_Rate,
                        License_ID,
                        Company_ID,
                        LoggedInUserID,
                        Created_By,
                        Created_Date,
                        Action}, this.TransferDetailsMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnTransferDetailsMaster_CRUDOperationCompleted(object arg) {
            if ((this.TransferDetailsMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferDetailsMaster_CRUDCompleted(this, new TransferDetailsMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaleDetailsMaster_Crud", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaleDetailsMaster_Crud(
                    int Sale_ID, 
                    int SaleDetail_ID, 
                    int Bill_No, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    string Cocktail_Desc, 
                    int Opening_ID, 
                    string TaxType, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal SPeg_Qty, 
                    decimal SPeg_Rate, 
                    decimal LPeg_Qty, 
                    decimal LPeg_Rate, 
                    decimal TaxAmount, 
                    decimal Amount, 
                    int Permit_Holder, 
                    int License_ID, 
                    string Action, 
                    int LoggedInUser, 
                    int Company_ID) {
            object[] results = this.Invoke("SaleDetailsMaster_Crud", new object[] {
                        Sale_ID,
                        SaleDetail_ID,
                        Bill_No,
                        Brand_Desc,
                        Size_Desc,
                        Cocktail_Desc,
                        Opening_ID,
                        TaxType,
                        Bottle_Qty,
                        Bottle_Rate,
                        SPeg_Qty,
                        SPeg_Rate,
                        LPeg_Qty,
                        LPeg_Rate,
                        TaxAmount,
                        Amount,
                        Permit_Holder,
                        License_ID,
                        Action,
                        LoggedInUser,
                        Company_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaleDetailsMaster_CrudAsync(
                    int Sale_ID, 
                    int SaleDetail_ID, 
                    int Bill_No, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    string Cocktail_Desc, 
                    int Opening_ID, 
                    string TaxType, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal SPeg_Qty, 
                    decimal SPeg_Rate, 
                    decimal LPeg_Qty, 
                    decimal LPeg_Rate, 
                    decimal TaxAmount, 
                    decimal Amount, 
                    int Permit_Holder, 
                    int License_ID, 
                    string Action, 
                    int LoggedInUser, 
                    int Company_ID) {
            this.SaleDetailsMaster_CrudAsync(Sale_ID, SaleDetail_ID, Bill_No, Brand_Desc, Size_Desc, Cocktail_Desc, Opening_ID, TaxType, Bottle_Qty, Bottle_Rate, SPeg_Qty, SPeg_Rate, LPeg_Qty, LPeg_Rate, TaxAmount, Amount, Permit_Holder, License_ID, Action, LoggedInUser, Company_ID, null);
        }
        
        /// <remarks/>
        public void SaleDetailsMaster_CrudAsync(
                    int Sale_ID, 
                    int SaleDetail_ID, 
                    int Bill_No, 
                    string Brand_Desc, 
                    string Size_Desc, 
                    string Cocktail_Desc, 
                    int Opening_ID, 
                    string TaxType, 
                    decimal Bottle_Qty, 
                    decimal Bottle_Rate, 
                    decimal SPeg_Qty, 
                    decimal SPeg_Rate, 
                    decimal LPeg_Qty, 
                    decimal LPeg_Rate, 
                    decimal TaxAmount, 
                    decimal Amount, 
                    int Permit_Holder, 
                    int License_ID, 
                    string Action, 
                    int LoggedInUser, 
                    int Company_ID, 
                    object userState) {
            if ((this.SaleDetailsMaster_CrudOperationCompleted == null)) {
                this.SaleDetailsMaster_CrudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleDetailsMaster_CrudOperationCompleted);
            }
            this.InvokeAsync("SaleDetailsMaster_Crud", new object[] {
                        Sale_ID,
                        SaleDetail_ID,
                        Bill_No,
                        Brand_Desc,
                        Size_Desc,
                        Cocktail_Desc,
                        Opening_ID,
                        TaxType,
                        Bottle_Qty,
                        Bottle_Rate,
                        SPeg_Qty,
                        SPeg_Rate,
                        LPeg_Qty,
                        LPeg_Rate,
                        TaxAmount,
                        Amount,
                        Permit_Holder,
                        License_ID,
                        Action,
                        LoggedInUser,
                        Company_ID}, this.SaleDetailsMaster_CrudOperationCompleted, userState);
        }
        
        private void OnSaleDetailsMaster_CrudOperationCompleted(object arg) {
            if ((this.SaleDetailsMaster_CrudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleDetailsMaster_CrudCompleted(this, new SaleDetailsMaster_CrudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaleMaster_Crud", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaleMaster_Crud(int Sale_ID, string date, string Bill_No, int license, string Action, int LoggedInUser, int Company_ID, bool Is_Auto_Bill) {
            object[] results = this.Invoke("SaleMaster_Crud", new object[] {
                        Sale_ID,
                        date,
                        Bill_No,
                        license,
                        Action,
                        LoggedInUser,
                        Company_ID,
                        Is_Auto_Bill});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaleMaster_CrudAsync(int Sale_ID, string date, string Bill_No, int license, string Action, int LoggedInUser, int Company_ID, bool Is_Auto_Bill) {
            this.SaleMaster_CrudAsync(Sale_ID, date, Bill_No, license, Action, LoggedInUser, Company_ID, Is_Auto_Bill, null);
        }
        
        /// <remarks/>
        public void SaleMaster_CrudAsync(int Sale_ID, string date, string Bill_No, int license, string Action, int LoggedInUser, int Company_ID, bool Is_Auto_Bill, object userState) {
            if ((this.SaleMaster_CrudOperationCompleted == null)) {
                this.SaleMaster_CrudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleMaster_CrudOperationCompleted);
            }
            this.InvokeAsync("SaleMaster_Crud", new object[] {
                        Sale_ID,
                        date,
                        Bill_No,
                        license,
                        Action,
                        LoggedInUser,
                        Company_ID,
                        Is_Auto_Bill}, this.SaleMaster_CrudOperationCompleted, userState);
        }
        
        private void OnSaleMaster_CrudOperationCompleted(object arg) {
            if ((this.SaleMaster_CrudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleMaster_CrudCompleted(this, new SaleMaster_CrudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillBook_Crud", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BillBook_Crud(int Bill_ID, string Bill_Start_No, string Bill_End_No, string License_No, string Action, string LoggedInUser, int Company_ID) {
            object[] results = this.Invoke("BillBook_Crud", new object[] {
                        Bill_ID,
                        Bill_Start_No,
                        Bill_End_No,
                        License_No,
                        Action,
                        LoggedInUser,
                        Company_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BillBook_CrudAsync(int Bill_ID, string Bill_Start_No, string Bill_End_No, string License_No, string Action, string LoggedInUser, int Company_ID) {
            this.BillBook_CrudAsync(Bill_ID, Bill_Start_No, Bill_End_No, License_No, Action, LoggedInUser, Company_ID, null);
        }
        
        /// <remarks/>
        public void BillBook_CrudAsync(int Bill_ID, string Bill_Start_No, string Bill_End_No, string License_No, string Action, string LoggedInUser, int Company_ID, object userState) {
            if ((this.BillBook_CrudOperationCompleted == null)) {
                this.BillBook_CrudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillBook_CrudOperationCompleted);
            }
            this.InvokeAsync("BillBook_Crud", new object[] {
                        Bill_ID,
                        Bill_Start_No,
                        Bill_End_No,
                        License_No,
                        Action,
                        LoggedInUser,
                        Company_ID}, this.BillBook_CrudOperationCompleted, userState);
        }
        
        private void OnBillBook_CrudOperationCompleted(object arg) {
            if ((this.BillBook_CrudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillBook_CrudCompleted(this, new BillBook_CrudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CategoryMaster_CRUD(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("CategoryMaster_CRUD", new object[] {
                        Company_ID,
                        Category_ID,
                        Category_Desc,
                        Category_Alias,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action) {
            this.CategoryMaster_CRUDAsync(Company_ID, Category_ID, Category_Desc, Category_Alias, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action, object userState) {
            if ((this.CategoryMaster_CRUDOperationCompleted == null)) {
                this.CategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CategoryMaster_CRUD", new object[] {
                        Company_ID,
                        Category_ID,
                        Category_Desc,
                        Category_Alias,
                        LoggedInUserID,
                        Action}, this.CategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.CategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CategoryMaster_CRUDCompleted(this, new CategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Category_Brand", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Category_Brand(int CompanyId, int CategoryID, int BrandID) {
            object[] results = this.Invoke("Fetch_Category_Brand", new object[] {
                        CompanyId,
                        CategoryID,
                        BrandID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Category_BrandAsync(int CompanyId, int CategoryID, int BrandID) {
            this.Fetch_Category_BrandAsync(CompanyId, CategoryID, BrandID, null);
        }
        
        /// <remarks/>
        public void Fetch_Category_BrandAsync(int CompanyId, int CategoryID, int BrandID, object userState) {
            if ((this.Fetch_Category_BrandOperationCompleted == null)) {
                this.Fetch_Category_BrandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Category_BrandOperationCompleted);
            }
            this.InvokeAsync("Fetch_Category_Brand", new object[] {
                        CompanyId,
                        CategoryID,
                        BrandID}, this.Fetch_Category_BrandOperationCompleted, userState);
        }
        
        private void OnFetch_Category_BrandOperationCompleted(object arg) {
            if ((this.Fetch_Category_BrandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Category_BrandCompleted(this, new Fetch_Category_BrandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Brand_Opening", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Brand_Opening(int Cat_Size_ID, int Opening_ID, int BrandID, string Brand_Desc, string Size_Desc, string Cocktail_Desc, int CompanyID, string License_ID) {
            object[] results = this.Invoke("Fetch_Brand_Opening", new object[] {
                        Cat_Size_ID,
                        Opening_ID,
                        BrandID,
                        Brand_Desc,
                        Size_Desc,
                        Cocktail_Desc,
                        CompanyID,
                        License_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Brand_OpeningAsync(int Cat_Size_ID, int Opening_ID, int BrandID, string Brand_Desc, string Size_Desc, string Cocktail_Desc, int CompanyID, string License_ID) {
            this.Fetch_Brand_OpeningAsync(Cat_Size_ID, Opening_ID, BrandID, Brand_Desc, Size_Desc, Cocktail_Desc, CompanyID, License_ID, null);
        }
        
        /// <remarks/>
        public void Fetch_Brand_OpeningAsync(int Cat_Size_ID, int Opening_ID, int BrandID, string Brand_Desc, string Size_Desc, string Cocktail_Desc, int CompanyID, string License_ID, object userState) {
            if ((this.Fetch_Brand_OpeningOperationCompleted == null)) {
                this.Fetch_Brand_OpeningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Brand_OpeningOperationCompleted);
            }
            this.InvokeAsync("Fetch_Brand_Opening", new object[] {
                        Cat_Size_ID,
                        Opening_ID,
                        BrandID,
                        Brand_Desc,
                        Size_Desc,
                        Cocktail_Desc,
                        CompanyID,
                        License_ID}, this.Fetch_Brand_OpeningOperationCompleted, userState);
        }
        
        private void OnFetch_Brand_OpeningOperationCompleted(object arg) {
            if ((this.Fetch_Brand_OpeningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Brand_OpeningCompleted(this, new Fetch_Brand_OpeningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_CategorySizeLinkup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_CategorySizeLinkup(int Size_ID, int Category_ID, int License_ID, int Company_ID) {
            object[] results = this.Invoke("Fetch_CategorySizeLinkup", new object[] {
                        Size_ID,
                        Category_ID,
                        License_ID,
                        Company_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_CategorySizeLinkupAsync(int Size_ID, int Category_ID, int License_ID, int Company_ID) {
            this.Fetch_CategorySizeLinkupAsync(Size_ID, Category_ID, License_ID, Company_ID, null);
        }
        
        /// <remarks/>
        public void Fetch_CategorySizeLinkupAsync(int Size_ID, int Category_ID, int License_ID, int Company_ID, object userState) {
            if ((this.Fetch_CategorySizeLinkupOperationCompleted == null)) {
                this.Fetch_CategorySizeLinkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_CategorySizeLinkupOperationCompleted);
            }
            this.InvokeAsync("Fetch_CategorySizeLinkup", new object[] {
                        Size_ID,
                        Category_ID,
                        License_ID,
                        Company_ID}, this.Fetch_CategorySizeLinkupOperationCompleted, userState);
        }
        
        private void OnFetch_CategorySizeLinkupOperationCompleted(object arg) {
            if ((this.Fetch_CategorySizeLinkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_CategorySizeLinkupCompleted(this, new Fetch_CategorySizeLinkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CocktailMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CocktailMaster_CRUD(int Cocktail_ID, string Category_Desc, string Rate, int Company_ID, string LoggedInUserID, int License_ID, string Action) {
            object[] results = this.Invoke("CocktailMaster_CRUD", new object[] {
                        Cocktail_ID,
                        Category_Desc,
                        Rate,
                        Company_ID,
                        LoggedInUserID,
                        License_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CocktailMaster_CRUDAsync(int Cocktail_ID, string Category_Desc, string Rate, int Company_ID, string LoggedInUserID, int License_ID, string Action) {
            this.CocktailMaster_CRUDAsync(Cocktail_ID, Category_Desc, Rate, Company_ID, LoggedInUserID, License_ID, Action, null);
        }
        
        /// <remarks/>
        public void CocktailMaster_CRUDAsync(int Cocktail_ID, string Category_Desc, string Rate, int Company_ID, string LoggedInUserID, int License_ID, string Action, object userState) {
            if ((this.CocktailMaster_CRUDOperationCompleted == null)) {
                this.CocktailMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCocktailMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CocktailMaster_CRUD", new object[] {
                        Cocktail_ID,
                        Category_Desc,
                        Rate,
                        Company_ID,
                        LoggedInUserID,
                        License_ID,
                        Action}, this.CocktailMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCocktailMaster_CRUDOperationCompleted(object arg) {
            if ((this.CocktailMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CocktailMaster_CRUDCompleted(this, new CocktailMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CocktailBrandsMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CocktailBrandsMaster_CRUD(int Cocktail_Brand_ID, int Cocktail_ID, int Brand_ID, int Pegml, int Size, int Company_ID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("CocktailBrandsMaster_CRUD", new object[] {
                        Cocktail_Brand_ID,
                        Cocktail_ID,
                        Brand_ID,
                        Pegml,
                        Size,
                        Company_ID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CocktailBrandsMaster_CRUDAsync(int Cocktail_Brand_ID, int Cocktail_ID, int Brand_ID, int Pegml, int Size, int Company_ID, string LoggedInUserID, string Action) {
            this.CocktailBrandsMaster_CRUDAsync(Cocktail_Brand_ID, Cocktail_ID, Brand_ID, Pegml, Size, Company_ID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void CocktailBrandsMaster_CRUDAsync(int Cocktail_Brand_ID, int Cocktail_ID, int Brand_ID, int Pegml, int Size, int Company_ID, string LoggedInUserID, string Action, object userState) {
            if ((this.CocktailBrandsMaster_CRUDOperationCompleted == null)) {
                this.CocktailBrandsMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCocktailBrandsMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CocktailBrandsMaster_CRUD", new object[] {
                        Cocktail_Brand_ID,
                        Cocktail_ID,
                        Brand_ID,
                        Pegml,
                        Size,
                        Company_ID,
                        LoggedInUserID,
                        Action}, this.CocktailBrandsMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCocktailBrandsMaster_CRUDOperationCompleted(object arg) {
            if ((this.CocktailBrandsMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CocktailBrandsMaster_CRUDCompleted(this, new CocktailBrandsMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBrandSizeLinkup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchBrandSizeLinkup(int Category_ID, int Brand_ID, int Size_ID, string Brand_Desc, string Size_Desc, int Company_ID, int License_ID, string Action, System.DateTime date) {
            object[] results = this.Invoke("FetchBrandSizeLinkup", new object[] {
                        Category_ID,
                        Brand_ID,
                        Size_ID,
                        Brand_Desc,
                        Size_Desc,
                        Company_ID,
                        License_ID,
                        Action,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBrandSizeLinkupAsync(int Category_ID, int Brand_ID, int Size_ID, string Brand_Desc, string Size_Desc, int Company_ID, int License_ID, string Action, System.DateTime date) {
            this.FetchBrandSizeLinkupAsync(Category_ID, Brand_ID, Size_ID, Brand_Desc, Size_Desc, Company_ID, License_ID, Action, date, null);
        }
        
        /// <remarks/>
        public void FetchBrandSizeLinkupAsync(int Category_ID, int Brand_ID, int Size_ID, string Brand_Desc, string Size_Desc, int Company_ID, int License_ID, string Action, System.DateTime date, object userState) {
            if ((this.FetchBrandSizeLinkupOperationCompleted == null)) {
                this.FetchBrandSizeLinkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBrandSizeLinkupOperationCompleted);
            }
            this.InvokeAsync("FetchBrandSizeLinkup", new object[] {
                        Category_ID,
                        Brand_ID,
                        Size_ID,
                        Brand_Desc,
                        Size_Desc,
                        Company_ID,
                        License_ID,
                        Action,
                        date}, this.FetchBrandSizeLinkupOperationCompleted, userState);
        }
        
        private void OnFetchBrandSizeLinkupOperationCompleted(object arg) {
            if ((this.FetchBrandSizeLinkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBrandSizeLinkupCompleted(this, new FetchBrandSizeLinkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrandMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BrandMaster_CRUD(int Company_ID, int Brand_ID, int Category_ID, int SubCategory_ID, string Brand_Desc, string Brand_Short_Name, int Strength, int Purchase_Rate_Peg, int Selling_Rate_Peg, int Selling_Rate_Bottle, int Is_Disabled, string Size, int Cocktail_ID, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("BrandMaster_CRUD", new object[] {
                        Company_ID,
                        Brand_ID,
                        Category_ID,
                        SubCategory_ID,
                        Brand_Desc,
                        Brand_Short_Name,
                        Strength,
                        Purchase_Rate_Peg,
                        Selling_Rate_Peg,
                        Selling_Rate_Bottle,
                        Is_Disabled,
                        Size,
                        Cocktail_ID,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BrandMaster_CRUDAsync(int Company_ID, int Brand_ID, int Category_ID, int SubCategory_ID, string Brand_Desc, string Brand_Short_Name, int Strength, int Purchase_Rate_Peg, int Selling_Rate_Peg, int Selling_Rate_Bottle, int Is_Disabled, string Size, int Cocktail_ID, string LoggedInUserID, string Action) {
            this.BrandMaster_CRUDAsync(Company_ID, Brand_ID, Category_ID, SubCategory_ID, Brand_Desc, Brand_Short_Name, Strength, Purchase_Rate_Peg, Selling_Rate_Peg, Selling_Rate_Bottle, Is_Disabled, Size, Cocktail_ID, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void BrandMaster_CRUDAsync(
                    int Company_ID, 
                    int Brand_ID, 
                    int Category_ID, 
                    int SubCategory_ID, 
                    string Brand_Desc, 
                    string Brand_Short_Name, 
                    int Strength, 
                    int Purchase_Rate_Peg, 
                    int Selling_Rate_Peg, 
                    int Selling_Rate_Bottle, 
                    int Is_Disabled, 
                    string Size, 
                    int Cocktail_ID, 
                    string LoggedInUserID, 
                    string Action, 
                    object userState) {
            if ((this.BrandMaster_CRUDOperationCompleted == null)) {
                this.BrandMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrandMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("BrandMaster_CRUD", new object[] {
                        Company_ID,
                        Brand_ID,
                        Category_ID,
                        SubCategory_ID,
                        Brand_Desc,
                        Brand_Short_Name,
                        Strength,
                        Purchase_Rate_Peg,
                        Selling_Rate_Peg,
                        Selling_Rate_Bottle,
                        Is_Disabled,
                        Size,
                        Cocktail_ID,
                        LoggedInUserID,
                        Action}, this.BrandMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnBrandMaster_CRUDOperationCompleted(object arg) {
            if ((this.BrandMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrandMaster_CRUDCompleted(this, new BrandMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SizeMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SizeMaster_CRUD(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SizeMaster_CRUD", new object[] {
                        Size_ID,
                        Size_Desc,
                        Size_Alias,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SizeMaster_CRUDAsync(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action) {
            this.SizeMaster_CRUDAsync(Size_ID, Size_Desc, Size_Alias, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SizeMaster_CRUDAsync(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SizeMaster_CRUDOperationCompleted == null)) {
                this.SizeMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSizeMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SizeMaster_CRUD", new object[] {
                        Size_ID,
                        Size_Desc,
                        Size_Alias,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SizeMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSizeMaster_CRUDOperationCompleted(object arg) {
            if ((this.SizeMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SizeMaster_CRUDCompleted(this, new SizeMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubCategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SubCategoryMaster_CRUD(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SubCategoryMaster_CRUD", new object[] {
                        SubCategory_ID,
                        Category_ID,
                        SubCategory_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action) {
            this.SubCategoryMaster_CRUDAsync(SubCategory_ID, Category_ID, SubCategory_Desc, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SubCategoryMaster_CRUDOperationCompleted == null)) {
                this.SubCategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SubCategoryMaster_CRUD", new object[] {
                        SubCategory_ID,
                        Category_ID,
                        SubCategory_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SubCategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSubCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.SubCategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubCategoryMaster_CRUDCompleted(this, new SubCategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PermitMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PermitMaster_CRUD(int Permit_ID, string Permit_Type, string Permit_Holder, string Permit_Number, string Expire_Date, bool Life_Time, string LoggedInUserID, int CompanyID, string Action) {
            object[] results = this.Invoke("PermitMaster_CRUD", new object[] {
                        Permit_ID,
                        Permit_Type,
                        Permit_Holder,
                        Permit_Number,
                        Expire_Date,
                        Life_Time,
                        LoggedInUserID,
                        CompanyID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PermitMaster_CRUDAsync(int Permit_ID, string Permit_Type, string Permit_Holder, string Permit_Number, string Expire_Date, bool Life_Time, string LoggedInUserID, int CompanyID, string Action) {
            this.PermitMaster_CRUDAsync(Permit_ID, Permit_Type, Permit_Holder, Permit_Number, Expire_Date, Life_Time, LoggedInUserID, CompanyID, Action, null);
        }
        
        /// <remarks/>
        public void PermitMaster_CRUDAsync(int Permit_ID, string Permit_Type, string Permit_Holder, string Permit_Number, string Expire_Date, bool Life_Time, string LoggedInUserID, int CompanyID, string Action, object userState) {
            if ((this.PermitMaster_CRUDOperationCompleted == null)) {
                this.PermitMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPermitMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("PermitMaster_CRUD", new object[] {
                        Permit_ID,
                        Permit_Type,
                        Permit_Holder,
                        Permit_Number,
                        Expire_Date,
                        Life_Time,
                        LoggedInUserID,
                        CompanyID,
                        Action}, this.PermitMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnPermitMaster_CRUDOperationCompleted(object arg) {
            if ((this.PermitMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PermitMaster_CRUDCompleted(this, new PermitMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Save_CategorySizeLinkup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Save_CategorySizeLinkup(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Save_CategorySizeLinkup", new object[] {
                        CategoryID,
                        CategoryDetails,
                        LicenseID,
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Save_CategorySizeLinkupAsync(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID) {
            this.Save_CategorySizeLinkupAsync(CategoryID, CategoryDetails, LicenseID, CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Save_CategorySizeLinkupAsync(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Save_CategorySizeLinkupOperationCompleted == null)) {
                this.Save_CategorySizeLinkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSave_CategorySizeLinkupOperationCompleted);
            }
            this.InvokeAsync("Save_CategorySizeLinkup", new object[] {
                        CategoryID,
                        CategoryDetails,
                        LicenseID,
                        CompanyID,
                        LoggedInUserID}, this.Save_CategorySizeLinkupOperationCompleted, userState);
        }
        
        private void OnSave_CategorySizeLinkupOperationCompleted(object arg) {
            if ((this.Save_CategorySizeLinkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Save_CategorySizeLinkupCompleted(this, new Save_CategorySizeLinkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/License_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet License_CRUD(int LicenseID, string LicenseName, string LicenseNo, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("License_CRUD", new object[] {
                        LicenseID,
                        LicenseName,
                        LicenseNo,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void License_CRUDAsync(int LicenseID, string LicenseName, string LicenseNo, string LoggedInUserID, int Company_ID, string Action) {
            this.License_CRUDAsync(LicenseID, LicenseName, LicenseNo, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void License_CRUDAsync(int LicenseID, string LicenseName, string LicenseNo, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.License_CRUDOperationCompleted == null)) {
                this.License_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicense_CRUDOperationCompleted);
            }
            this.InvokeAsync("License_CRUD", new object[] {
                        LicenseID,
                        LicenseName,
                        LicenseNo,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.License_CRUDOperationCompleted, userState);
        }
        
        private void OnLicense_CRUDOperationCompleted(object arg) {
            if ((this.License_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.License_CRUDCompleted(this, new License_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SupplierMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SupplierMaster_CRUD(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, string Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SupplierMaster_CRUD", new object[] {
                        Supplier_ID,
                        SupplierName,
                        Code,
                        pincode,
                        Address,
                        Contact,
                        City,
                        Email,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SupplierMaster_CRUDAsync(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, string Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action) {
            this.SupplierMaster_CRUDAsync(Supplier_ID, SupplierName, Code, pincode, Address, Contact, City, Email, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SupplierMaster_CRUDAsync(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, string Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SupplierMaster_CRUDOperationCompleted == null)) {
                this.SupplierMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSupplierMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SupplierMaster_CRUD", new object[] {
                        Supplier_ID,
                        SupplierName,
                        Code,
                        pincode,
                        Address,
                        Contact,
                        City,
                        Email,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SupplierMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSupplierMaster_CRUDOperationCompleted(object arg) {
            if ((this.SupplierMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SupplierMaster_CRUDCompleted(this, new SupplierMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Test_Dataset_RDLC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Test_Dataset_RDLC() {
            object[] results = this.Invoke("Fetch_Test_Dataset_RDLC", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Test_Dataset_RDLCAsync() {
            this.Fetch_Test_Dataset_RDLCAsync(null);
        }
        
        /// <remarks/>
        public void Fetch_Test_Dataset_RDLCAsync(object userState) {
            if ((this.Fetch_Test_Dataset_RDLCOperationCompleted == null)) {
                this.Fetch_Test_Dataset_RDLCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Test_Dataset_RDLCOperationCompleted);
            }
            this.InvokeAsync("Fetch_Test_Dataset_RDLC", new object[0], this.Fetch_Test_Dataset_RDLCOperationCompleted, userState);
        }
        
        private void OnFetch_Test_Dataset_RDLCOperationCompleted(object arg) {
            if ((this.Fetch_Test_Dataset_RDLCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Test_Dataset_RDLCCompleted(this, new Fetch_Test_Dataset_RDLCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Flr6DataCompletedEventHandler(object sender, Fetch_Flr6DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Flr6DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Flr6DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_FLR3LegalReportCompletedEventHandler(object sender, Fetch_FLR3LegalReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_FLR3LegalReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_FLR3LegalReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_CashMemoCompletedEventHandler(object sender, Fetch_CashMemoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CashMemoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CashMemoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Flr4DataCompletedEventHandler(object sender, Fetch_Flr4DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Flr4DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Flr4DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_CostValuation_ReportCompletedEventHandler(object sender, Fetch_CostValuation_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CostValuation_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CostValuation_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Sales_ReportCompletedEventHandler(object sender, Fetch_Sales_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Sales_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Sales_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Purchase_ReportCompletedEventHandler(object sender, Fetch_Purchase_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Purchase_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Purchase_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Transfer_ReportCompletedEventHandler(object sender, Fetch_Transfer_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Transfer_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Transfer_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Cost_ReportCompletedEventHandler(object sender, Fetch_Cost_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Cost_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Cost_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_SlowMovingQty_ReportCompletedEventHandler(object sender, Fetch_SlowMovingQty_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_SlowMovingQty_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_SlowMovingQty_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_NonMovingQty_ReportCompletedEventHandler(object sender, Fetch_NonMovingQty_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_NonMovingQty_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_NonMovingQty_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_CocktailSale_ReportCompletedEventHandler(object sender, Fetch_CocktailSale_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CocktailSale_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CocktailSale_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_BulkLitre_ReportCompletedEventHandler(object sender, Fetch_BulkLitre_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_BulkLitre_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_BulkLitre_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_BaseQuantity_ReportCompletedEventHandler(object sender, Fetch_BaseQuantity_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_BaseQuantity_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_BaseQuantity_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Abstract_ReportCompletedEventHandler(object sender, Fetch_Abstract_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Abstract_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Abstract_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_BrandSummary_ReportCompletedEventHandler(object sender, Fetch_BrandSummary_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_BrandSummary_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_BrandSummary_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Chatai_ReportCompletedEventHandler(object sender, Fetch_Chatai_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Chatai_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Chatai_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_OptimumQuantity_ReportCompletedEventHandler(object sender, Fetch_OptimumQuantity_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_OptimumQuantity_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_OptimumQuantity_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_BrandOpeningStockCompletedEventHandler(object sender, Import_BrandOpeningStockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_BrandOpeningStockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_BrandOpeningStockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_BrandsCompletedEventHandler(object sender, Import_BrandsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_BrandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_BrandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_SupplierCompletedEventHandler(object sender, Import_SupplierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_SupplierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_SupplierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_BrandCodeCompletedEventHandler(object sender, Import_BrandCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_BrandCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_BrandCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_CocktailCompletedEventHandler(object sender, Import_CocktailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_CocktailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_CocktailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_CocktailCodeCompletedEventHandler(object sender, Import_CocktailCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_CocktailCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_CocktailCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_SaleCompletedEventHandler(object sender, Import_SaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_SaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_SaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_PurchaseCompletedEventHandler(object sender, Import_PurchaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_PurchaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_PurchaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_AutoBillingCompletedEventHandler(object sender, Import_AutoBillingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_AutoBillingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_AutoBillingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Import_TransferCompletedEventHandler(object sender, Import_TransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Import_TransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Import_TransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Save_WashDayCompletedEventHandler(object sender, Save_WashDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Save_WashDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Save_WashDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Save_BrandCodeCompletedEventHandler(object sender, Save_BrandCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Save_BrandCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Save_BrandCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_AssignBrandCodeCompletedEventHandler(object sender, Fetch_AssignBrandCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_AssignBrandCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_AssignBrandCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Spr_CRUD_CocktailCodeCompletedEventHandler(object sender, Spr_CRUD_CocktailCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Spr_CRUD_CocktailCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Spr_CRUD_CocktailCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Validate_NegativeStockNewCompletedEventHandler(object sender, Validate_NegativeStockNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Validate_NegativeStockNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Validate_NegativeStockNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FetchTaxDetailsCompletedEventHandler(object sender, FetchTaxDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchTaxDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchTaxDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void BrandOpeningMaster_CRUDCompletedEventHandler(object sender, BrandOpeningMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrandOpeningMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrandOpeningMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PurchaseMaster_CRUDCompletedEventHandler(object sender, PurchaseMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void TransferMaster_CRUDCompletedEventHandler(object sender, TransferMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PurchaseDetailsMaster_CRUDCompletedEventHandler(object sender, PurchaseDetailsMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseDetailsMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseDetailsMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void TransferDetailsMaster_CRUDCompletedEventHandler(object sender, TransferDetailsMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferDetailsMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferDetailsMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SaleDetailsMaster_CrudCompletedEventHandler(object sender, SaleDetailsMaster_CrudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleDetailsMaster_CrudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleDetailsMaster_CrudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SaleMaster_CrudCompletedEventHandler(object sender, SaleMaster_CrudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleMaster_CrudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleMaster_CrudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void BillBook_CrudCompletedEventHandler(object sender, BillBook_CrudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillBook_CrudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillBook_CrudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CategoryMaster_CRUDCompletedEventHandler(object sender, CategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Category_BrandCompletedEventHandler(object sender, Fetch_Category_BrandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Category_BrandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Category_BrandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Brand_OpeningCompletedEventHandler(object sender, Fetch_Brand_OpeningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Brand_OpeningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Brand_OpeningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_CategorySizeLinkupCompletedEventHandler(object sender, Fetch_CategorySizeLinkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_CategorySizeLinkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_CategorySizeLinkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CocktailMaster_CRUDCompletedEventHandler(object sender, CocktailMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CocktailMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CocktailMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CocktailBrandsMaster_CRUDCompletedEventHandler(object sender, CocktailBrandsMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CocktailBrandsMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CocktailBrandsMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FetchBrandSizeLinkupCompletedEventHandler(object sender, FetchBrandSizeLinkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBrandSizeLinkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBrandSizeLinkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void BrandMaster_CRUDCompletedEventHandler(object sender, BrandMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrandMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrandMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SizeMaster_CRUDCompletedEventHandler(object sender, SizeMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SizeMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SizeMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SubCategoryMaster_CRUDCompletedEventHandler(object sender, SubCategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubCategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubCategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PermitMaster_CRUDCompletedEventHandler(object sender, PermitMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PermitMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PermitMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Save_CategorySizeLinkupCompletedEventHandler(object sender, Save_CategorySizeLinkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Save_CategorySizeLinkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Save_CategorySizeLinkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void License_CRUDCompletedEventHandler(object sender, License_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class License_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal License_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SupplierMaster_CRUDCompletedEventHandler(object sender, SupplierMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SupplierMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SupplierMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Fetch_Test_Dataset_RDLCCompletedEventHandler(object sender, Fetch_Test_Dataset_RDLCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Test_Dataset_RDLCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Test_Dataset_RDLCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591