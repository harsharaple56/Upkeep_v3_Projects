//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Upkeep_v3.CocktailWorld_Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CocktailWorld_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CocktailWorld_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback CategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCategorySizeLinkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrandMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SizeMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubCategoryMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PermitMaster_CRUDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Save_CategorySizeLinkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback LicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SupplierMaster_CRUDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CocktailWorld_Service() {
            this.Url = global::Upkeep_v3.Properties.Settings.Default.Upkeep_v3_CocktailWorld_Service_CocktailWorld_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event CategoryMaster_CRUDCompletedEventHandler CategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event FetchCategorySizeLinkupCompletedEventHandler FetchCategorySizeLinkupCompleted;
        
        /// <remarks/>
        public event BrandMaster_CRUDCompletedEventHandler BrandMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SizeMaster_CRUDCompletedEventHandler SizeMaster_CRUDCompleted;
        
        /// <remarks/>
        public event SubCategoryMaster_CRUDCompletedEventHandler SubCategoryMaster_CRUDCompleted;
        
        /// <remarks/>
        public event PermitMaster_CRUDCompletedEventHandler PermitMaster_CRUDCompleted;
        
        /// <remarks/>
        public event Save_CategorySizeLinkupCompletedEventHandler Save_CategorySizeLinkupCompleted;
        
        /// <remarks/>
        public event LicenseCompletedEventHandler LicenseCompleted;
        
        /// <remarks/>
        public event SupplierMaster_CRUDCompletedEventHandler SupplierMaster_CRUDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CategoryMaster_CRUD(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("CategoryMaster_CRUD", new object[] {
                        Company_ID,
                        Category_ID,
                        Category_Desc,
                        Category_Alias,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action) {
            this.CategoryMaster_CRUDAsync(Company_ID, Category_ID, Category_Desc, Category_Alias, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void CategoryMaster_CRUDAsync(int Company_ID, int Category_ID, string Category_Desc, string Category_Alias, string LoggedInUserID, string Action, object userState) {
            if ((this.CategoryMaster_CRUDOperationCompleted == null)) {
                this.CategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("CategoryMaster_CRUD", new object[] {
                        Company_ID,
                        Category_ID,
                        Category_Desc,
                        Category_Alias,
                        LoggedInUserID,
                        Action}, this.CategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.CategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CategoryMaster_CRUDCompleted(this, new CategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCategorySizeLinkup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchCategorySizeLinkup(int Category_ID) {
            object[] results = this.Invoke("FetchCategorySizeLinkup", new object[] {
                        Category_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCategorySizeLinkupAsync(int Category_ID) {
            this.FetchCategorySizeLinkupAsync(Category_ID, null);
        }
        
        /// <remarks/>
        public void FetchCategorySizeLinkupAsync(int Category_ID, object userState) {
            if ((this.FetchCategorySizeLinkupOperationCompleted == null)) {
                this.FetchCategorySizeLinkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCategorySizeLinkupOperationCompleted);
            }
            this.InvokeAsync("FetchCategorySizeLinkup", new object[] {
                        Category_ID}, this.FetchCategorySizeLinkupOperationCompleted, userState);
        }
        
        private void OnFetchCategorySizeLinkupOperationCompleted(object arg) {
            if ((this.FetchCategorySizeLinkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCategorySizeLinkupCompleted(this, new FetchCategorySizeLinkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrandMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BrandMaster_CRUD(int Company_ID, int Brand_ID, int Category_ID, int SubCategory_ID, string Brand_Desc, int Strength, int Purchase_Rate_Peg, int Selling_Rate_Peg, int Selling_Rate_Bottle, int Is_Disabled, string LoggedInUserID, string Action) {
            object[] results = this.Invoke("BrandMaster_CRUD", new object[] {
                        Company_ID,
                        Brand_ID,
                        Category_ID,
                        SubCategory_ID,
                        Brand_Desc,
                        Strength,
                        Purchase_Rate_Peg,
                        Selling_Rate_Peg,
                        Selling_Rate_Bottle,
                        Is_Disabled,
                        LoggedInUserID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BrandMaster_CRUDAsync(int Company_ID, int Brand_ID, int Category_ID, int SubCategory_ID, string Brand_Desc, int Strength, int Purchase_Rate_Peg, int Selling_Rate_Peg, int Selling_Rate_Bottle, int Is_Disabled, string LoggedInUserID, string Action) {
            this.BrandMaster_CRUDAsync(Company_ID, Brand_ID, Category_ID, SubCategory_ID, Brand_Desc, Strength, Purchase_Rate_Peg, Selling_Rate_Peg, Selling_Rate_Bottle, Is_Disabled, LoggedInUserID, Action, null);
        }
        
        /// <remarks/>
        public void BrandMaster_CRUDAsync(int Company_ID, int Brand_ID, int Category_ID, int SubCategory_ID, string Brand_Desc, int Strength, int Purchase_Rate_Peg, int Selling_Rate_Peg, int Selling_Rate_Bottle, int Is_Disabled, string LoggedInUserID, string Action, object userState) {
            if ((this.BrandMaster_CRUDOperationCompleted == null)) {
                this.BrandMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrandMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("BrandMaster_CRUD", new object[] {
                        Company_ID,
                        Brand_ID,
                        Category_ID,
                        SubCategory_ID,
                        Brand_Desc,
                        Strength,
                        Purchase_Rate_Peg,
                        Selling_Rate_Peg,
                        Selling_Rate_Bottle,
                        Is_Disabled,
                        LoggedInUserID,
                        Action}, this.BrandMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnBrandMaster_CRUDOperationCompleted(object arg) {
            if ((this.BrandMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrandMaster_CRUDCompleted(this, new BrandMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SizeMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SizeMaster_CRUD(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SizeMaster_CRUD", new object[] {
                        Size_ID,
                        Size_Desc,
                        Size_Alias,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SizeMaster_CRUDAsync(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action) {
            this.SizeMaster_CRUDAsync(Size_ID, Size_Desc, Size_Alias, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SizeMaster_CRUDAsync(int Size_ID, string Size_Desc, int Size_Alias, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SizeMaster_CRUDOperationCompleted == null)) {
                this.SizeMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSizeMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SizeMaster_CRUD", new object[] {
                        Size_ID,
                        Size_Desc,
                        Size_Alias,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SizeMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSizeMaster_CRUDOperationCompleted(object arg) {
            if ((this.SizeMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SizeMaster_CRUDCompleted(this, new SizeMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubCategoryMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SubCategoryMaster_CRUD(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SubCategoryMaster_CRUD", new object[] {
                        SubCategory_ID,
                        Category_ID,
                        SubCategory_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action) {
            this.SubCategoryMaster_CRUDAsync(SubCategory_ID, Category_ID, SubCategory_Desc, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SubCategoryMaster_CRUDAsync(int SubCategory_ID, int Category_ID, string SubCategory_Desc, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SubCategoryMaster_CRUDOperationCompleted == null)) {
                this.SubCategoryMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubCategoryMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SubCategoryMaster_CRUD", new object[] {
                        SubCategory_ID,
                        Category_ID,
                        SubCategory_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SubCategoryMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSubCategoryMaster_CRUDOperationCompleted(object arg) {
            if ((this.SubCategoryMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubCategoryMaster_CRUDCompleted(this, new SubCategoryMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PermitMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PermitMaster_CRUD(int Permit_ID, string Permit_Desc, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("PermitMaster_CRUD", new object[] {
                        Permit_ID,
                        Permit_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PermitMaster_CRUDAsync(int Permit_ID, string Permit_Desc, string LoggedInUserID, int Company_ID, string Action) {
            this.PermitMaster_CRUDAsync(Permit_ID, Permit_Desc, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void PermitMaster_CRUDAsync(int Permit_ID, string Permit_Desc, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.PermitMaster_CRUDOperationCompleted == null)) {
                this.PermitMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPermitMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("PermitMaster_CRUD", new object[] {
                        Permit_ID,
                        Permit_Desc,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.PermitMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnPermitMaster_CRUDOperationCompleted(object arg) {
            if ((this.PermitMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PermitMaster_CRUDCompleted(this, new PermitMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Save_CategorySizeLinkup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Save_CategorySizeLinkup(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID) {
            object[] results = this.Invoke("Save_CategorySizeLinkup", new object[] {
                        CategoryID,
                        CategoryDetails,
                        LicenseID,
                        CompanyID,
                        LoggedInUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Save_CategorySizeLinkupAsync(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID) {
            this.Save_CategorySizeLinkupAsync(CategoryID, CategoryDetails, LicenseID, CompanyID, LoggedInUserID, null);
        }
        
        /// <remarks/>
        public void Save_CategorySizeLinkupAsync(int CategoryID, string CategoryDetails, int LicenseID, int CompanyID, string LoggedInUserID, object userState) {
            if ((this.Save_CategorySizeLinkupOperationCompleted == null)) {
                this.Save_CategorySizeLinkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSave_CategorySizeLinkupOperationCompleted);
            }
            this.InvokeAsync("Save_CategorySizeLinkup", new object[] {
                        CategoryID,
                        CategoryDetails,
                        LicenseID,
                        CompanyID,
                        LoggedInUserID}, this.Save_CategorySizeLinkupOperationCompleted, userState);
        }
        
        private void OnSave_CategorySizeLinkupOperationCompleted(object arg) {
            if ((this.Save_CategorySizeLinkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Save_CategorySizeLinkupCompleted(this, new Save_CategorySizeLinkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/License", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet License(string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("License", new object[] {
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LicenseAsync(string LoggedInUserID, int Company_ID, string Action) {
            this.LicenseAsync(LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void LicenseAsync(string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.LicenseOperationCompleted == null)) {
                this.LicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicenseOperationCompleted);
            }
            this.InvokeAsync("License", new object[] {
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.LicenseOperationCompleted, userState);
        }
        
        private void OnLicenseOperationCompleted(object arg) {
            if ((this.LicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LicenseCompleted(this, new LicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SupplierMaster_CRUD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SupplierMaster_CRUD(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, int Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action) {
            object[] results = this.Invoke("SupplierMaster_CRUD", new object[] {
                        Supplier_ID,
                        SupplierName,
                        Code,
                        pincode,
                        Address,
                        Contact,
                        City,
                        Email,
                        LoggedInUserID,
                        Company_ID,
                        Action});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SupplierMaster_CRUDAsync(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, int Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action) {
            this.SupplierMaster_CRUDAsync(Supplier_ID, SupplierName, Code, pincode, Address, Contact, City, Email, LoggedInUserID, Company_ID, Action, null);
        }
        
        /// <remarks/>
        public void SupplierMaster_CRUDAsync(int Supplier_ID, string SupplierName, string Code, int pincode, string Address, int Contact, string City, string Email, string LoggedInUserID, int Company_ID, string Action, object userState) {
            if ((this.SupplierMaster_CRUDOperationCompleted == null)) {
                this.SupplierMaster_CRUDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSupplierMaster_CRUDOperationCompleted);
            }
            this.InvokeAsync("SupplierMaster_CRUD", new object[] {
                        Supplier_ID,
                        SupplierName,
                        Code,
                        pincode,
                        Address,
                        Contact,
                        City,
                        Email,
                        LoggedInUserID,
                        Company_ID,
                        Action}, this.SupplierMaster_CRUDOperationCompleted, userState);
        }
        
        private void OnSupplierMaster_CRUDOperationCompleted(object arg) {
            if ((this.SupplierMaster_CRUDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SupplierMaster_CRUDCompleted(this, new SupplierMaster_CRUDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CategoryMaster_CRUDCompletedEventHandler(object sender, CategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchCategorySizeLinkupCompletedEventHandler(object sender, FetchCategorySizeLinkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCategorySizeLinkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCategorySizeLinkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BrandMaster_CRUDCompletedEventHandler(object sender, BrandMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrandMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrandMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SizeMaster_CRUDCompletedEventHandler(object sender, SizeMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SizeMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SizeMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SubCategoryMaster_CRUDCompletedEventHandler(object sender, SubCategoryMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubCategoryMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubCategoryMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PermitMaster_CRUDCompletedEventHandler(object sender, PermitMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PermitMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PermitMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Save_CategorySizeLinkupCompletedEventHandler(object sender, Save_CategorySizeLinkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Save_CategorySizeLinkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Save_CategorySizeLinkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LicenseCompletedEventHandler(object sender, LicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SupplierMaster_CRUDCompletedEventHandler(object sender, SupplierMaster_CRUDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SupplierMaster_CRUDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SupplierMaster_CRUDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591